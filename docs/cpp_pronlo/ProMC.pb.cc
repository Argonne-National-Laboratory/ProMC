// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProMC.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProMC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace promc {

namespace {

const ::google::protobuf::Descriptor* ProMCEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProMCEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProMCEvent_Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProMCEvent_Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProMCEvent_Particles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProMCEvent_Particles_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProMC_2eproto() {
  protobuf_AddDesc_ProMC_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProMC.proto");
  GOOGLE_CHECK(file != NULL);
  ProMCEvent_descriptor_ = file->message_type(0);
  static const int ProMCEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent, particles_),
  };
  ProMCEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProMCEvent_descriptor_,
      ProMCEvent::default_instance_,
      ProMCEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProMCEvent));
  ProMCEvent_Event_descriptor_ = ProMCEvent_descriptor_->nested_type(0);
  static const int ProMCEvent_Event_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Event, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Event, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Event, fdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Event, idata_),
  };
  ProMCEvent_Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProMCEvent_Event_descriptor_,
      ProMCEvent_Event::default_instance_,
      ProMCEvent_Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProMCEvent_Event));
  ProMCEvent_Particles_descriptor_ = ProMCEvent_descriptor_->nested_type(1);
  static const int ProMCEvent_Particles_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Particles, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Particles, pdg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Particles, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Particles, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Particles, py_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Particles, pz_),
  };
  ProMCEvent_Particles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProMCEvent_Particles_descriptor_,
      ProMCEvent_Particles::default_instance_,
      ProMCEvent_Particles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Particles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCEvent_Particles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProMCEvent_Particles));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProMC_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProMCEvent_descriptor_, &ProMCEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProMCEvent_Event_descriptor_, &ProMCEvent_Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProMCEvent_Particles_descriptor_, &ProMCEvent_Particles::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProMC_2eproto() {
  delete ProMCEvent::default_instance_;
  delete ProMCEvent_reflection_;
  delete ProMCEvent_Event::default_instance_;
  delete ProMCEvent_Event_reflection_;
  delete ProMCEvent_Particles::default_instance_;
  delete ProMCEvent_Particles_reflection_;
}

void protobuf_AddDesc_ProMC_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013ProMC.proto\022\005promc\"\244\002\n\nProMCEvent\022&\n\005e"
    "vent\030\001 \001(\0132\027.promc.ProMCEvent.Event\022.\n\tp"
    "articles\030\002 \001(\0132\033.promc.ProMCEvent.Partic"
    "les\032I\n\005Event\022\016\n\006Number\030\001 \001(\005\022\022\n\nProcess_"
    "ID\030\002 \001(\005\022\r\n\005fdata\030\003 \003(\002\022\r\n\005idata\030\004 \003(\022\032s"
    "\n\tParticles\022\016\n\002id\030\001 \003(\rB\002\020\001\022\022\n\006pdg_id\030\002 "
    "\003(\021B\002\020\001\022\022\n\006Energy\030\003 \003(\022B\002\020\001\022\016\n\002Px\030\004 \003(\022B"
    "\002\020\001\022\016\n\002Py\030\005 \003(\022B\002\020\001\022\016\n\002Pz\030\006 \003(\022B\002\020\001B\021\n\010p"
    "romc.ioB\005ProMC", 334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProMC.proto", &protobuf_RegisterTypes);
  ProMCEvent::default_instance_ = new ProMCEvent();
  ProMCEvent_Event::default_instance_ = new ProMCEvent_Event();
  ProMCEvent_Particles::default_instance_ = new ProMCEvent_Particles();
  ProMCEvent::default_instance_->InitAsDefaultInstance();
  ProMCEvent_Event::default_instance_->InitAsDefaultInstance();
  ProMCEvent_Particles::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProMC_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProMC_2eproto {
  StaticDescriptorInitializer_ProMC_2eproto() {
    protobuf_AddDesc_ProMC_2eproto();
  }
} static_descriptor_initializer_ProMC_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProMCEvent_Event::kNumberFieldNumber;
const int ProMCEvent_Event::kProcessIDFieldNumber;
const int ProMCEvent_Event::kFdataFieldNumber;
const int ProMCEvent_Event::kIdataFieldNumber;
#endif  // !_MSC_VER

ProMCEvent_Event::ProMCEvent_Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProMCEvent_Event::InitAsDefaultInstance() {
}

ProMCEvent_Event::ProMCEvent_Event(const ProMCEvent_Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProMCEvent_Event::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  process_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProMCEvent_Event::~ProMCEvent_Event() {
  SharedDtor();
}

void ProMCEvent_Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProMCEvent_Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProMCEvent_Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProMCEvent_Event_descriptor_;
}

const ProMCEvent_Event& ProMCEvent_Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProMC_2eproto();
  return *default_instance_;
}

ProMCEvent_Event* ProMCEvent_Event::default_instance_ = NULL;

ProMCEvent_Event* ProMCEvent_Event::New() const {
  return new ProMCEvent_Event;
}

void ProMCEvent_Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    process_id_ = 0;
  }
  fdata_.Clear();
  idata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProMCEvent_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Process_ID;
        break;
      }

      // optional int32 Process_ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Process_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_fdata;
        break;
      }

      // repeated float fdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_fdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_fdata;
        if (input->ExpectTag(32)) goto parse_idata;
        break;
      }

      // repeated sint64 idata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 32, input, this->mutable_idata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_idata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_idata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProMCEvent_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // optional int32 Process_ID = 2;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->process_id(), output);
  }

  // repeated float fdata = 3;
  for (int i = 0; i < this->fdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->fdata(i), output);
  }

  // repeated sint64 idata = 4;
  for (int i = 0; i < this->idata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      4, this->idata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProMCEvent_Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // optional int32 Process_ID = 2;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->process_id(), target);
  }

  // repeated float fdata = 3;
  for (int i = 0; i < this->fdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->fdata(i), target);
  }

  // repeated sint64 idata = 4;
  for (int i = 0; i < this->idata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(4, this->idata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProMCEvent_Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional int32 Process_ID = 2;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_id());
    }

  }
  // repeated float fdata = 3;
  {
    int data_size = 0;
    data_size = 4 * this->fdata_size();
    total_size += 1 * this->fdata_size() + data_size;
  }

  // repeated sint64 idata = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->idata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->idata(i));
    }
    total_size += 1 * this->idata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProMCEvent_Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProMCEvent_Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProMCEvent_Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProMCEvent_Event::MergeFrom(const ProMCEvent_Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  fdata_.MergeFrom(from.fdata_);
  idata_.MergeFrom(from.idata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProMCEvent_Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProMCEvent_Event::CopyFrom(const ProMCEvent_Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProMCEvent_Event::IsInitialized() const {

  return true;
}

void ProMCEvent_Event::Swap(ProMCEvent_Event* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(process_id_, other->process_id_);
    fdata_.Swap(&other->fdata_);
    idata_.Swap(&other->idata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProMCEvent_Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProMCEvent_Event_descriptor_;
  metadata.reflection = ProMCEvent_Event_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProMCEvent_Particles::kIdFieldNumber;
const int ProMCEvent_Particles::kPdgIdFieldNumber;
const int ProMCEvent_Particles::kEnergyFieldNumber;
const int ProMCEvent_Particles::kPxFieldNumber;
const int ProMCEvent_Particles::kPyFieldNumber;
const int ProMCEvent_Particles::kPzFieldNumber;
#endif  // !_MSC_VER

ProMCEvent_Particles::ProMCEvent_Particles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProMCEvent_Particles::InitAsDefaultInstance() {
}

ProMCEvent_Particles::ProMCEvent_Particles(const ProMCEvent_Particles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProMCEvent_Particles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProMCEvent_Particles::~ProMCEvent_Particles() {
  SharedDtor();
}

void ProMCEvent_Particles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProMCEvent_Particles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProMCEvent_Particles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProMCEvent_Particles_descriptor_;
}

const ProMCEvent_Particles& ProMCEvent_Particles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProMC_2eproto();
  return *default_instance_;
}

ProMCEvent_Particles* ProMCEvent_Particles::default_instance_ = NULL;

ProMCEvent_Particles* ProMCEvent_Particles::New() const {
  return new ProMCEvent_Particles;
}

void ProMCEvent_Particles::Clear() {
  id_.Clear();
  pdg_id_.Clear();
  energy_.Clear();
  px_.Clear();
  py_.Clear();
  pz_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProMCEvent_Particles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pdg_id;
        break;
      }

      // repeated sint32 pdg_id = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_pdg_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 18, input, this->mutable_pdg_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Energy;
        break;
      }

      // repeated sint64 Energy = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_energy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 26, input, this->mutable_energy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Px;
        break;
      }

      // repeated sint64 Px = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_px())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 34, input, this->mutable_px())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Py;
        break;
      }

      // repeated sint64 Py = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Py:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_py())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 42, input, this->mutable_py())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Pz;
        break;
      }

      // repeated sint64 Pz = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_pz())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 50, input, this->mutable_pz())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProMCEvent_Particles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1 [packed = true];
  if (this->id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_id_cached_byte_size_);
  }
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->id(i), output);
  }

  // repeated sint32 pdg_id = 2 [packed = true];
  if (this->pdg_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pdg_id_cached_byte_size_);
  }
  for (int i = 0; i < this->pdg_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->pdg_id(i), output);
  }

  // repeated sint64 Energy = 3 [packed = true];
  if (this->energy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_energy_cached_byte_size_);
  }
  for (int i = 0; i < this->energy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->energy(i), output);
  }

  // repeated sint64 Px = 4 [packed = true];
  if (this->px_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_px_cached_byte_size_);
  }
  for (int i = 0; i < this->px_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->px(i), output);
  }

  // repeated sint64 Py = 5 [packed = true];
  if (this->py_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_py_cached_byte_size_);
  }
  for (int i = 0; i < this->py_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->py(i), output);
  }

  // repeated sint64 Pz = 6 [packed = true];
  if (this->pz_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pz_cached_byte_size_);
  }
  for (int i = 0; i < this->pz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64NoTag(
      this->pz(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProMCEvent_Particles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1 [packed = true];
  if (this->id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->id(i), target);
  }

  // repeated sint32 pdg_id = 2 [packed = true];
  if (this->pdg_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pdg_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pdg_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->pdg_id(i), target);
  }

  // repeated sint64 Energy = 3 [packed = true];
  if (this->energy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _energy_cached_byte_size_, target);
  }
  for (int i = 0; i < this->energy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->energy(i), target);
  }

  // repeated sint64 Px = 4 [packed = true];
  if (this->px_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _px_cached_byte_size_, target);
  }
  for (int i = 0; i < this->px_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->px(i), target);
  }

  // repeated sint64 Py = 5 [packed = true];
  if (this->py_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _py_cached_byte_size_, target);
  }
  for (int i = 0; i < this->py_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->py(i), target);
  }

  // repeated sint64 Pz = 6 [packed = true];
  if (this->pz_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pz_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64NoTagToArray(this->pz(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProMCEvent_Particles::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint32 pdg_id = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->pdg_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->pdg_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pdg_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 Energy = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->energy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->energy(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _energy_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 Px = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->px_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->px(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _px_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 Py = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->py_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->py(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _py_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated sint64 Pz = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->pz_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->pz(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pz_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProMCEvent_Particles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProMCEvent_Particles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProMCEvent_Particles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProMCEvent_Particles::MergeFrom(const ProMCEvent_Particles& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  pdg_id_.MergeFrom(from.pdg_id_);
  energy_.MergeFrom(from.energy_);
  px_.MergeFrom(from.px_);
  py_.MergeFrom(from.py_);
  pz_.MergeFrom(from.pz_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProMCEvent_Particles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProMCEvent_Particles::CopyFrom(const ProMCEvent_Particles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProMCEvent_Particles::IsInitialized() const {

  return true;
}

void ProMCEvent_Particles::Swap(ProMCEvent_Particles* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    pdg_id_.Swap(&other->pdg_id_);
    energy_.Swap(&other->energy_);
    px_.Swap(&other->px_);
    py_.Swap(&other->py_);
    pz_.Swap(&other->pz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProMCEvent_Particles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProMCEvent_Particles_descriptor_;
  metadata.reflection = ProMCEvent_Particles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProMCEvent::kEventFieldNumber;
const int ProMCEvent::kParticlesFieldNumber;
#endif  // !_MSC_VER

ProMCEvent::ProMCEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProMCEvent::InitAsDefaultInstance() {
  event_ = const_cast< ::promc::ProMCEvent_Event*>(&::promc::ProMCEvent_Event::default_instance());
  particles_ = const_cast< ::promc::ProMCEvent_Particles*>(&::promc::ProMCEvent_Particles::default_instance());
}

ProMCEvent::ProMCEvent(const ProMCEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProMCEvent::SharedCtor() {
  _cached_size_ = 0;
  event_ = NULL;
  particles_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProMCEvent::~ProMCEvent() {
  SharedDtor();
}

void ProMCEvent::SharedDtor() {
  if (this != default_instance_) {
    delete event_;
    delete particles_;
  }
}

void ProMCEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProMCEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProMCEvent_descriptor_;
}

const ProMCEvent& ProMCEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProMC_2eproto();
  return *default_instance_;
}

ProMCEvent* ProMCEvent::default_instance_ = NULL;

ProMCEvent* ProMCEvent::New() const {
  return new ProMCEvent;
}

void ProMCEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_event()) {
      if (event_ != NULL) event_->::promc::ProMCEvent_Event::Clear();
    }
    if (has_particles()) {
      if (particles_ != NULL) particles_->::promc::ProMCEvent_Particles::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProMCEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .promc.ProMCEvent.Event event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_particles;
        break;
      }

      // optional .promc.ProMCEvent.Particles particles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_particles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProMCEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .promc.ProMCEvent.Event event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(), output);
  }

  // optional .promc.ProMCEvent.Particles particles = 2;
  if (has_particles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->particles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProMCEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .promc.ProMCEvent.Event event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event(), target);
  }

  // optional .promc.ProMCEvent.Particles particles = 2;
  if (has_particles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->particles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProMCEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .promc.ProMCEvent.Event event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }

    // optional .promc.ProMCEvent.Particles particles = 2;
    if (has_particles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particles());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProMCEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProMCEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProMCEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProMCEvent::MergeFrom(const ProMCEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      mutable_event()->::promc::ProMCEvent_Event::MergeFrom(from.event());
    }
    if (from.has_particles()) {
      mutable_particles()->::promc::ProMCEvent_Particles::MergeFrom(from.particles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProMCEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProMCEvent::CopyFrom(const ProMCEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProMCEvent::IsInitialized() const {

  return true;
}

void ProMCEvent::Swap(ProMCEvent* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(particles_, other->particles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProMCEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProMCEvent_descriptor_;
  metadata.reflection = ProMCEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace promc

// @@protoc_insertion_point(global_scope)
