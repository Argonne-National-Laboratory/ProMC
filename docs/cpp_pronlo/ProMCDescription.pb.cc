// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProMCDescription.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProMCDescription.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace promc {

namespace {

const ::google::protobuf::Descriptor* ProMCDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProMCDescription_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProMCDescription_2eproto() {
  protobuf_AddDesc_ProMCDescription_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProMCDescription.proto");
  GOOGLE_CHECK(file != NULL);
  ProMCDescription_descriptor_ = file->message_type(0);
  static const int ProMCDescription_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCDescription, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCDescription, events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCDescription, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCDescription, timestamp_),
  };
  ProMCDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProMCDescription_descriptor_,
      ProMCDescription::default_instance_,
      ProMCDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProMCDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProMCDescription));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProMCDescription_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProMCDescription_descriptor_, &ProMCDescription::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProMCDescription_2eproto() {
  delete ProMCDescription::default_instance_;
  delete ProMCDescription_reflection_;
}

void protobuf_AddDesc_ProMCDescription_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProMCDescription.proto\022\005promc\"[\n\020ProMC"
    "Description\022\017\n\007version\030\001 \002(\004\022\016\n\006events\030\002"
    " \002(\004\022\023\n\013description\030\003 \002(\t\022\021\n\ttimestamp\030\004"
    " \002(\004B \n\010promc.ioB\024ProMCDescriptionFile", 158);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProMCDescription.proto", &protobuf_RegisterTypes);
  ProMCDescription::default_instance_ = new ProMCDescription();
  ProMCDescription::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProMCDescription_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProMCDescription_2eproto {
  StaticDescriptorInitializer_ProMCDescription_2eproto() {
    protobuf_AddDesc_ProMCDescription_2eproto();
  }
} static_descriptor_initializer_ProMCDescription_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProMCDescription::kVersionFieldNumber;
const int ProMCDescription::kEventsFieldNumber;
const int ProMCDescription::kDescriptionFieldNumber;
const int ProMCDescription::kTimestampFieldNumber;
#endif  // !_MSC_VER

ProMCDescription::ProMCDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProMCDescription::InitAsDefaultInstance() {
}

ProMCDescription::ProMCDescription(const ProMCDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProMCDescription::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  events_ = GOOGLE_ULONGLONG(0);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProMCDescription::~ProMCDescription() {
  SharedDtor();
}

void ProMCDescription::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void ProMCDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProMCDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProMCDescription_descriptor_;
}

const ProMCDescription& ProMCDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProMCDescription_2eproto();
  return *default_instance_;
}

ProMCDescription* ProMCDescription::default_instance_ = NULL;

ProMCDescription* ProMCDescription::New() const {
  return new ProMCDescription;
}

void ProMCDescription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = GOOGLE_ULONGLONG(0);
    events_ = GOOGLE_ULONGLONG(0);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProMCDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_events;
        break;
      }

      // required uint64 events = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &events_)));
          set_has_events();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // required string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProMCDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // required uint64 events = 2;
  if (has_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->events(), output);
  }

  // required string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }

  // required uint64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProMCDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // required uint64 events = 2;
  if (has_events()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->events(), target);
  }

  // required string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // required uint64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProMCDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // required uint64 events = 2;
    if (has_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->events());
    }

    // required string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required uint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProMCDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProMCDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProMCDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProMCDescription::MergeFrom(const ProMCDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_events()) {
      set_events(from.events());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProMCDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProMCDescription::CopyFrom(const ProMCDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProMCDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ProMCDescription::Swap(ProMCDescription* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(events_, other->events_);
    std::swap(description_, other->description_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProMCDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProMCDescription_descriptor_;
  metadata.reflection = ProMCDescription_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace promc

// @@protoc_insertion_point(global_scope)
