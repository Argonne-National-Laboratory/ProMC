// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProMC.proto

package promc.io;

public final class ProMC {
  private ProMC() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ProMCEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .promc.ProMCEvent.Event event = 1;
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    boolean hasEvent();
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    promc.io.ProMC.ProMCEvent.Event getEvent();
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    promc.io.ProMC.ProMCEvent.EventOrBuilder getEventOrBuilder();

    // optional .promc.ProMCEvent.Particles particles = 2;
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    boolean hasParticles();
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    promc.io.ProMC.ProMCEvent.Particles getParticles();
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    promc.io.ProMC.ProMCEvent.ParticlesOrBuilder getParticlesOrBuilder();
  }
  /**
   * Protobuf type {@code promc.ProMCEvent}
   */
  public static final class ProMCEvent extends
      com.google.protobuf.GeneratedMessage
      implements ProMCEventOrBuilder {
    // Use ProMCEvent.newBuilder() to construct.
    private ProMCEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ProMCEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ProMCEvent defaultInstance;
    public static ProMCEvent getDefaultInstance() {
      return defaultInstance;
    }

    public ProMCEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ProMCEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              promc.io.ProMC.ProMCEvent.Event.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(promc.io.ProMC.ProMCEvent.Event.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              promc.io.ProMC.ProMCEvent.Particles.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = particles_.toBuilder();
              }
              particles_ = input.readMessage(promc.io.ProMC.ProMCEvent.Particles.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(particles_);
                particles_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return promc.io.ProMC.internal_static_promc_ProMCEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return promc.io.ProMC.internal_static_promc_ProMCEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              promc.io.ProMC.ProMCEvent.class, promc.io.ProMC.ProMCEvent.Builder.class);
    }

    public static com.google.protobuf.Parser<ProMCEvent> PARSER =
        new com.google.protobuf.AbstractParser<ProMCEvent>() {
      public ProMCEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProMCEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ProMCEvent> getParserForType() {
      return PARSER;
    }

    public interface EventOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 Number = 1;
      /**
       * <code>optional int32 Number = 1;</code>
       *
       * <pre>
       * Number
       * </pre>
       */
      boolean hasNumber();
      /**
       * <code>optional int32 Number = 1;</code>
       *
       * <pre>
       * Number
       * </pre>
       */
      int getNumber();

      // optional int32 Process_ID = 2;
      /**
       * <code>optional int32 Process_ID = 2;</code>
       *
       * <pre>
       * ID unique signal process id
       * </pre>
       */
      boolean hasProcessID();
      /**
       * <code>optional int32 Process_ID = 2;</code>
       *
       * <pre>
       * ID unique signal process id
       * </pre>
       */
      int getProcessID();

      // optional int32 MPI = 3;
      /**
       * <code>optional int32 MPI = 3;</code>
       *
       * <pre>
       * MPI number of multi parton interactions
       * </pre>
       */
      boolean hasMPI();
      /**
       * <code>optional int32 MPI = 3;</code>
       *
       * <pre>
       * MPI number of multi parton interactions
       * </pre>
       */
      int getMPI();

      // optional int32 ID1 = 4;
      /**
       * <code>optional int32 ID1 = 4;</code>
       *
       * <pre>
       * ID1 flavour code of first parton
       * </pre>
       */
      boolean hasID1();
      /**
       * <code>optional int32 ID1 = 4;</code>
       *
       * <pre>
       * ID1 flavour code of first parton
       * </pre>
       */
      int getID1();

      // optional int32 ID2 = 5;
      /**
       * <code>optional int32 ID2 = 5;</code>
       *
       * <pre>
       * ID2 flavour code of second parton
       * </pre>
       */
      boolean hasID2();
      /**
       * <code>optional int32 ID2 = 5;</code>
       *
       * <pre>
       * ID2 flavour code of second parton
       * </pre>
       */
      int getID2();

      // optional float PDF1 = 6;
      /**
       * <code>optional float PDF1 = 6;</code>
       *
       * <pre>
       * PDF1 PDF (id1, x1, Q)
       * </pre>
       */
      boolean hasPDF1();
      /**
       * <code>optional float PDF1 = 6;</code>
       *
       * <pre>
       * PDF1 PDF (id1, x1, Q)
       * </pre>
       */
      float getPDF1();

      // optional float PDF2 = 7;
      /**
       * <code>optional float PDF2 = 7;</code>
       *
       * <pre>
       * PDF2 PDF (id2, x2, Q)
       * </pre>
       */
      boolean hasPDF2();
      /**
       * <code>optional float PDF2 = 7;</code>
       *
       * <pre>
       * PDF2 PDF (id2, x2, Q)
       * </pre>
       */
      float getPDF2();

      // optional float X1 = 8;
      /**
       * <code>optional float X1 = 8;</code>
       *
       * <pre>
       * X1 fraction of beam momentum carried by first parton ("beam side")
       * </pre>
       */
      boolean hasX1();
      /**
       * <code>optional float X1 = 8;</code>
       *
       * <pre>
       * X1 fraction of beam momentum carried by first parton ("beam side")
       * </pre>
       */
      float getX1();

      // optional float X2 = 9;
      /**
       * <code>optional float X2 = 9;</code>
       *
       * <pre>
       * X2 fraction of beam momentum carried by second parton ("target side")
       * </pre>
       */
      boolean hasX2();
      /**
       * <code>optional float X2 = 9;</code>
       *
       * <pre>
       * X2 fraction of beam momentum carried by second parton ("target side")
       * </pre>
       */
      float getX2();

      // optional float Scale_PDF = 10;
      /**
       * <code>optional float Scale_PDF = 10;</code>
       *
       * <pre>
       * Scale PDF Q-scale used in evaluation of PDF's (in GeV) |
       * </pre>
       */
      boolean hasScalePDF();
      /**
       * <code>optional float Scale_PDF = 10;</code>
       *
       * <pre>
       * Scale PDF Q-scale used in evaluation of PDF's (in GeV) |
       * </pre>
       */
      float getScalePDF();

      // optional float Alpha_QED = 11;
      /**
       * <code>optional float Alpha_QED = 11;</code>
       *
       * <pre>
       * AlphaQED QED coupling, see hep-ph/0109068
       * </pre>
       */
      boolean hasAlphaQED();
      /**
       * <code>optional float Alpha_QED = 11;</code>
       *
       * <pre>
       * AlphaQED QED coupling, see hep-ph/0109068
       * </pre>
       */
      float getAlphaQED();

      // optional float Scale = 12;
      /**
       * <code>optional float Scale = 12;</code>
       *
       * <pre>
       * Scale   energy scale, see hep-ph/0109068
       * </pre>
       */
      boolean hasScale();
      /**
       * <code>optional float Scale = 12;</code>
       *
       * <pre>
       * Scale   energy scale, see hep-ph/0109068
       * </pre>
       */
      float getScale();

      // optional float Alpha_QCD = 13;
      /**
       * <code>optional float Alpha_QCD = 13;</code>
       *
       * <pre>
       * QCD coupling, see hep-ph/0109068
       * </pre>
       */
      boolean hasAlphaQCD();
      /**
       * <code>optional float Alpha_QCD = 13;</code>
       *
       * <pre>
       * QCD coupling, see hep-ph/0109068
       * </pre>
       */
      float getAlphaQCD();

      // optional double Weight = 14;
      /**
       * <code>optional double Weight = 14;</code>
       *
       * <pre>
       * event weight 
       * </pre>
       */
      boolean hasWeight();
      /**
       * <code>optional double Weight = 14;</code>
       *
       * <pre>
       * event weight 
       * </pre>
       */
      double getWeight();
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Event}
     *
     * <pre>
     * Event information
     * </pre>
     */
    public static final class Event extends
        com.google.protobuf.GeneratedMessage
        implements EventOrBuilder {
      // Use Event.newBuilder() to construct.
      private Event(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Event(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Event defaultInstance;
      public static Event getDefaultInstance() {
        return defaultInstance;
      }

      public Event getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Event(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                number_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                processID_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                mPI_ = input.readInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                iD1_ = input.readInt32();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000010;
                iD2_ = input.readInt32();
                break;
              }
              case 53: {
                bitField0_ |= 0x00000020;
                pDF1_ = input.readFloat();
                break;
              }
              case 61: {
                bitField0_ |= 0x00000040;
                pDF2_ = input.readFloat();
                break;
              }
              case 69: {
                bitField0_ |= 0x00000080;
                x1_ = input.readFloat();
                break;
              }
              case 77: {
                bitField0_ |= 0x00000100;
                x2_ = input.readFloat();
                break;
              }
              case 85: {
                bitField0_ |= 0x00000200;
                scalePDF_ = input.readFloat();
                break;
              }
              case 93: {
                bitField0_ |= 0x00000400;
                alphaQED_ = input.readFloat();
                break;
              }
              case 101: {
                bitField0_ |= 0x00000800;
                scale_ = input.readFloat();
                break;
              }
              case 109: {
                bitField0_ |= 0x00001000;
                alphaQCD_ = input.readFloat();
                break;
              }
              case 113: {
                bitField0_ |= 0x00002000;
                weight_ = input.readDouble();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return promc.io.ProMC.internal_static_promc_ProMCEvent_Event_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return promc.io.ProMC.internal_static_promc_ProMCEvent_Event_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                promc.io.ProMC.ProMCEvent.Event.class, promc.io.ProMC.ProMCEvent.Event.Builder.class);
      }

      public static com.google.protobuf.Parser<Event> PARSER =
          new com.google.protobuf.AbstractParser<Event>() {
        public Event parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Event(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Event> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 Number = 1;
      public static final int NUMBER_FIELD_NUMBER = 1;
      private int number_;
      /**
       * <code>optional int32 Number = 1;</code>
       *
       * <pre>
       * Number
       * </pre>
       */
      public boolean hasNumber() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 Number = 1;</code>
       *
       * <pre>
       * Number
       * </pre>
       */
      public int getNumber() {
        return number_;
      }

      // optional int32 Process_ID = 2;
      public static final int PROCESS_ID_FIELD_NUMBER = 2;
      private int processID_;
      /**
       * <code>optional int32 Process_ID = 2;</code>
       *
       * <pre>
       * ID unique signal process id
       * </pre>
       */
      public boolean hasProcessID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 Process_ID = 2;</code>
       *
       * <pre>
       * ID unique signal process id
       * </pre>
       */
      public int getProcessID() {
        return processID_;
      }

      // optional int32 MPI = 3;
      public static final int MPI_FIELD_NUMBER = 3;
      private int mPI_;
      /**
       * <code>optional int32 MPI = 3;</code>
       *
       * <pre>
       * MPI number of multi parton interactions
       * </pre>
       */
      public boolean hasMPI() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 MPI = 3;</code>
       *
       * <pre>
       * MPI number of multi parton interactions
       * </pre>
       */
      public int getMPI() {
        return mPI_;
      }

      // optional int32 ID1 = 4;
      public static final int ID1_FIELD_NUMBER = 4;
      private int iD1_;
      /**
       * <code>optional int32 ID1 = 4;</code>
       *
       * <pre>
       * ID1 flavour code of first parton
       * </pre>
       */
      public boolean hasID1() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 ID1 = 4;</code>
       *
       * <pre>
       * ID1 flavour code of first parton
       * </pre>
       */
      public int getID1() {
        return iD1_;
      }

      // optional int32 ID2 = 5;
      public static final int ID2_FIELD_NUMBER = 5;
      private int iD2_;
      /**
       * <code>optional int32 ID2 = 5;</code>
       *
       * <pre>
       * ID2 flavour code of second parton
       * </pre>
       */
      public boolean hasID2() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 ID2 = 5;</code>
       *
       * <pre>
       * ID2 flavour code of second parton
       * </pre>
       */
      public int getID2() {
        return iD2_;
      }

      // optional float PDF1 = 6;
      public static final int PDF1_FIELD_NUMBER = 6;
      private float pDF1_;
      /**
       * <code>optional float PDF1 = 6;</code>
       *
       * <pre>
       * PDF1 PDF (id1, x1, Q)
       * </pre>
       */
      public boolean hasPDF1() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float PDF1 = 6;</code>
       *
       * <pre>
       * PDF1 PDF (id1, x1, Q)
       * </pre>
       */
      public float getPDF1() {
        return pDF1_;
      }

      // optional float PDF2 = 7;
      public static final int PDF2_FIELD_NUMBER = 7;
      private float pDF2_;
      /**
       * <code>optional float PDF2 = 7;</code>
       *
       * <pre>
       * PDF2 PDF (id2, x2, Q)
       * </pre>
       */
      public boolean hasPDF2() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float PDF2 = 7;</code>
       *
       * <pre>
       * PDF2 PDF (id2, x2, Q)
       * </pre>
       */
      public float getPDF2() {
        return pDF2_;
      }

      // optional float X1 = 8;
      public static final int X1_FIELD_NUMBER = 8;
      private float x1_;
      /**
       * <code>optional float X1 = 8;</code>
       *
       * <pre>
       * X1 fraction of beam momentum carried by first parton ("beam side")
       * </pre>
       */
      public boolean hasX1() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float X1 = 8;</code>
       *
       * <pre>
       * X1 fraction of beam momentum carried by first parton ("beam side")
       * </pre>
       */
      public float getX1() {
        return x1_;
      }

      // optional float X2 = 9;
      public static final int X2_FIELD_NUMBER = 9;
      private float x2_;
      /**
       * <code>optional float X2 = 9;</code>
       *
       * <pre>
       * X2 fraction of beam momentum carried by second parton ("target side")
       * </pre>
       */
      public boolean hasX2() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float X2 = 9;</code>
       *
       * <pre>
       * X2 fraction of beam momentum carried by second parton ("target side")
       * </pre>
       */
      public float getX2() {
        return x2_;
      }

      // optional float Scale_PDF = 10;
      public static final int SCALE_PDF_FIELD_NUMBER = 10;
      private float scalePDF_;
      /**
       * <code>optional float Scale_PDF = 10;</code>
       *
       * <pre>
       * Scale PDF Q-scale used in evaluation of PDF's (in GeV) |
       * </pre>
       */
      public boolean hasScalePDF() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float Scale_PDF = 10;</code>
       *
       * <pre>
       * Scale PDF Q-scale used in evaluation of PDF's (in GeV) |
       * </pre>
       */
      public float getScalePDF() {
        return scalePDF_;
      }

      // optional float Alpha_QED = 11;
      public static final int ALPHA_QED_FIELD_NUMBER = 11;
      private float alphaQED_;
      /**
       * <code>optional float Alpha_QED = 11;</code>
       *
       * <pre>
       * AlphaQED QED coupling, see hep-ph/0109068
       * </pre>
       */
      public boolean hasAlphaQED() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float Alpha_QED = 11;</code>
       *
       * <pre>
       * AlphaQED QED coupling, see hep-ph/0109068
       * </pre>
       */
      public float getAlphaQED() {
        return alphaQED_;
      }

      // optional float Scale = 12;
      public static final int SCALE_FIELD_NUMBER = 12;
      private float scale_;
      /**
       * <code>optional float Scale = 12;</code>
       *
       * <pre>
       * Scale   energy scale, see hep-ph/0109068
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float Scale = 12;</code>
       *
       * <pre>
       * Scale   energy scale, see hep-ph/0109068
       * </pre>
       */
      public float getScale() {
        return scale_;
      }

      // optional float Alpha_QCD = 13;
      public static final int ALPHA_QCD_FIELD_NUMBER = 13;
      private float alphaQCD_;
      /**
       * <code>optional float Alpha_QCD = 13;</code>
       *
       * <pre>
       * QCD coupling, see hep-ph/0109068
       * </pre>
       */
      public boolean hasAlphaQCD() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float Alpha_QCD = 13;</code>
       *
       * <pre>
       * QCD coupling, see hep-ph/0109068
       * </pre>
       */
      public float getAlphaQCD() {
        return alphaQCD_;
      }

      // optional double Weight = 14;
      public static final int WEIGHT_FIELD_NUMBER = 14;
      private double weight_;
      /**
       * <code>optional double Weight = 14;</code>
       *
       * <pre>
       * event weight 
       * </pre>
       */
      public boolean hasWeight() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional double Weight = 14;</code>
       *
       * <pre>
       * event weight 
       * </pre>
       */
      public double getWeight() {
        return weight_;
      }

      private void initFields() {
        number_ = 0;
        processID_ = 0;
        mPI_ = 0;
        iD1_ = 0;
        iD2_ = 0;
        pDF1_ = 0F;
        pDF2_ = 0F;
        x1_ = 0F;
        x2_ = 0F;
        scalePDF_ = 0F;
        alphaQED_ = 0F;
        scale_ = 0F;
        alphaQCD_ = 0F;
        weight_ = 0D;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, number_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, processID_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, mPI_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeInt32(4, iD1_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeInt32(5, iD2_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeFloat(6, pDF1_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeFloat(7, pDF2_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          output.writeFloat(8, x1_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          output.writeFloat(9, x2_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          output.writeFloat(10, scalePDF_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          output.writeFloat(11, alphaQED_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          output.writeFloat(12, scale_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          output.writeFloat(13, alphaQCD_);
        }
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          output.writeDouble(14, weight_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, number_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, processID_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, mPI_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, iD1_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, iD2_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(6, pDF1_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(7, pDF2_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(8, x1_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(9, x2_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(10, scalePDF_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(11, alphaQED_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(12, scale_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(13, alphaQCD_);
        }
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(14, weight_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static promc.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static promc.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static promc.io.ProMC.ProMCEvent.Event parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static promc.io.ProMC.ProMCEvent.Event parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static promc.io.ProMC.ProMCEvent.Event parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static promc.io.ProMC.ProMCEvent.Event parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static promc.io.ProMC.ProMCEvent.Event parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static promc.io.ProMC.ProMCEvent.Event parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static promc.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static promc.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(promc.io.ProMC.ProMCEvent.Event prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Event}
       *
       * <pre>
       * Event information
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements promc.io.ProMC.ProMCEvent.EventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return promc.io.ProMC.internal_static_promc_ProMCEvent_Event_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return promc.io.ProMC.internal_static_promc_ProMCEvent_Event_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  promc.io.ProMC.ProMCEvent.Event.class, promc.io.ProMC.ProMCEvent.Event.Builder.class);
        }

        // Construct using promc.io.ProMC.ProMCEvent.Event.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          number_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          processID_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          mPI_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          iD1_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          iD2_ = 0;
          bitField0_ = (bitField0_ & ~0x00000010);
          pDF1_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000020);
          pDF2_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000040);
          x1_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000080);
          x2_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000100);
          scalePDF_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000200);
          alphaQED_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000400);
          scale_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000800);
          alphaQCD_ = 0F;
          bitField0_ = (bitField0_ & ~0x00001000);
          weight_ = 0D;
          bitField0_ = (bitField0_ & ~0x00002000);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return promc.io.ProMC.internal_static_promc_ProMCEvent_Event_descriptor;
        }

        public promc.io.ProMC.ProMCEvent.Event getDefaultInstanceForType() {
          return promc.io.ProMC.ProMCEvent.Event.getDefaultInstance();
        }

        public promc.io.ProMC.ProMCEvent.Event build() {
          promc.io.ProMC.ProMCEvent.Event result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public promc.io.ProMC.ProMCEvent.Event buildPartial() {
          promc.io.ProMC.ProMCEvent.Event result = new promc.io.ProMC.ProMCEvent.Event(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.number_ = number_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.processID_ = processID_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.mPI_ = mPI_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.iD1_ = iD1_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.iD2_ = iD2_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          result.pDF1_ = pDF1_;
          if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
            to_bitField0_ |= 0x00000040;
          }
          result.pDF2_ = pDF2_;
          if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
            to_bitField0_ |= 0x00000080;
          }
          result.x1_ = x1_;
          if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
            to_bitField0_ |= 0x00000100;
          }
          result.x2_ = x2_;
          if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
            to_bitField0_ |= 0x00000200;
          }
          result.scalePDF_ = scalePDF_;
          if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
            to_bitField0_ |= 0x00000400;
          }
          result.alphaQED_ = alphaQED_;
          if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
            to_bitField0_ |= 0x00000800;
          }
          result.scale_ = scale_;
          if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
            to_bitField0_ |= 0x00001000;
          }
          result.alphaQCD_ = alphaQCD_;
          if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
            to_bitField0_ |= 0x00002000;
          }
          result.weight_ = weight_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof promc.io.ProMC.ProMCEvent.Event) {
            return mergeFrom((promc.io.ProMC.ProMCEvent.Event)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(promc.io.ProMC.ProMCEvent.Event other) {
          if (other == promc.io.ProMC.ProMCEvent.Event.getDefaultInstance()) return this;
          if (other.hasNumber()) {
            setNumber(other.getNumber());
          }
          if (other.hasProcessID()) {
            setProcessID(other.getProcessID());
          }
          if (other.hasMPI()) {
            setMPI(other.getMPI());
          }
          if (other.hasID1()) {
            setID1(other.getID1());
          }
          if (other.hasID2()) {
            setID2(other.getID2());
          }
          if (other.hasPDF1()) {
            setPDF1(other.getPDF1());
          }
          if (other.hasPDF2()) {
            setPDF2(other.getPDF2());
          }
          if (other.hasX1()) {
            setX1(other.getX1());
          }
          if (other.hasX2()) {
            setX2(other.getX2());
          }
          if (other.hasScalePDF()) {
            setScalePDF(other.getScalePDF());
          }
          if (other.hasAlphaQED()) {
            setAlphaQED(other.getAlphaQED());
          }
          if (other.hasScale()) {
            setScale(other.getScale());
          }
          if (other.hasAlphaQCD()) {
            setAlphaQCD(other.getAlphaQCD());
          }
          if (other.hasWeight()) {
            setWeight(other.getWeight());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          promc.io.ProMC.ProMCEvent.Event parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (promc.io.ProMC.ProMCEvent.Event) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 Number = 1;
        private int number_ ;
        /**
         * <code>optional int32 Number = 1;</code>
         *
         * <pre>
         * Number
         * </pre>
         */
        public boolean hasNumber() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 Number = 1;</code>
         *
         * <pre>
         * Number
         * </pre>
         */
        public int getNumber() {
          return number_;
        }
        /**
         * <code>optional int32 Number = 1;</code>
         *
         * <pre>
         * Number
         * </pre>
         */
        public Builder setNumber(int value) {
          bitField0_ |= 0x00000001;
          number_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 Number = 1;</code>
         *
         * <pre>
         * Number
         * </pre>
         */
        public Builder clearNumber() {
          bitField0_ = (bitField0_ & ~0x00000001);
          number_ = 0;
          onChanged();
          return this;
        }

        // optional int32 Process_ID = 2;
        private int processID_ ;
        /**
         * <code>optional int32 Process_ID = 2;</code>
         *
         * <pre>
         * ID unique signal process id
         * </pre>
         */
        public boolean hasProcessID() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 Process_ID = 2;</code>
         *
         * <pre>
         * ID unique signal process id
         * </pre>
         */
        public int getProcessID() {
          return processID_;
        }
        /**
         * <code>optional int32 Process_ID = 2;</code>
         *
         * <pre>
         * ID unique signal process id
         * </pre>
         */
        public Builder setProcessID(int value) {
          bitField0_ |= 0x00000002;
          processID_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 Process_ID = 2;</code>
         *
         * <pre>
         * ID unique signal process id
         * </pre>
         */
        public Builder clearProcessID() {
          bitField0_ = (bitField0_ & ~0x00000002);
          processID_ = 0;
          onChanged();
          return this;
        }

        // optional int32 MPI = 3;
        private int mPI_ ;
        /**
         * <code>optional int32 MPI = 3;</code>
         *
         * <pre>
         * MPI number of multi parton interactions
         * </pre>
         */
        public boolean hasMPI() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional int32 MPI = 3;</code>
         *
         * <pre>
         * MPI number of multi parton interactions
         * </pre>
         */
        public int getMPI() {
          return mPI_;
        }
        /**
         * <code>optional int32 MPI = 3;</code>
         *
         * <pre>
         * MPI number of multi parton interactions
         * </pre>
         */
        public Builder setMPI(int value) {
          bitField0_ |= 0x00000004;
          mPI_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 MPI = 3;</code>
         *
         * <pre>
         * MPI number of multi parton interactions
         * </pre>
         */
        public Builder clearMPI() {
          bitField0_ = (bitField0_ & ~0x00000004);
          mPI_ = 0;
          onChanged();
          return this;
        }

        // optional int32 ID1 = 4;
        private int iD1_ ;
        /**
         * <code>optional int32 ID1 = 4;</code>
         *
         * <pre>
         * ID1 flavour code of first parton
         * </pre>
         */
        public boolean hasID1() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional int32 ID1 = 4;</code>
         *
         * <pre>
         * ID1 flavour code of first parton
         * </pre>
         */
        public int getID1() {
          return iD1_;
        }
        /**
         * <code>optional int32 ID1 = 4;</code>
         *
         * <pre>
         * ID1 flavour code of first parton
         * </pre>
         */
        public Builder setID1(int value) {
          bitField0_ |= 0x00000008;
          iD1_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 ID1 = 4;</code>
         *
         * <pre>
         * ID1 flavour code of first parton
         * </pre>
         */
        public Builder clearID1() {
          bitField0_ = (bitField0_ & ~0x00000008);
          iD1_ = 0;
          onChanged();
          return this;
        }

        // optional int32 ID2 = 5;
        private int iD2_ ;
        /**
         * <code>optional int32 ID2 = 5;</code>
         *
         * <pre>
         * ID2 flavour code of second parton
         * </pre>
         */
        public boolean hasID2() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional int32 ID2 = 5;</code>
         *
         * <pre>
         * ID2 flavour code of second parton
         * </pre>
         */
        public int getID2() {
          return iD2_;
        }
        /**
         * <code>optional int32 ID2 = 5;</code>
         *
         * <pre>
         * ID2 flavour code of second parton
         * </pre>
         */
        public Builder setID2(int value) {
          bitField0_ |= 0x00000010;
          iD2_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 ID2 = 5;</code>
         *
         * <pre>
         * ID2 flavour code of second parton
         * </pre>
         */
        public Builder clearID2() {
          bitField0_ = (bitField0_ & ~0x00000010);
          iD2_ = 0;
          onChanged();
          return this;
        }

        // optional float PDF1 = 6;
        private float pDF1_ ;
        /**
         * <code>optional float PDF1 = 6;</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)
         * </pre>
         */
        public boolean hasPDF1() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional float PDF1 = 6;</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)
         * </pre>
         */
        public float getPDF1() {
          return pDF1_;
        }
        /**
         * <code>optional float PDF1 = 6;</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)
         * </pre>
         */
        public Builder setPDF1(float value) {
          bitField0_ |= 0x00000020;
          pDF1_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float PDF1 = 6;</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)
         * </pre>
         */
        public Builder clearPDF1() {
          bitField0_ = (bitField0_ & ~0x00000020);
          pDF1_ = 0F;
          onChanged();
          return this;
        }

        // optional float PDF2 = 7;
        private float pDF2_ ;
        /**
         * <code>optional float PDF2 = 7;</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)
         * </pre>
         */
        public boolean hasPDF2() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional float PDF2 = 7;</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)
         * </pre>
         */
        public float getPDF2() {
          return pDF2_;
        }
        /**
         * <code>optional float PDF2 = 7;</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)
         * </pre>
         */
        public Builder setPDF2(float value) {
          bitField0_ |= 0x00000040;
          pDF2_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float PDF2 = 7;</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)
         * </pre>
         */
        public Builder clearPDF2() {
          bitField0_ = (bitField0_ & ~0x00000040);
          pDF2_ = 0F;
          onChanged();
          return this;
        }

        // optional float X1 = 8;
        private float x1_ ;
        /**
         * <code>optional float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")
         * </pre>
         */
        public boolean hasX1() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>optional float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")
         * </pre>
         */
        public float getX1() {
          return x1_;
        }
        /**
         * <code>optional float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")
         * </pre>
         */
        public Builder setX1(float value) {
          bitField0_ |= 0x00000080;
          x1_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")
         * </pre>
         */
        public Builder clearX1() {
          bitField0_ = (bitField0_ & ~0x00000080);
          x1_ = 0F;
          onChanged();
          return this;
        }

        // optional float X2 = 9;
        private float x2_ ;
        /**
         * <code>optional float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")
         * </pre>
         */
        public boolean hasX2() {
          return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>optional float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")
         * </pre>
         */
        public float getX2() {
          return x2_;
        }
        /**
         * <code>optional float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")
         * </pre>
         */
        public Builder setX2(float value) {
          bitField0_ |= 0x00000100;
          x2_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")
         * </pre>
         */
        public Builder clearX2() {
          bitField0_ = (bitField0_ & ~0x00000100);
          x2_ = 0F;
          onChanged();
          return this;
        }

        // optional float Scale_PDF = 10;
        private float scalePDF_ ;
        /**
         * <code>optional float Scale_PDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) |
         * </pre>
         */
        public boolean hasScalePDF() {
          return ((bitField0_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>optional float Scale_PDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) |
         * </pre>
         */
        public float getScalePDF() {
          return scalePDF_;
        }
        /**
         * <code>optional float Scale_PDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) |
         * </pre>
         */
        public Builder setScalePDF(float value) {
          bitField0_ |= 0x00000200;
          scalePDF_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float Scale_PDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) |
         * </pre>
         */
        public Builder clearScalePDF() {
          bitField0_ = (bitField0_ & ~0x00000200);
          scalePDF_ = 0F;
          onChanged();
          return this;
        }

        // optional float Alpha_QED = 11;
        private float alphaQED_ ;
        /**
         * <code>optional float Alpha_QED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068
         * </pre>
         */
        public boolean hasAlphaQED() {
          return ((bitField0_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>optional float Alpha_QED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068
         * </pre>
         */
        public float getAlphaQED() {
          return alphaQED_;
        }
        /**
         * <code>optional float Alpha_QED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068
         * </pre>
         */
        public Builder setAlphaQED(float value) {
          bitField0_ |= 0x00000400;
          alphaQED_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float Alpha_QED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068
         * </pre>
         */
        public Builder clearAlphaQED() {
          bitField0_ = (bitField0_ & ~0x00000400);
          alphaQED_ = 0F;
          onChanged();
          return this;
        }

        // optional float Scale = 12;
        private float scale_ ;
        /**
         * <code>optional float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068
         * </pre>
         */
        public boolean hasScale() {
          return ((bitField0_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>optional float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068
         * </pre>
         */
        public float getScale() {
          return scale_;
        }
        /**
         * <code>optional float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068
         * </pre>
         */
        public Builder setScale(float value) {
          bitField0_ |= 0x00000800;
          scale_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068
         * </pre>
         */
        public Builder clearScale() {
          bitField0_ = (bitField0_ & ~0x00000800);
          scale_ = 0F;
          onChanged();
          return this;
        }

        // optional float Alpha_QCD = 13;
        private float alphaQCD_ ;
        /**
         * <code>optional float Alpha_QCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public boolean hasAlphaQCD() {
          return ((bitField0_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>optional float Alpha_QCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public float getAlphaQCD() {
          return alphaQCD_;
        }
        /**
         * <code>optional float Alpha_QCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public Builder setAlphaQCD(float value) {
          bitField0_ |= 0x00001000;
          alphaQCD_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float Alpha_QCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public Builder clearAlphaQCD() {
          bitField0_ = (bitField0_ & ~0x00001000);
          alphaQCD_ = 0F;
          onChanged();
          return this;
        }

        // optional double Weight = 14;
        private double weight_ ;
        /**
         * <code>optional double Weight = 14;</code>
         *
         * <pre>
         * event weight 
         * </pre>
         */
        public boolean hasWeight() {
          return ((bitField0_ & 0x00002000) == 0x00002000);
        }
        /**
         * <code>optional double Weight = 14;</code>
         *
         * <pre>
         * event weight 
         * </pre>
         */
        public double getWeight() {
          return weight_;
        }
        /**
         * <code>optional double Weight = 14;</code>
         *
         * <pre>
         * event weight 
         * </pre>
         */
        public Builder setWeight(double value) {
          bitField0_ |= 0x00002000;
          weight_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double Weight = 14;</code>
         *
         * <pre>
         * event weight 
         * </pre>
         */
        public Builder clearWeight() {
          bitField0_ = (bitField0_ & ~0x00002000);
          weight_ = 0D;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Event)
      }

      static {
        defaultInstance = new Event(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Event)
    }

    public interface ParticlesOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint32 id = 1 [packed = true];
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      java.util.List<java.lang.Integer> getIdList();
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      int getIdCount();
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      int getId(int index);

      // repeated sint32 pdg_id = 2 [packed = true];
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      java.util.List<java.lang.Integer> getPdgIdList();
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      int getPdgIdCount();
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      int getPdgId(int index);

      // repeated uint32 status = 3 [packed = true];
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not) 
       * </pre>
       */
      java.util.List<java.lang.Integer> getStatusList();
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not) 
       * </pre>
       */
      int getStatusCount();
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not) 
       * </pre>
       */
      int getStatus(int index);

      // repeated uint64 mass = 4 [packed = true];
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass 
       * </pre>
       */
      java.util.List<java.lang.Long> getMassList();
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass 
       * </pre>
       */
      int getMassCount();
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass 
       * </pre>
       */
      long getMass(int index);

      // repeated sint64 Px = 5 [packed = true];
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      java.util.List<java.lang.Long> getPxList();
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      int getPxCount();
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      long getPx(int index);

      // repeated sint64 Py = 6 [packed = true];
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      java.util.List<java.lang.Long> getPyList();
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      int getPyCount();
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      long getPy(int index);

      // repeated sint64 Pz = 7 [packed = true];
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      java.util.List<java.lang.Long> getPzList();
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      int getPzCount();
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      long getPz(int index);

      // repeated uint32 mother1 = 8 [packed = true];
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother 
       * </pre>
       */
      java.util.List<java.lang.Integer> getMother1List();
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother 
       * </pre>
       */
      int getMother1Count();
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother 
       * </pre>
       */
      int getMother1(int index);

      // repeated uint32 mother2 = 9 [packed = true];
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother  
       * </pre>
       */
      java.util.List<java.lang.Integer> getMother2List();
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother  
       * </pre>
       */
      int getMother2Count();
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother  
       * </pre>
       */
      int getMother2(int index);

      // repeated uint32 daughter1 = 10 [packed = true];
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter 
       * </pre>
       */
      java.util.List<java.lang.Integer> getDaughter1List();
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter 
       * </pre>
       */
      int getDaughter1Count();
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter 
       * </pre>
       */
      int getDaughter1(int index);

      // repeated uint32 daughter2 = 11 [packed = true];
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter 
       * </pre>
       */
      java.util.List<java.lang.Integer> getDaughter2List();
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter 
       * </pre>
       */
      int getDaughter2Count();
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter 
       * </pre>
       */
      int getDaughter2(int index);

      // repeated sint32 barcode = 12 [packed = true];
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used 
       * </pre>
       */
      java.util.List<java.lang.Integer> getBarcodeList();
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used 
       * </pre>
       */
      int getBarcodeCount();
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used 
       * </pre>
       */
      int getBarcode(int index);

      // repeated sint32 X = 13 [packed = true];
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position 
       * </pre>
       */
      java.util.List<java.lang.Integer> getXList();
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position 
       * </pre>
       */
      int getXCount();
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position 
       * </pre>
       */
      int getX(int index);

      // repeated sint32 Y = 14 [packed = true];
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position  
       * </pre>
       */
      java.util.List<java.lang.Integer> getYList();
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position  
       * </pre>
       */
      int getYCount();
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position  
       * </pre>
       */
      int getY(int index);

      // repeated sint32 Z = 15 [packed = true];
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position 
       * </pre>
       */
      java.util.List<java.lang.Integer> getZList();
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position 
       * </pre>
       */
      int getZCount();
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position 
       * </pre>
       */
      int getZ(int index);

      // repeated uint32 T = 16 [packed = true];
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time 
       * </pre>
       */
      java.util.List<java.lang.Integer> getTList();
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time 
       * </pre>
       */
      int getTCount();
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time 
       * </pre>
       */
      int getT(int index);

      // repeated uint64 weight = 17 [packed = true];
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight 
       * </pre>
       */
      java.util.List<java.lang.Long> getWeightList();
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight 
       * </pre>
       */
      int getWeightCount();
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight 
       * </pre>
       */
      long getWeight(int index);

      // repeated sint32 charge = 18 [packed = true];
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      java.util.List<java.lang.Integer> getChargeList();
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getChargeCount();
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getCharge(int index);

      // repeated sint64 energy = 19 [packed = true];
      /**
       * <code>repeated sint64 energy = 19 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      java.util.List<java.lang.Long> getEnergyList();
      /**
       * <code>repeated sint64 energy = 19 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      int getEnergyCount();
      /**
       * <code>repeated sint64 energy = 19 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      long getEnergy(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Particles}
     *
     * <pre>
     * Generator (truth) particles 
     * </pre>
     */
    public static final class Particles extends
        com.google.protobuf.GeneratedMessage
        implements ParticlesOrBuilder {
      // Use Particles.newBuilder() to construct.
      private Particles(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Particles(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Particles defaultInstance;
      public static Particles getDefaultInstance() {
        return defaultInstance;
      }

      public Particles getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Particles(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  id_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                id_.add(input.readUInt32());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  id_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  id_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  pdgId_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                pdgId_.add(input.readSInt32());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  pdgId_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pdgId_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  status_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                status_.add(input.readUInt32());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  status_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  status_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  mass_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                mass_.add(input.readUInt64());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  mass_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mass_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  px_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000010;
                }
                px_.add(input.readSInt64());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  px_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  px_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 48: {
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  py_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000020;
                }
                py_.add(input.readSInt64());
                break;
              }
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                  py_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000020;
                }
                while (input.getBytesUntilLimit() > 0) {
                  py_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 56: {
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  pz_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000040;
                }
                pz_.add(input.readSInt64());
                break;
              }
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                  pz_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000040;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pz_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 64: {
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                  mother1_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                mother1_.add(input.readUInt32());
                break;
              }
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                  mother1_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mother1_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 72: {
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                  mother2_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                mother2_.add(input.readUInt32());
                break;
              }
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                  mother2_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mother2_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 80: {
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                  daughter1_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                daughter1_.add(input.readUInt32());
                break;
              }
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                  daughter1_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                while (input.getBytesUntilLimit() > 0) {
                  daughter1_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 88: {
                if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                  daughter2_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000400;
                }
                daughter2_.add(input.readUInt32());
                break;
              }
              case 90: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                  daughter2_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000400;
                }
                while (input.getBytesUntilLimit() > 0) {
                  daughter2_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 96: {
                if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                  barcode_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000800;
                }
                barcode_.add(input.readSInt32());
                break;
              }
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                  barcode_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000800;
                }
                while (input.getBytesUntilLimit() > 0) {
                  barcode_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 104: {
                if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                  x_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00001000;
                }
                x_.add(input.readSInt32());
                break;
              }
              case 106: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                  x_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00001000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  x_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 112: {
                if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                  y_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00002000;
                }
                y_.add(input.readSInt32());
                break;
              }
              case 114: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                  y_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00002000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  y_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 120: {
                if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                  z_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00004000;
                }
                z_.add(input.readSInt32());
                break;
              }
              case 122: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                  z_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00004000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  z_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 128: {
                if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                  t_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00008000;
                }
                t_.add(input.readUInt32());
                break;
              }
              case 130: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                  t_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00008000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  t_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 136: {
                if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                  weight_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00010000;
                }
                weight_.add(input.readUInt64());
                break;
              }
              case 138: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                  weight_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00010000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  weight_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 144: {
                if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00020000;
                }
                charge_.add(input.readSInt32());
                break;
              }
              case 146: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00020000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  charge_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 152: {
                if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                  energy_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00040000;
                }
                energy_.add(input.readSInt64());
                break;
              }
              case 154: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                  energy_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00040000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  energy_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            id_ = java.util.Collections.unmodifiableList(id_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            pdgId_ = java.util.Collections.unmodifiableList(pdgId_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            status_ = java.util.Collections.unmodifiableList(status_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = java.util.Collections.unmodifiableList(mass_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            px_ = java.util.Collections.unmodifiableList(px_);
          }
          if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
            py_ = java.util.Collections.unmodifiableList(py_);
          }
          if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
            pz_ = java.util.Collections.unmodifiableList(pz_);
          }
          if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
            mother1_ = java.util.Collections.unmodifiableList(mother1_);
          }
          if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
            mother2_ = java.util.Collections.unmodifiableList(mother2_);
          }
          if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
            daughter1_ = java.util.Collections.unmodifiableList(daughter1_);
          }
          if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
            daughter2_ = java.util.Collections.unmodifiableList(daughter2_);
          }
          if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
            barcode_ = java.util.Collections.unmodifiableList(barcode_);
          }
          if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
            x_ = java.util.Collections.unmodifiableList(x_);
          }
          if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
            y_ = java.util.Collections.unmodifiableList(y_);
          }
          if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
            z_ = java.util.Collections.unmodifiableList(z_);
          }
          if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
            t_ = java.util.Collections.unmodifiableList(t_);
          }
          if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
            weight_ = java.util.Collections.unmodifiableList(weight_);
          }
          if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
          }
          if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
            energy_ = java.util.Collections.unmodifiableList(energy_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return promc.io.ProMC.internal_static_promc_ProMCEvent_Particles_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return promc.io.ProMC.internal_static_promc_ProMCEvent_Particles_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                promc.io.ProMC.ProMCEvent.Particles.class, promc.io.ProMC.ProMCEvent.Particles.Builder.class);
      }

      public static com.google.protobuf.Parser<Particles> PARSER =
          new com.google.protobuf.AbstractParser<Particles>() {
        public Particles parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Particles(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Particles> getParserForType() {
        return PARSER;
      }

      // repeated uint32 id = 1 [packed = true];
      public static final int ID_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Integer> id_;
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getIdList() {
        return id_;
      }
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      public int getIdCount() {
        return id_.size();
      }
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      public int getId(int index) {
        return id_.get(index);
      }
      private int idMemoizedSerializedSize = -1;

      // repeated sint32 pdg_id = 2 [packed = true];
      public static final int PDG_ID_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Integer> pdgId_;
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPdgIdList() {
        return pdgId_;
      }
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      public int getPdgIdCount() {
        return pdgId_.size();
      }
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      public int getPdgId(int index) {
        return pdgId_.get(index);
      }
      private int pdgIdMemoizedSerializedSize = -1;

      // repeated uint32 status = 3 [packed = true];
      public static final int STATUS_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Integer> status_;
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not) 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getStatusList() {
        return status_;
      }
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not) 
       * </pre>
       */
      public int getStatusCount() {
        return status_.size();
      }
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not) 
       * </pre>
       */
      public int getStatus(int index) {
        return status_.get(index);
      }
      private int statusMemoizedSerializedSize = -1;

      // repeated uint64 mass = 4 [packed = true];
      public static final int MASS_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Long> mass_;
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getMassList() {
        return mass_;
      }
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass 
       * </pre>
       */
      public int getMassCount() {
        return mass_.size();
      }
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass 
       * </pre>
       */
      public long getMass(int index) {
        return mass_.get(index);
      }
      private int massMemoizedSerializedSize = -1;

      // repeated sint64 Px = 5 [packed = true];
      public static final int PX_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Long> px_;
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPxList() {
        return px_;
      }
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      public int getPxCount() {
        return px_.size();
      }
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      public long getPx(int index) {
        return px_.get(index);
      }
      private int pxMemoizedSerializedSize = -1;

      // repeated sint64 Py = 6 [packed = true];
      public static final int PY_FIELD_NUMBER = 6;
      private java.util.List<java.lang.Long> py_;
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPyList() {
        return py_;
      }
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      public int getPyCount() {
        return py_.size();
      }
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      public long getPy(int index) {
        return py_.get(index);
      }
      private int pyMemoizedSerializedSize = -1;

      // repeated sint64 Pz = 7 [packed = true];
      public static final int PZ_FIELD_NUMBER = 7;
      private java.util.List<java.lang.Long> pz_;
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPzList() {
        return pz_;
      }
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      public int getPzCount() {
        return pz_.size();
      }
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      public long getPz(int index) {
        return pz_.get(index);
      }
      private int pzMemoizedSerializedSize = -1;

      // repeated uint32 mother1 = 8 [packed = true];
      public static final int MOTHER1_FIELD_NUMBER = 8;
      private java.util.List<java.lang.Integer> mother1_;
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMother1List() {
        return mother1_;
      }
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother 
       * </pre>
       */
      public int getMother1Count() {
        return mother1_.size();
      }
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother 
       * </pre>
       */
      public int getMother1(int index) {
        return mother1_.get(index);
      }
      private int mother1MemoizedSerializedSize = -1;

      // repeated uint32 mother2 = 9 [packed = true];
      public static final int MOTHER2_FIELD_NUMBER = 9;
      private java.util.List<java.lang.Integer> mother2_;
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother  
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMother2List() {
        return mother2_;
      }
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother  
       * </pre>
       */
      public int getMother2Count() {
        return mother2_.size();
      }
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother  
       * </pre>
       */
      public int getMother2(int index) {
        return mother2_.get(index);
      }
      private int mother2MemoizedSerializedSize = -1;

      // repeated uint32 daughter1 = 10 [packed = true];
      public static final int DAUGHTER1_FIELD_NUMBER = 10;
      private java.util.List<java.lang.Integer> daughter1_;
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDaughter1List() {
        return daughter1_;
      }
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter 
       * </pre>
       */
      public int getDaughter1Count() {
        return daughter1_.size();
      }
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter 
       * </pre>
       */
      public int getDaughter1(int index) {
        return daughter1_.get(index);
      }
      private int daughter1MemoizedSerializedSize = -1;

      // repeated uint32 daughter2 = 11 [packed = true];
      public static final int DAUGHTER2_FIELD_NUMBER = 11;
      private java.util.List<java.lang.Integer> daughter2_;
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDaughter2List() {
        return daughter2_;
      }
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter 
       * </pre>
       */
      public int getDaughter2Count() {
        return daughter2_.size();
      }
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter 
       * </pre>
       */
      public int getDaughter2(int index) {
        return daughter2_.get(index);
      }
      private int daughter2MemoizedSerializedSize = -1;

      // repeated sint32 barcode = 12 [packed = true];
      public static final int BARCODE_FIELD_NUMBER = 12;
      private java.util.List<java.lang.Integer> barcode_;
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBarcodeList() {
        return barcode_;
      }
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used 
       * </pre>
       */
      public int getBarcodeCount() {
        return barcode_.size();
      }
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used 
       * </pre>
       */
      public int getBarcode(int index) {
        return barcode_.get(index);
      }
      private int barcodeMemoizedSerializedSize = -1;

      // repeated sint32 X = 13 [packed = true];
      public static final int X_FIELD_NUMBER = 13;
      private java.util.List<java.lang.Integer> x_;
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXList() {
        return x_;
      }
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position 
       * </pre>
       */
      public int getXCount() {
        return x_.size();
      }
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position 
       * </pre>
       */
      public int getX(int index) {
        return x_.get(index);
      }
      private int xMemoizedSerializedSize = -1;

      // repeated sint32 Y = 14 [packed = true];
      public static final int Y_FIELD_NUMBER = 14;
      private java.util.List<java.lang.Integer> y_;
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position  
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getYList() {
        return y_;
      }
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position  
       * </pre>
       */
      public int getYCount() {
        return y_.size();
      }
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position  
       * </pre>
       */
      public int getY(int index) {
        return y_.get(index);
      }
      private int yMemoizedSerializedSize = -1;

      // repeated sint32 Z = 15 [packed = true];
      public static final int Z_FIELD_NUMBER = 15;
      private java.util.List<java.lang.Integer> z_;
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZList() {
        return z_;
      }
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position 
       * </pre>
       */
      public int getZCount() {
        return z_.size();
      }
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position 
       * </pre>
       */
      public int getZ(int index) {
        return z_.get(index);
      }
      private int zMemoizedSerializedSize = -1;

      // repeated uint32 T = 16 [packed = true];
      public static final int T_FIELD_NUMBER = 16;
      private java.util.List<java.lang.Integer> t_;
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTList() {
        return t_;
      }
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time 
       * </pre>
       */
      public int getTCount() {
        return t_.size();
      }
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time 
       * </pre>
       */
      public int getT(int index) {
        return t_.get(index);
      }
      private int tMemoizedSerializedSize = -1;

      // repeated uint64 weight = 17 [packed = true];
      public static final int WEIGHT_FIELD_NUMBER = 17;
      private java.util.List<java.lang.Long> weight_;
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getWeightList() {
        return weight_;
      }
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight 
       * </pre>
       */
      public int getWeightCount() {
        return weight_.size();
      }
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight 
       * </pre>
       */
      public long getWeight(int index) {
        return weight_.get(index);
      }
      private int weightMemoizedSerializedSize = -1;

      // repeated sint32 charge = 18 [packed = true];
      public static final int CHARGE_FIELD_NUMBER = 18;
      private java.util.List<java.lang.Integer> charge_;
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChargeList() {
        return charge_;
      }
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getChargeCount() {
        return charge_.size();
      }
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getCharge(int index) {
        return charge_.get(index);
      }
      private int chargeMemoizedSerializedSize = -1;

      // repeated sint64 energy = 19 [packed = true];
      public static final int ENERGY_FIELD_NUMBER = 19;
      private java.util.List<java.lang.Long> energy_;
      /**
       * <code>repeated sint64 energy = 19 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEnergyList() {
        return energy_;
      }
      /**
       * <code>repeated sint64 energy = 19 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      public int getEnergyCount() {
        return energy_.size();
      }
      /**
       * <code>repeated sint64 energy = 19 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      public long getEnergy(int index) {
        return energy_.get(index);
      }
      private int energyMemoizedSerializedSize = -1;

      private void initFields() {
        id_ = java.util.Collections.emptyList();
        pdgId_ = java.util.Collections.emptyList();
        status_ = java.util.Collections.emptyList();
        mass_ = java.util.Collections.emptyList();
        px_ = java.util.Collections.emptyList();
        py_ = java.util.Collections.emptyList();
        pz_ = java.util.Collections.emptyList();
        mother1_ = java.util.Collections.emptyList();
        mother2_ = java.util.Collections.emptyList();
        daughter1_ = java.util.Collections.emptyList();
        daughter2_ = java.util.Collections.emptyList();
        barcode_ = java.util.Collections.emptyList();
        x_ = java.util.Collections.emptyList();
        y_ = java.util.Collections.emptyList();
        z_ = java.util.Collections.emptyList();
        t_ = java.util.Collections.emptyList();
        weight_ = java.util.Collections.emptyList();
        charge_ = java.util.Collections.emptyList();
        energy_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getIdList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(idMemoizedSerializedSize);
        }
        for (int i = 0; i < id_.size(); i++) {
          output.writeUInt32NoTag(id_.get(i));
        }
        if (getPdgIdList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(pdgIdMemoizedSerializedSize);
        }
        for (int i = 0; i < pdgId_.size(); i++) {
          output.writeSInt32NoTag(pdgId_.get(i));
        }
        if (getStatusList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(statusMemoizedSerializedSize);
        }
        for (int i = 0; i < status_.size(); i++) {
          output.writeUInt32NoTag(status_.get(i));
        }
        if (getMassList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(massMemoizedSerializedSize);
        }
        for (int i = 0; i < mass_.size(); i++) {
          output.writeUInt64NoTag(mass_.get(i));
        }
        if (getPxList().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(pxMemoizedSerializedSize);
        }
        for (int i = 0; i < px_.size(); i++) {
          output.writeSInt64NoTag(px_.get(i));
        }
        if (getPyList().size() > 0) {
          output.writeRawVarint32(50);
          output.writeRawVarint32(pyMemoizedSerializedSize);
        }
        for (int i = 0; i < py_.size(); i++) {
          output.writeSInt64NoTag(py_.get(i));
        }
        if (getPzList().size() > 0) {
          output.writeRawVarint32(58);
          output.writeRawVarint32(pzMemoizedSerializedSize);
        }
        for (int i = 0; i < pz_.size(); i++) {
          output.writeSInt64NoTag(pz_.get(i));
        }
        if (getMother1List().size() > 0) {
          output.writeRawVarint32(66);
          output.writeRawVarint32(mother1MemoizedSerializedSize);
        }
        for (int i = 0; i < mother1_.size(); i++) {
          output.writeUInt32NoTag(mother1_.get(i));
        }
        if (getMother2List().size() > 0) {
          output.writeRawVarint32(74);
          output.writeRawVarint32(mother2MemoizedSerializedSize);
        }
        for (int i = 0; i < mother2_.size(); i++) {
          output.writeUInt32NoTag(mother2_.get(i));
        }
        if (getDaughter1List().size() > 0) {
          output.writeRawVarint32(82);
          output.writeRawVarint32(daughter1MemoizedSerializedSize);
        }
        for (int i = 0; i < daughter1_.size(); i++) {
          output.writeUInt32NoTag(daughter1_.get(i));
        }
        if (getDaughter2List().size() > 0) {
          output.writeRawVarint32(90);
          output.writeRawVarint32(daughter2MemoizedSerializedSize);
        }
        for (int i = 0; i < daughter2_.size(); i++) {
          output.writeUInt32NoTag(daughter2_.get(i));
        }
        if (getBarcodeList().size() > 0) {
          output.writeRawVarint32(98);
          output.writeRawVarint32(barcodeMemoizedSerializedSize);
        }
        for (int i = 0; i < barcode_.size(); i++) {
          output.writeSInt32NoTag(barcode_.get(i));
        }
        if (getXList().size() > 0) {
          output.writeRawVarint32(106);
          output.writeRawVarint32(xMemoizedSerializedSize);
        }
        for (int i = 0; i < x_.size(); i++) {
          output.writeSInt32NoTag(x_.get(i));
        }
        if (getYList().size() > 0) {
          output.writeRawVarint32(114);
          output.writeRawVarint32(yMemoizedSerializedSize);
        }
        for (int i = 0; i < y_.size(); i++) {
          output.writeSInt32NoTag(y_.get(i));
        }
        if (getZList().size() > 0) {
          output.writeRawVarint32(122);
          output.writeRawVarint32(zMemoizedSerializedSize);
        }
        for (int i = 0; i < z_.size(); i++) {
          output.writeSInt32NoTag(z_.get(i));
        }
        if (getTList().size() > 0) {
          output.writeRawVarint32(130);
          output.writeRawVarint32(tMemoizedSerializedSize);
        }
        for (int i = 0; i < t_.size(); i++) {
          output.writeUInt32NoTag(t_.get(i));
        }
        if (getWeightList().size() > 0) {
          output.writeRawVarint32(138);
          output.writeRawVarint32(weightMemoizedSerializedSize);
        }
        for (int i = 0; i < weight_.size(); i++) {
          output.writeUInt64NoTag(weight_.get(i));
        }
        if (getChargeList().size() > 0) {
          output.writeRawVarint32(146);
          output.writeRawVarint32(chargeMemoizedSerializedSize);
        }
        for (int i = 0; i < charge_.size(); i++) {
          output.writeSInt32NoTag(charge_.get(i));
        }
        if (getEnergyList().size() > 0) {
          output.writeRawVarint32(154);
          output.writeRawVarint32(energyMemoizedSerializedSize);
        }
        for (int i = 0; i < energy_.size(); i++) {
          output.writeSInt64NoTag(energy_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < id_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(id_.get(i));
          }
          size += dataSize;
          if (!getIdList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          idMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < pdgId_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(pdgId_.get(i));
          }
          size += dataSize;
          if (!getPdgIdList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pdgIdMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < status_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(status_.get(i));
          }
          size += dataSize;
          if (!getStatusList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          statusMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < mass_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(mass_.get(i));
          }
          size += dataSize;
          if (!getMassList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          massMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < px_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(px_.get(i));
          }
          size += dataSize;
          if (!getPxList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pxMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < py_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(py_.get(i));
          }
          size += dataSize;
          if (!getPyList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pyMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < pz_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(pz_.get(i));
          }
          size += dataSize;
          if (!getPzList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pzMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < mother1_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(mother1_.get(i));
          }
          size += dataSize;
          if (!getMother1List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          mother1MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < mother2_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(mother2_.get(i));
          }
          size += dataSize;
          if (!getMother2List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          mother2MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < daughter1_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(daughter1_.get(i));
          }
          size += dataSize;
          if (!getDaughter1List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          daughter1MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < daughter2_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(daughter2_.get(i));
          }
          size += dataSize;
          if (!getDaughter2List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          daughter2MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < barcode_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(barcode_.get(i));
          }
          size += dataSize;
          if (!getBarcodeList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          barcodeMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < x_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(x_.get(i));
          }
          size += dataSize;
          if (!getXList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          xMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < y_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(y_.get(i));
          }
          size += dataSize;
          if (!getYList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          yMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < z_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(z_.get(i));
          }
          size += dataSize;
          if (!getZList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          zMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < t_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(t_.get(i));
          }
          size += dataSize;
          if (!getTList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          tMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < weight_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(weight_.get(i));
          }
          size += dataSize;
          if (!getWeightList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          weightMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < charge_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(charge_.get(i));
          }
          size += dataSize;
          if (!getChargeList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          chargeMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < energy_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(energy_.get(i));
          }
          size += dataSize;
          if (!getEnergyList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          energyMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static promc.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static promc.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static promc.io.ProMC.ProMCEvent.Particles parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static promc.io.ProMC.ProMCEvent.Particles parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static promc.io.ProMC.ProMCEvent.Particles parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static promc.io.ProMC.ProMCEvent.Particles parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static promc.io.ProMC.ProMCEvent.Particles parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static promc.io.ProMC.ProMCEvent.Particles parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static promc.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static promc.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(promc.io.ProMC.ProMCEvent.Particles prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Particles}
       *
       * <pre>
       * Generator (truth) particles 
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements promc.io.ProMC.ProMCEvent.ParticlesOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return promc.io.ProMC.internal_static_promc_ProMCEvent_Particles_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return promc.io.ProMC.internal_static_promc_ProMCEvent_Particles_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  promc.io.ProMC.ProMCEvent.Particles.class, promc.io.ProMC.ProMCEvent.Particles.Builder.class);
        }

        // Construct using promc.io.ProMC.ProMCEvent.Particles.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          pdgId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          status_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          mass_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          px_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          py_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          pz_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          mother1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          mother2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          daughter1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          daughter2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          barcode_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          x_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          y_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          z_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
          t_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          weight_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          energy_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return promc.io.ProMC.internal_static_promc_ProMCEvent_Particles_descriptor;
        }

        public promc.io.ProMC.ProMCEvent.Particles getDefaultInstanceForType() {
          return promc.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
        }

        public promc.io.ProMC.ProMCEvent.Particles build() {
          promc.io.ProMC.ProMCEvent.Particles result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public promc.io.ProMC.ProMCEvent.Particles buildPartial() {
          promc.io.ProMC.ProMCEvent.Particles result = new promc.io.ProMC.ProMCEvent.Particles(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            id_ = java.util.Collections.unmodifiableList(id_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.id_ = id_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            pdgId_ = java.util.Collections.unmodifiableList(pdgId_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.pdgId_ = pdgId_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            status_ = java.util.Collections.unmodifiableList(status_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.status_ = status_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = java.util.Collections.unmodifiableList(mass_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.mass_ = mass_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            px_ = java.util.Collections.unmodifiableList(px_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.px_ = px_;
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            py_ = java.util.Collections.unmodifiableList(py_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.py_ = py_;
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            pz_ = java.util.Collections.unmodifiableList(pz_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.pz_ = pz_;
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            mother1_ = java.util.Collections.unmodifiableList(mother1_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.mother1_ = mother1_;
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            mother2_ = java.util.Collections.unmodifiableList(mother2_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.mother2_ = mother2_;
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            daughter1_ = java.util.Collections.unmodifiableList(daughter1_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.daughter1_ = daughter1_;
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            daughter2_ = java.util.Collections.unmodifiableList(daughter2_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.daughter2_ = daughter2_;
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            barcode_ = java.util.Collections.unmodifiableList(barcode_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.barcode_ = barcode_;
          if (((bitField0_ & 0x00001000) == 0x00001000)) {
            x_ = java.util.Collections.unmodifiableList(x_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.x_ = x_;
          if (((bitField0_ & 0x00002000) == 0x00002000)) {
            y_ = java.util.Collections.unmodifiableList(y_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.y_ = y_;
          if (((bitField0_ & 0x00004000) == 0x00004000)) {
            z_ = java.util.Collections.unmodifiableList(z_);
            bitField0_ = (bitField0_ & ~0x00004000);
          }
          result.z_ = z_;
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            t_ = java.util.Collections.unmodifiableList(t_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.t_ = t_;
          if (((bitField0_ & 0x00010000) == 0x00010000)) {
            weight_ = java.util.Collections.unmodifiableList(weight_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.weight_ = weight_;
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.charge_ = charge_;
          if (((bitField0_ & 0x00040000) == 0x00040000)) {
            energy_ = java.util.Collections.unmodifiableList(energy_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.energy_ = energy_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof promc.io.ProMC.ProMCEvent.Particles) {
            return mergeFrom((promc.io.ProMC.ProMCEvent.Particles)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(promc.io.ProMC.ProMCEvent.Particles other) {
          if (other == promc.io.ProMC.ProMCEvent.Particles.getDefaultInstance()) return this;
          if (!other.id_.isEmpty()) {
            if (id_.isEmpty()) {
              id_ = other.id_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureIdIsMutable();
              id_.addAll(other.id_);
            }
            onChanged();
          }
          if (!other.pdgId_.isEmpty()) {
            if (pdgId_.isEmpty()) {
              pdgId_ = other.pdgId_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePdgIdIsMutable();
              pdgId_.addAll(other.pdgId_);
            }
            onChanged();
          }
          if (!other.status_.isEmpty()) {
            if (status_.isEmpty()) {
              status_ = other.status_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureStatusIsMutable();
              status_.addAll(other.status_);
            }
            onChanged();
          }
          if (!other.mass_.isEmpty()) {
            if (mass_.isEmpty()) {
              mass_ = other.mass_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMassIsMutable();
              mass_.addAll(other.mass_);
            }
            onChanged();
          }
          if (!other.px_.isEmpty()) {
            if (px_.isEmpty()) {
              px_ = other.px_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensurePxIsMutable();
              px_.addAll(other.px_);
            }
            onChanged();
          }
          if (!other.py_.isEmpty()) {
            if (py_.isEmpty()) {
              py_ = other.py_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensurePyIsMutable();
              py_.addAll(other.py_);
            }
            onChanged();
          }
          if (!other.pz_.isEmpty()) {
            if (pz_.isEmpty()) {
              pz_ = other.pz_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensurePzIsMutable();
              pz_.addAll(other.pz_);
            }
            onChanged();
          }
          if (!other.mother1_.isEmpty()) {
            if (mother1_.isEmpty()) {
              mother1_ = other.mother1_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureMother1IsMutable();
              mother1_.addAll(other.mother1_);
            }
            onChanged();
          }
          if (!other.mother2_.isEmpty()) {
            if (mother2_.isEmpty()) {
              mother2_ = other.mother2_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureMother2IsMutable();
              mother2_.addAll(other.mother2_);
            }
            onChanged();
          }
          if (!other.daughter1_.isEmpty()) {
            if (daughter1_.isEmpty()) {
              daughter1_ = other.daughter1_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureDaughter1IsMutable();
              daughter1_.addAll(other.daughter1_);
            }
            onChanged();
          }
          if (!other.daughter2_.isEmpty()) {
            if (daughter2_.isEmpty()) {
              daughter2_ = other.daughter2_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureDaughter2IsMutable();
              daughter2_.addAll(other.daughter2_);
            }
            onChanged();
          }
          if (!other.barcode_.isEmpty()) {
            if (barcode_.isEmpty()) {
              barcode_ = other.barcode_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureBarcodeIsMutable();
              barcode_.addAll(other.barcode_);
            }
            onChanged();
          }
          if (!other.x_.isEmpty()) {
            if (x_.isEmpty()) {
              x_ = other.x_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensureXIsMutable();
              x_.addAll(other.x_);
            }
            onChanged();
          }
          if (!other.y_.isEmpty()) {
            if (y_.isEmpty()) {
              y_ = other.y_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureYIsMutable();
              y_.addAll(other.y_);
            }
            onChanged();
          }
          if (!other.z_.isEmpty()) {
            if (z_.isEmpty()) {
              z_ = other.z_;
              bitField0_ = (bitField0_ & ~0x00004000);
            } else {
              ensureZIsMutable();
              z_.addAll(other.z_);
            }
            onChanged();
          }
          if (!other.t_.isEmpty()) {
            if (t_.isEmpty()) {
              t_ = other.t_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureTIsMutable();
              t_.addAll(other.t_);
            }
            onChanged();
          }
          if (!other.weight_.isEmpty()) {
            if (weight_.isEmpty()) {
              weight_ = other.weight_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureWeightIsMutable();
              weight_.addAll(other.weight_);
            }
            onChanged();
          }
          if (!other.charge_.isEmpty()) {
            if (charge_.isEmpty()) {
              charge_ = other.charge_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensureChargeIsMutable();
              charge_.addAll(other.charge_);
            }
            onChanged();
          }
          if (!other.energy_.isEmpty()) {
            if (energy_.isEmpty()) {
              energy_ = other.energy_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensureEnergyIsMutable();
              energy_.addAll(other.energy_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          promc.io.ProMC.ProMCEvent.Particles parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (promc.io.ProMC.ProMCEvent.Particles) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint32 id = 1 [packed = true];
        private java.util.List<java.lang.Integer> id_ = java.util.Collections.emptyList();
        private void ensureIdIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            id_ = new java.util.ArrayList<java.lang.Integer>(id_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getIdList() {
          return java.util.Collections.unmodifiableList(id_);
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public int getIdCount() {
          return id_.size();
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public int getId(int index) {
          return id_.get(index);
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder setId(
            int index, int value) {
          ensureIdIsMutable();
          id_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder addId(int value) {
          ensureIdIsMutable();
          id_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder addAllId(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureIdIsMutable();
          super.addAll(values, id_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder clearId() {
          id_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint32 pdg_id = 2 [packed = true];
        private java.util.List<java.lang.Integer> pdgId_ = java.util.Collections.emptyList();
        private void ensurePdgIdIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            pdgId_ = new java.util.ArrayList<java.lang.Integer>(pdgId_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getPdgIdList() {
          return java.util.Collections.unmodifiableList(pdgId_);
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public int getPdgIdCount() {
          return pdgId_.size();
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public int getPdgId(int index) {
          return pdgId_.get(index);
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public Builder setPdgId(
            int index, int value) {
          ensurePdgIdIsMutable();
          pdgId_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public Builder addPdgId(int value) {
          ensurePdgIdIsMutable();
          pdgId_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public Builder addAllPdgId(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensurePdgIdIsMutable();
          super.addAll(values, pdgId_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public Builder clearPdgId() {
          pdgId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated uint32 status = 3 [packed = true];
        private java.util.List<java.lang.Integer> status_ = java.util.Collections.emptyList();
        private void ensureStatusIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            status_ = new java.util.ArrayList<java.lang.Integer>(status_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not) 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getStatusList() {
          return java.util.Collections.unmodifiableList(status_);
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not) 
         * </pre>
         */
        public int getStatusCount() {
          return status_.size();
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not) 
         * </pre>
         */
        public int getStatus(int index) {
          return status_.get(index);
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not) 
         * </pre>
         */
        public Builder setStatus(
            int index, int value) {
          ensureStatusIsMutable();
          status_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not) 
         * </pre>
         */
        public Builder addStatus(int value) {
          ensureStatusIsMutable();
          status_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not) 
         * </pre>
         */
        public Builder addAllStatus(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureStatusIsMutable();
          super.addAll(values, status_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not) 
         * </pre>
         */
        public Builder clearStatus() {
          status_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated uint64 mass = 4 [packed = true];
        private java.util.List<java.lang.Long> mass_ = java.util.Collections.emptyList();
        private void ensureMassIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = new java.util.ArrayList<java.lang.Long>(mass_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getMassList() {
          return java.util.Collections.unmodifiableList(mass_);
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass 
         * </pre>
         */
        public int getMassCount() {
          return mass_.size();
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass 
         * </pre>
         */
        public long getMass(int index) {
          return mass_.get(index);
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass 
         * </pre>
         */
        public Builder setMass(
            int index, long value) {
          ensureMassIsMutable();
          mass_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass 
         * </pre>
         */
        public Builder addMass(long value) {
          ensureMassIsMutable();
          mass_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass 
         * </pre>
         */
        public Builder addAllMass(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureMassIsMutable();
          super.addAll(values, mass_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass 
         * </pre>
         */
        public Builder clearMass() {
          mass_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // repeated sint64 Px = 5 [packed = true];
        private java.util.List<java.lang.Long> px_ = java.util.Collections.emptyList();
        private void ensurePxIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            px_ = new java.util.ArrayList<java.lang.Long>(px_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPxList() {
          return java.util.Collections.unmodifiableList(px_);
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public int getPxCount() {
          return px_.size();
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public long getPx(int index) {
          return px_.get(index);
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public Builder setPx(
            int index, long value) {
          ensurePxIsMutable();
          px_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public Builder addPx(long value) {
          ensurePxIsMutable();
          px_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public Builder addAllPx(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePxIsMutable();
          super.addAll(values, px_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public Builder clearPx() {
          px_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        // repeated sint64 Py = 6 [packed = true];
        private java.util.List<java.lang.Long> py_ = java.util.Collections.emptyList();
        private void ensurePyIsMutable() {
          if (!((bitField0_ & 0x00000020) == 0x00000020)) {
            py_ = new java.util.ArrayList<java.lang.Long>(py_);
            bitField0_ |= 0x00000020;
           }
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPyList() {
          return java.util.Collections.unmodifiableList(py_);
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public int getPyCount() {
          return py_.size();
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public long getPy(int index) {
          return py_.get(index);
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public Builder setPy(
            int index, long value) {
          ensurePyIsMutable();
          py_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public Builder addPy(long value) {
          ensurePyIsMutable();
          py_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public Builder addAllPy(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePyIsMutable();
          super.addAll(values, py_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public Builder clearPy() {
          py_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        // repeated sint64 Pz = 7 [packed = true];
        private java.util.List<java.lang.Long> pz_ = java.util.Collections.emptyList();
        private void ensurePzIsMutable() {
          if (!((bitField0_ & 0x00000040) == 0x00000040)) {
            pz_ = new java.util.ArrayList<java.lang.Long>(pz_);
            bitField0_ |= 0x00000040;
           }
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPzList() {
          return java.util.Collections.unmodifiableList(pz_);
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public int getPzCount() {
          return pz_.size();
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public long getPz(int index) {
          return pz_.get(index);
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder setPz(
            int index, long value) {
          ensurePzIsMutable();
          pz_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder addPz(long value) {
          ensurePzIsMutable();
          pz_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder addAllPz(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePzIsMutable();
          super.addAll(values, pz_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder clearPz() {
          pz_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }

        // repeated uint32 mother1 = 8 [packed = true];
        private java.util.List<java.lang.Integer> mother1_ = java.util.Collections.emptyList();
        private void ensureMother1IsMutable() {
          if (!((bitField0_ & 0x00000080) == 0x00000080)) {
            mother1_ = new java.util.ArrayList<java.lang.Integer>(mother1_);
            bitField0_ |= 0x00000080;
           }
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getMother1List() {
          return java.util.Collections.unmodifiableList(mother1_);
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother 
         * </pre>
         */
        public int getMother1Count() {
          return mother1_.size();
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother 
         * </pre>
         */
        public int getMother1(int index) {
          return mother1_.get(index);
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother 
         * </pre>
         */
        public Builder setMother1(
            int index, int value) {
          ensureMother1IsMutable();
          mother1_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother 
         * </pre>
         */
        public Builder addMother1(int value) {
          ensureMother1IsMutable();
          mother1_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother 
         * </pre>
         */
        public Builder addAllMother1(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureMother1IsMutable();
          super.addAll(values, mother1_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother 
         * </pre>
         */
        public Builder clearMother1() {
          mother1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
          return this;
        }

        // repeated uint32 mother2 = 9 [packed = true];
        private java.util.List<java.lang.Integer> mother2_ = java.util.Collections.emptyList();
        private void ensureMother2IsMutable() {
          if (!((bitField0_ & 0x00000100) == 0x00000100)) {
            mother2_ = new java.util.ArrayList<java.lang.Integer>(mother2_);
            bitField0_ |= 0x00000100;
           }
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother  
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getMother2List() {
          return java.util.Collections.unmodifiableList(mother2_);
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother  
         * </pre>
         */
        public int getMother2Count() {
          return mother2_.size();
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother  
         * </pre>
         */
        public int getMother2(int index) {
          return mother2_.get(index);
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother  
         * </pre>
         */
        public Builder setMother2(
            int index, int value) {
          ensureMother2IsMutable();
          mother2_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother  
         * </pre>
         */
        public Builder addMother2(int value) {
          ensureMother2IsMutable();
          mother2_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother  
         * </pre>
         */
        public Builder addAllMother2(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureMother2IsMutable();
          super.addAll(values, mother2_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother  
         * </pre>
         */
        public Builder clearMother2() {
          mother2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }

        // repeated uint32 daughter1 = 10 [packed = true];
        private java.util.List<java.lang.Integer> daughter1_ = java.util.Collections.emptyList();
        private void ensureDaughter1IsMutable() {
          if (!((bitField0_ & 0x00000200) == 0x00000200)) {
            daughter1_ = new java.util.ArrayList<java.lang.Integer>(daughter1_);
            bitField0_ |= 0x00000200;
           }
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getDaughter1List() {
          return java.util.Collections.unmodifiableList(daughter1_);
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter 
         * </pre>
         */
        public int getDaughter1Count() {
          return daughter1_.size();
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter 
         * </pre>
         */
        public int getDaughter1(int index) {
          return daughter1_.get(index);
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter 
         * </pre>
         */
        public Builder setDaughter1(
            int index, int value) {
          ensureDaughter1IsMutable();
          daughter1_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter 
         * </pre>
         */
        public Builder addDaughter1(int value) {
          ensureDaughter1IsMutable();
          daughter1_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter 
         * </pre>
         */
        public Builder addAllDaughter1(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureDaughter1IsMutable();
          super.addAll(values, daughter1_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter 
         * </pre>
         */
        public Builder clearDaughter1() {
          daughter1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
          return this;
        }

        // repeated uint32 daughter2 = 11 [packed = true];
        private java.util.List<java.lang.Integer> daughter2_ = java.util.Collections.emptyList();
        private void ensureDaughter2IsMutable() {
          if (!((bitField0_ & 0x00000400) == 0x00000400)) {
            daughter2_ = new java.util.ArrayList<java.lang.Integer>(daughter2_);
            bitField0_ |= 0x00000400;
           }
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getDaughter2List() {
          return java.util.Collections.unmodifiableList(daughter2_);
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter 
         * </pre>
         */
        public int getDaughter2Count() {
          return daughter2_.size();
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter 
         * </pre>
         */
        public int getDaughter2(int index) {
          return daughter2_.get(index);
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter 
         * </pre>
         */
        public Builder setDaughter2(
            int index, int value) {
          ensureDaughter2IsMutable();
          daughter2_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter 
         * </pre>
         */
        public Builder addDaughter2(int value) {
          ensureDaughter2IsMutable();
          daughter2_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter 
         * </pre>
         */
        public Builder addAllDaughter2(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureDaughter2IsMutable();
          super.addAll(values, daughter2_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter 
         * </pre>
         */
        public Builder clearDaughter2() {
          daughter2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
          return this;
        }

        // repeated sint32 barcode = 12 [packed = true];
        private java.util.List<java.lang.Integer> barcode_ = java.util.Collections.emptyList();
        private void ensureBarcodeIsMutable() {
          if (!((bitField0_ & 0x00000800) == 0x00000800)) {
            barcode_ = new java.util.ArrayList<java.lang.Integer>(barcode_);
            bitField0_ |= 0x00000800;
           }
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getBarcodeList() {
          return java.util.Collections.unmodifiableList(barcode_);
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used 
         * </pre>
         */
        public int getBarcodeCount() {
          return barcode_.size();
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used 
         * </pre>
         */
        public int getBarcode(int index) {
          return barcode_.get(index);
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used 
         * </pre>
         */
        public Builder setBarcode(
            int index, int value) {
          ensureBarcodeIsMutable();
          barcode_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used 
         * </pre>
         */
        public Builder addBarcode(int value) {
          ensureBarcodeIsMutable();
          barcode_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used 
         * </pre>
         */
        public Builder addAllBarcode(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureBarcodeIsMutable();
          super.addAll(values, barcode_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used 
         * </pre>
         */
        public Builder clearBarcode() {
          barcode_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
          return this;
        }

        // repeated sint32 X = 13 [packed = true];
        private java.util.List<java.lang.Integer> x_ = java.util.Collections.emptyList();
        private void ensureXIsMutable() {
          if (!((bitField0_ & 0x00001000) == 0x00001000)) {
            x_ = new java.util.ArrayList<java.lang.Integer>(x_);
            bitField0_ |= 0x00001000;
           }
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getXList() {
          return java.util.Collections.unmodifiableList(x_);
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position 
         * </pre>
         */
        public int getXCount() {
          return x_.size();
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position 
         * </pre>
         */
        public int getX(int index) {
          return x_.get(index);
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position 
         * </pre>
         */
        public Builder setX(
            int index, int value) {
          ensureXIsMutable();
          x_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position 
         * </pre>
         */
        public Builder addX(int value) {
          ensureXIsMutable();
          x_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position 
         * </pre>
         */
        public Builder addAllX(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureXIsMutable();
          super.addAll(values, x_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position 
         * </pre>
         */
        public Builder clearX() {
          x_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
          return this;
        }

        // repeated sint32 Y = 14 [packed = true];
        private java.util.List<java.lang.Integer> y_ = java.util.Collections.emptyList();
        private void ensureYIsMutable() {
          if (!((bitField0_ & 0x00002000) == 0x00002000)) {
            y_ = new java.util.ArrayList<java.lang.Integer>(y_);
            bitField0_ |= 0x00002000;
           }
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position  
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getYList() {
          return java.util.Collections.unmodifiableList(y_);
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position  
         * </pre>
         */
        public int getYCount() {
          return y_.size();
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position  
         * </pre>
         */
        public int getY(int index) {
          return y_.get(index);
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position  
         * </pre>
         */
        public Builder setY(
            int index, int value) {
          ensureYIsMutable();
          y_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position  
         * </pre>
         */
        public Builder addY(int value) {
          ensureYIsMutable();
          y_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position  
         * </pre>
         */
        public Builder addAllY(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureYIsMutable();
          super.addAll(values, y_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position  
         * </pre>
         */
        public Builder clearY() {
          y_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
          return this;
        }

        // repeated sint32 Z = 15 [packed = true];
        private java.util.List<java.lang.Integer> z_ = java.util.Collections.emptyList();
        private void ensureZIsMutable() {
          if (!((bitField0_ & 0x00004000) == 0x00004000)) {
            z_ = new java.util.ArrayList<java.lang.Integer>(z_);
            bitField0_ |= 0x00004000;
           }
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getZList() {
          return java.util.Collections.unmodifiableList(z_);
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position 
         * </pre>
         */
        public int getZCount() {
          return z_.size();
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position 
         * </pre>
         */
        public int getZ(int index) {
          return z_.get(index);
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position 
         * </pre>
         */
        public Builder setZ(
            int index, int value) {
          ensureZIsMutable();
          z_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position 
         * </pre>
         */
        public Builder addZ(int value) {
          ensureZIsMutable();
          z_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position 
         * </pre>
         */
        public Builder addAllZ(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureZIsMutable();
          super.addAll(values, z_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position 
         * </pre>
         */
        public Builder clearZ() {
          z_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
          onChanged();
          return this;
        }

        // repeated uint32 T = 16 [packed = true];
        private java.util.List<java.lang.Integer> t_ = java.util.Collections.emptyList();
        private void ensureTIsMutable() {
          if (!((bitField0_ & 0x00008000) == 0x00008000)) {
            t_ = new java.util.ArrayList<java.lang.Integer>(t_);
            bitField0_ |= 0x00008000;
           }
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getTList() {
          return java.util.Collections.unmodifiableList(t_);
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time 
         * </pre>
         */
        public int getTCount() {
          return t_.size();
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time 
         * </pre>
         */
        public int getT(int index) {
          return t_.get(index);
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time 
         * </pre>
         */
        public Builder setT(
            int index, int value) {
          ensureTIsMutable();
          t_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time 
         * </pre>
         */
        public Builder addT(int value) {
          ensureTIsMutable();
          t_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time 
         * </pre>
         */
        public Builder addAllT(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureTIsMutable();
          super.addAll(values, t_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time 
         * </pre>
         */
        public Builder clearT() {
          t_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
          return this;
        }

        // repeated uint64 weight = 17 [packed = true];
        private java.util.List<java.lang.Long> weight_ = java.util.Collections.emptyList();
        private void ensureWeightIsMutable() {
          if (!((bitField0_ & 0x00010000) == 0x00010000)) {
            weight_ = new java.util.ArrayList<java.lang.Long>(weight_);
            bitField0_ |= 0x00010000;
           }
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getWeightList() {
          return java.util.Collections.unmodifiableList(weight_);
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight 
         * </pre>
         */
        public int getWeightCount() {
          return weight_.size();
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight 
         * </pre>
         */
        public long getWeight(int index) {
          return weight_.get(index);
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight 
         * </pre>
         */
        public Builder setWeight(
            int index, long value) {
          ensureWeightIsMutable();
          weight_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight 
         * </pre>
         */
        public Builder addWeight(long value) {
          ensureWeightIsMutable();
          weight_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight 
         * </pre>
         */
        public Builder addAllWeight(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureWeightIsMutable();
          super.addAll(values, weight_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight 
         * </pre>
         */
        public Builder clearWeight() {
          weight_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
          return this;
        }

        // repeated sint32 charge = 18 [packed = true];
        private java.util.List<java.lang.Integer> charge_ = java.util.Collections.emptyList();
        private void ensureChargeIsMutable() {
          if (!((bitField0_ & 0x00020000) == 0x00020000)) {
            charge_ = new java.util.ArrayList<java.lang.Integer>(charge_);
            bitField0_ |= 0x00020000;
           }
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getChargeList() {
          return java.util.Collections.unmodifiableList(charge_);
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getChargeCount() {
          return charge_.size();
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getCharge(int index) {
          return charge_.get(index);
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder setCharge(
            int index, int value) {
          ensureChargeIsMutable();
          charge_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addCharge(int value) {
          ensureChargeIsMutable();
          charge_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addAllCharge(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureChargeIsMutable();
          super.addAll(values, charge_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder clearCharge() {
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
          return this;
        }

        // repeated sint64 energy = 19 [packed = true];
        private java.util.List<java.lang.Long> energy_ = java.util.Collections.emptyList();
        private void ensureEnergyIsMutable() {
          if (!((bitField0_ & 0x00040000) == 0x00040000)) {
            energy_ = new java.util.ArrayList<java.lang.Long>(energy_);
            bitField0_ |= 0x00040000;
           }
        }
        /**
         * <code>repeated sint64 energy = 19 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEnergyList() {
          return java.util.Collections.unmodifiableList(energy_);
        }
        /**
         * <code>repeated sint64 energy = 19 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public int getEnergyCount() {
          return energy_.size();
        }
        /**
         * <code>repeated sint64 energy = 19 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public long getEnergy(int index) {
          return energy_.get(index);
        }
        /**
         * <code>repeated sint64 energy = 19 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public Builder setEnergy(
            int index, long value) {
          ensureEnergyIsMutable();
          energy_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 energy = 19 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public Builder addEnergy(long value) {
          ensureEnergyIsMutable();
          energy_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 energy = 19 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public Builder addAllEnergy(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEnergyIsMutable();
          super.addAll(values, energy_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 energy = 19 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public Builder clearEnergy() {
          energy_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Particles)
      }

      static {
        defaultInstance = new Particles(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Particles)
    }

    private int bitField0_;
    // optional .promc.ProMCEvent.Event event = 1;
    public static final int EVENT_FIELD_NUMBER = 1;
    private promc.io.ProMC.ProMCEvent.Event event_;
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    public boolean hasEvent() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    public promc.io.ProMC.ProMCEvent.Event getEvent() {
      return event_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    public promc.io.ProMC.ProMCEvent.EventOrBuilder getEventOrBuilder() {
      return event_;
    }

    // optional .promc.ProMCEvent.Particles particles = 2;
    public static final int PARTICLES_FIELD_NUMBER = 2;
    private promc.io.ProMC.ProMCEvent.Particles particles_;
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    public boolean hasParticles() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    public promc.io.ProMC.ProMCEvent.Particles getParticles() {
      return particles_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    public promc.io.ProMC.ProMCEvent.ParticlesOrBuilder getParticlesOrBuilder() {
      return particles_;
    }

    private void initFields() {
      event_ = promc.io.ProMC.ProMCEvent.Event.getDefaultInstance();
      particles_ = promc.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, event_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, particles_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, event_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, particles_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static promc.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static promc.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static promc.io.ProMC.ProMCEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static promc.io.ProMC.ProMCEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static promc.io.ProMC.ProMCEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static promc.io.ProMC.ProMCEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static promc.io.ProMC.ProMCEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static promc.io.ProMC.ProMCEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static promc.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static promc.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(promc.io.ProMC.ProMCEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code promc.ProMCEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements promc.io.ProMC.ProMCEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return promc.io.ProMC.internal_static_promc_ProMCEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return promc.io.ProMC.internal_static_promc_ProMCEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                promc.io.ProMC.ProMCEvent.class, promc.io.ProMC.ProMCEvent.Builder.class);
      }

      // Construct using promc.io.ProMC.ProMCEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getEventFieldBuilder();
          getParticlesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (eventBuilder_ == null) {
          event_ = promc.io.ProMC.ProMCEvent.Event.getDefaultInstance();
        } else {
          eventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (particlesBuilder_ == null) {
          particles_ = promc.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
        } else {
          particlesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return promc.io.ProMC.internal_static_promc_ProMCEvent_descriptor;
      }

      public promc.io.ProMC.ProMCEvent getDefaultInstanceForType() {
        return promc.io.ProMC.ProMCEvent.getDefaultInstance();
      }

      public promc.io.ProMC.ProMCEvent build() {
        promc.io.ProMC.ProMCEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public promc.io.ProMC.ProMCEvent buildPartial() {
        promc.io.ProMC.ProMCEvent result = new promc.io.ProMC.ProMCEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (particlesBuilder_ == null) {
          result.particles_ = particles_;
        } else {
          result.particles_ = particlesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof promc.io.ProMC.ProMCEvent) {
          return mergeFrom((promc.io.ProMC.ProMCEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(promc.io.ProMC.ProMCEvent other) {
        if (other == promc.io.ProMC.ProMCEvent.getDefaultInstance()) return this;
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        if (other.hasParticles()) {
          mergeParticles(other.getParticles());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        promc.io.ProMC.ProMCEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (promc.io.ProMC.ProMCEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .promc.ProMCEvent.Event event = 1;
      private promc.io.ProMC.ProMCEvent.Event event_ = promc.io.ProMC.ProMCEvent.Event.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          promc.io.ProMC.ProMCEvent.Event, promc.io.ProMC.ProMCEvent.Event.Builder, promc.io.ProMC.ProMCEvent.EventOrBuilder> eventBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public boolean hasEvent() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public promc.io.ProMC.ProMCEvent.Event getEvent() {
        if (eventBuilder_ == null) {
          return event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public Builder setEvent(promc.io.ProMC.ProMCEvent.Event value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public Builder setEvent(
          promc.io.ProMC.ProMCEvent.Event.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public Builder mergeEvent(promc.io.ProMC.ProMCEvent.Event value) {
        if (eventBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              event_ != promc.io.ProMC.ProMCEvent.Event.getDefaultInstance()) {
            event_ =
              promc.io.ProMC.ProMCEvent.Event.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = promc.io.ProMC.ProMCEvent.Event.getDefaultInstance();
          onChanged();
        } else {
          eventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public promc.io.ProMC.ProMCEvent.Event.Builder getEventBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public promc.io.ProMC.ProMCEvent.EventOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          promc.io.ProMC.ProMCEvent.Event, promc.io.ProMC.ProMCEvent.Event.Builder, promc.io.ProMC.ProMCEvent.EventOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              promc.io.ProMC.ProMCEvent.Event, promc.io.ProMC.ProMCEvent.Event.Builder, promc.io.ProMC.ProMCEvent.EventOrBuilder>(
                  event_,
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      // optional .promc.ProMCEvent.Particles particles = 2;
      private promc.io.ProMC.ProMCEvent.Particles particles_ = promc.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          promc.io.ProMC.ProMCEvent.Particles, promc.io.ProMC.ProMCEvent.Particles.Builder, promc.io.ProMC.ProMCEvent.ParticlesOrBuilder> particlesBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public boolean hasParticles() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public promc.io.ProMC.ProMCEvent.Particles getParticles() {
        if (particlesBuilder_ == null) {
          return particles_;
        } else {
          return particlesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public Builder setParticles(promc.io.ProMC.ProMCEvent.Particles value) {
        if (particlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          particles_ = value;
          onChanged();
        } else {
          particlesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public Builder setParticles(
          promc.io.ProMC.ProMCEvent.Particles.Builder builderForValue) {
        if (particlesBuilder_ == null) {
          particles_ = builderForValue.build();
          onChanged();
        } else {
          particlesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public Builder mergeParticles(promc.io.ProMC.ProMCEvent.Particles value) {
        if (particlesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              particles_ != promc.io.ProMC.ProMCEvent.Particles.getDefaultInstance()) {
            particles_ =
              promc.io.ProMC.ProMCEvent.Particles.newBuilder(particles_).mergeFrom(value).buildPartial();
          } else {
            particles_ = value;
          }
          onChanged();
        } else {
          particlesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public Builder clearParticles() {
        if (particlesBuilder_ == null) {
          particles_ = promc.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
          onChanged();
        } else {
          particlesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public promc.io.ProMC.ProMCEvent.Particles.Builder getParticlesBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getParticlesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public promc.io.ProMC.ProMCEvent.ParticlesOrBuilder getParticlesOrBuilder() {
        if (particlesBuilder_ != null) {
          return particlesBuilder_.getMessageOrBuilder();
        } else {
          return particles_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          promc.io.ProMC.ProMCEvent.Particles, promc.io.ProMC.ProMCEvent.Particles.Builder, promc.io.ProMC.ProMCEvent.ParticlesOrBuilder> 
          getParticlesFieldBuilder() {
        if (particlesBuilder_ == null) {
          particlesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              promc.io.ProMC.ProMCEvent.Particles, promc.io.ProMC.ProMCEvent.Particles.Builder, promc.io.ProMC.ProMCEvent.ParticlesOrBuilder>(
                  particles_,
                  getParentForChildren(),
                  isClean());
          particles_ = null;
        }
        return particlesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:promc.ProMCEvent)
    }

    static {
      defaultInstance = new ProMCEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:promc.ProMCEvent)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Event_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Event_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Particles_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Particles_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013ProMC.proto\022\005promc\"\262\005\n\nProMCEvent\022&\n\005e" +
      "vent\030\001 \001(\0132\027.promc.ProMCEvent.Event\022.\n\tp" +
      "articles\030\002 \001(\0132\033.promc.ProMCEvent.Partic" +
      "les\032\336\001\n\005Event\022\016\n\006Number\030\001 \001(\005\022\022\n\nProcess" +
      "_ID\030\002 \001(\005\022\013\n\003MPI\030\003 \001(\005\022\013\n\003ID1\030\004 \001(\005\022\013\n\003I" +
      "D2\030\005 \001(\005\022\014\n\004PDF1\030\006 \001(\002\022\014\n\004PDF2\030\007 \001(\002\022\n\n\002" +
      "X1\030\010 \001(\002\022\n\n\002X2\030\t \001(\002\022\021\n\tScale_PDF\030\n \001(\002\022" +
      "\021\n\tAlpha_QED\030\013 \001(\002\022\r\n\005Scale\030\014 \001(\002\022\021\n\tAlp" +
      "ha_QCD\030\r \001(\002\022\016\n\006Weight\030\016 \001(\001\032\352\002\n\tParticl" +
      "es\022\016\n\002id\030\001 \003(\rB\002\020\001\022\022\n\006pdg_id\030\002 \003(\021B\002\020\001\022\022",
      "\n\006status\030\003 \003(\rB\002\020\001\022\020\n\004mass\030\004 \003(\004B\002\020\001\022\016\n\002" +
      "Px\030\005 \003(\022B\002\020\001\022\016\n\002Py\030\006 \003(\022B\002\020\001\022\016\n\002Pz\030\007 \003(\022" +
      "B\002\020\001\022\023\n\007mother1\030\010 \003(\rB\002\020\001\022\023\n\007mother2\030\t \003" +
      "(\rB\002\020\001\022\025\n\tdaughter1\030\n \003(\rB\002\020\001\022\025\n\tdaughte" +
      "r2\030\013 \003(\rB\002\020\001\022\023\n\007barcode\030\014 \003(\021B\002\020\001\022\r\n\001X\030\r" +
      " \003(\021B\002\020\001\022\r\n\001Y\030\016 \003(\021B\002\020\001\022\r\n\001Z\030\017 \003(\021B\002\020\001\022\r" +
      "\n\001T\030\020 \003(\rB\002\020\001\022\022\n\006weight\030\021 \003(\004B\002\020\001\022\022\n\006cha" +
      "rge\030\022 \003(\021B\002\020\001\022\022\n\006energy\030\023 \003(\022B\002\020\001B\021\n\010pro" +
      "mc.ioB\005ProMC"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_promc_ProMCEvent_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_promc_ProMCEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_descriptor,
              new java.lang.String[] { "Event", "Particles", });
          internal_static_promc_ProMCEvent_Event_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(0);
          internal_static_promc_ProMCEvent_Event_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Event_descriptor,
              new java.lang.String[] { "Number", "ProcessID", "MPI", "ID1", "ID2", "PDF1", "PDF2", "X1", "X2", "ScalePDF", "AlphaQED", "Scale", "AlphaQCD", "Weight", });
          internal_static_promc_ProMCEvent_Particles_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(1);
          internal_static_promc_ProMCEvent_Particles_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Particles_descriptor,
              new java.lang.String[] { "Id", "PdgId", "Status", "Mass", "Px", "Py", "Pz", "Mother1", "Mother2", "Daughter1", "Daughter2", "Barcode", "X", "Y", "Z", "T", "Weight", "Charge", "Energy", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
