// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProMC.proto

package pronlo.io;

public final class ProMC {
  private ProMC() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ProMCEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .promc.ProMCEvent.Event event = 1;
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    boolean hasEvent();
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    pronlo.io.ProMC.ProMCEvent.Event getEvent();
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    pronlo.io.ProMC.ProMCEvent.EventOrBuilder getEventOrBuilder();

    // optional .promc.ProMCEvent.Particles particles = 2;
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    boolean hasParticles();
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    pronlo.io.ProMC.ProMCEvent.Particles getParticles();
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    pronlo.io.ProMC.ProMCEvent.ParticlesOrBuilder getParticlesOrBuilder();
  }
  /**
   * Protobuf type {@code promc.ProMCEvent}
   */
  public static final class ProMCEvent extends
      com.google.protobuf.GeneratedMessage
      implements ProMCEventOrBuilder {
    // Use ProMCEvent.newBuilder() to construct.
    private ProMCEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ProMCEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ProMCEvent defaultInstance;
    public static ProMCEvent getDefaultInstance() {
      return defaultInstance;
    }

    public ProMCEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ProMCEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              pronlo.io.ProMC.ProMCEvent.Event.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(pronlo.io.ProMC.ProMCEvent.Event.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              pronlo.io.ProMC.ProMCEvent.Particles.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = particles_.toBuilder();
              }
              particles_ = input.readMessage(pronlo.io.ProMC.ProMCEvent.Particles.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(particles_);
                particles_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pronlo.io.ProMC.internal_static_promc_ProMCEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pronlo.io.ProMC.internal_static_promc_ProMCEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pronlo.io.ProMC.ProMCEvent.class, pronlo.io.ProMC.ProMCEvent.Builder.class);
    }

    public static com.google.protobuf.Parser<ProMCEvent> PARSER =
        new com.google.protobuf.AbstractParser<ProMCEvent>() {
      public ProMCEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProMCEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ProMCEvent> getParserForType() {
      return PARSER;
    }

    public interface EventOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 Number = 1;
      /**
       * <code>optional int32 Number = 1;</code>
       *
       * <pre>
       * Number
       * </pre>
       */
      boolean hasNumber();
      /**
       * <code>optional int32 Number = 1;</code>
       *
       * <pre>
       * Number
       * </pre>
       */
      int getNumber();

      // optional int32 Process_ID = 2;
      /**
       * <code>optional int32 Process_ID = 2;</code>
       *
       * <pre>
       * ID unique signal process id
       * </pre>
       */
      boolean hasProcessID();
      /**
       * <code>optional int32 Process_ID = 2;</code>
       *
       * <pre>
       * ID unique signal process id
       * </pre>
       */
      int getProcessID();

      // repeated float fdata = 3;
      /**
       * <code>repeated float fdata = 3;</code>
       *
       * <pre>
       * event info as you want (array, float) 
       * </pre>
       */
      java.util.List<java.lang.Float> getFdataList();
      /**
       * <code>repeated float fdata = 3;</code>
       *
       * <pre>
       * event info as you want (array, float) 
       * </pre>
       */
      int getFdataCount();
      /**
       * <code>repeated float fdata = 3;</code>
       *
       * <pre>
       * event info as you want (array, float) 
       * </pre>
       */
      float getFdata(int index);

      // repeated sint64 idata = 4;
      /**
       * <code>repeated sint64 idata = 4;</code>
       *
       * <pre>
       * event info as you want (array, varint)
       * </pre>
       */
      java.util.List<java.lang.Long> getIdataList();
      /**
       * <code>repeated sint64 idata = 4;</code>
       *
       * <pre>
       * event info as you want (array, varint)
       * </pre>
       */
      int getIdataCount();
      /**
       * <code>repeated sint64 idata = 4;</code>
       *
       * <pre>
       * event info as you want (array, varint)
       * </pre>
       */
      long getIdata(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Event}
     *
     * <pre>
     * Event information
     * </pre>
     */
    public static final class Event extends
        com.google.protobuf.GeneratedMessage
        implements EventOrBuilder {
      // Use Event.newBuilder() to construct.
      private Event(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Event(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Event defaultInstance;
      public static Event getDefaultInstance() {
        return defaultInstance;
      }

      public Event getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Event(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                number_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                processID_ = input.readInt32();
                break;
              }
              case 29: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  fdata_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000004;
                }
                fdata_.add(input.readFloat());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  fdata_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  fdata_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  idata_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                idata_.add(input.readSInt64());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  idata_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  idata_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            fdata_ = java.util.Collections.unmodifiableList(fdata_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            idata_ = java.util.Collections.unmodifiableList(idata_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pronlo.io.ProMC.internal_static_promc_ProMCEvent_Event_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pronlo.io.ProMC.internal_static_promc_ProMCEvent_Event_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pronlo.io.ProMC.ProMCEvent.Event.class, pronlo.io.ProMC.ProMCEvent.Event.Builder.class);
      }

      public static com.google.protobuf.Parser<Event> PARSER =
          new com.google.protobuf.AbstractParser<Event>() {
        public Event parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Event(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Event> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 Number = 1;
      public static final int NUMBER_FIELD_NUMBER = 1;
      private int number_;
      /**
       * <code>optional int32 Number = 1;</code>
       *
       * <pre>
       * Number
       * </pre>
       */
      public boolean hasNumber() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 Number = 1;</code>
       *
       * <pre>
       * Number
       * </pre>
       */
      public int getNumber() {
        return number_;
      }

      // optional int32 Process_ID = 2;
      public static final int PROCESS_ID_FIELD_NUMBER = 2;
      private int processID_;
      /**
       * <code>optional int32 Process_ID = 2;</code>
       *
       * <pre>
       * ID unique signal process id
       * </pre>
       */
      public boolean hasProcessID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 Process_ID = 2;</code>
       *
       * <pre>
       * ID unique signal process id
       * </pre>
       */
      public int getProcessID() {
        return processID_;
      }

      // repeated float fdata = 3;
      public static final int FDATA_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Float> fdata_;
      /**
       * <code>repeated float fdata = 3;</code>
       *
       * <pre>
       * event info as you want (array, float) 
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getFdataList() {
        return fdata_;
      }
      /**
       * <code>repeated float fdata = 3;</code>
       *
       * <pre>
       * event info as you want (array, float) 
       * </pre>
       */
      public int getFdataCount() {
        return fdata_.size();
      }
      /**
       * <code>repeated float fdata = 3;</code>
       *
       * <pre>
       * event info as you want (array, float) 
       * </pre>
       */
      public float getFdata(int index) {
        return fdata_.get(index);
      }

      // repeated sint64 idata = 4;
      public static final int IDATA_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Long> idata_;
      /**
       * <code>repeated sint64 idata = 4;</code>
       *
       * <pre>
       * event info as you want (array, varint)
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getIdataList() {
        return idata_;
      }
      /**
       * <code>repeated sint64 idata = 4;</code>
       *
       * <pre>
       * event info as you want (array, varint)
       * </pre>
       */
      public int getIdataCount() {
        return idata_.size();
      }
      /**
       * <code>repeated sint64 idata = 4;</code>
       *
       * <pre>
       * event info as you want (array, varint)
       * </pre>
       */
      public long getIdata(int index) {
        return idata_.get(index);
      }

      private void initFields() {
        number_ = 0;
        processID_ = 0;
        fdata_ = java.util.Collections.emptyList();
        idata_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, number_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, processID_);
        }
        for (int i = 0; i < fdata_.size(); i++) {
          output.writeFloat(3, fdata_.get(i));
        }
        for (int i = 0; i < idata_.size(); i++) {
          output.writeSInt64(4, idata_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, number_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, processID_);
        }
        {
          int dataSize = 0;
          dataSize = 4 * getFdataList().size();
          size += dataSize;
          size += 1 * getFdataList().size();
        }
        {
          int dataSize = 0;
          for (int i = 0; i < idata_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(idata_.get(i));
          }
          size += dataSize;
          size += 1 * getIdataList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static pronlo.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pronlo.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pronlo.io.ProMC.ProMCEvent.Event parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pronlo.io.ProMC.ProMCEvent.Event parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pronlo.io.ProMC.ProMCEvent.Event parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pronlo.io.ProMC.ProMCEvent.Event parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pronlo.io.ProMC.ProMCEvent.Event parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pronlo.io.ProMC.ProMCEvent.Event parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pronlo.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pronlo.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(pronlo.io.ProMC.ProMCEvent.Event prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Event}
       *
       * <pre>
       * Event information
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements pronlo.io.ProMC.ProMCEvent.EventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pronlo.io.ProMC.internal_static_promc_ProMCEvent_Event_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pronlo.io.ProMC.internal_static_promc_ProMCEvent_Event_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pronlo.io.ProMC.ProMCEvent.Event.class, pronlo.io.ProMC.ProMCEvent.Event.Builder.class);
        }

        // Construct using pronlo.io.ProMC.ProMCEvent.Event.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          number_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          processID_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          fdata_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          idata_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pronlo.io.ProMC.internal_static_promc_ProMCEvent_Event_descriptor;
        }

        public pronlo.io.ProMC.ProMCEvent.Event getDefaultInstanceForType() {
          return pronlo.io.ProMC.ProMCEvent.Event.getDefaultInstance();
        }

        public pronlo.io.ProMC.ProMCEvent.Event build() {
          pronlo.io.ProMC.ProMCEvent.Event result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pronlo.io.ProMC.ProMCEvent.Event buildPartial() {
          pronlo.io.ProMC.ProMCEvent.Event result = new pronlo.io.ProMC.ProMCEvent.Event(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.number_ = number_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.processID_ = processID_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            fdata_ = java.util.Collections.unmodifiableList(fdata_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.fdata_ = fdata_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            idata_ = java.util.Collections.unmodifiableList(idata_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.idata_ = idata_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pronlo.io.ProMC.ProMCEvent.Event) {
            return mergeFrom((pronlo.io.ProMC.ProMCEvent.Event)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pronlo.io.ProMC.ProMCEvent.Event other) {
          if (other == pronlo.io.ProMC.ProMCEvent.Event.getDefaultInstance()) return this;
          if (other.hasNumber()) {
            setNumber(other.getNumber());
          }
          if (other.hasProcessID()) {
            setProcessID(other.getProcessID());
          }
          if (!other.fdata_.isEmpty()) {
            if (fdata_.isEmpty()) {
              fdata_ = other.fdata_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureFdataIsMutable();
              fdata_.addAll(other.fdata_);
            }
            onChanged();
          }
          if (!other.idata_.isEmpty()) {
            if (idata_.isEmpty()) {
              idata_ = other.idata_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureIdataIsMutable();
              idata_.addAll(other.idata_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pronlo.io.ProMC.ProMCEvent.Event parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pronlo.io.ProMC.ProMCEvent.Event) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 Number = 1;
        private int number_ ;
        /**
         * <code>optional int32 Number = 1;</code>
         *
         * <pre>
         * Number
         * </pre>
         */
        public boolean hasNumber() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 Number = 1;</code>
         *
         * <pre>
         * Number
         * </pre>
         */
        public int getNumber() {
          return number_;
        }
        /**
         * <code>optional int32 Number = 1;</code>
         *
         * <pre>
         * Number
         * </pre>
         */
        public Builder setNumber(int value) {
          bitField0_ |= 0x00000001;
          number_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 Number = 1;</code>
         *
         * <pre>
         * Number
         * </pre>
         */
        public Builder clearNumber() {
          bitField0_ = (bitField0_ & ~0x00000001);
          number_ = 0;
          onChanged();
          return this;
        }

        // optional int32 Process_ID = 2;
        private int processID_ ;
        /**
         * <code>optional int32 Process_ID = 2;</code>
         *
         * <pre>
         * ID unique signal process id
         * </pre>
         */
        public boolean hasProcessID() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 Process_ID = 2;</code>
         *
         * <pre>
         * ID unique signal process id
         * </pre>
         */
        public int getProcessID() {
          return processID_;
        }
        /**
         * <code>optional int32 Process_ID = 2;</code>
         *
         * <pre>
         * ID unique signal process id
         * </pre>
         */
        public Builder setProcessID(int value) {
          bitField0_ |= 0x00000002;
          processID_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 Process_ID = 2;</code>
         *
         * <pre>
         * ID unique signal process id
         * </pre>
         */
        public Builder clearProcessID() {
          bitField0_ = (bitField0_ & ~0x00000002);
          processID_ = 0;
          onChanged();
          return this;
        }

        // repeated float fdata = 3;
        private java.util.List<java.lang.Float> fdata_ = java.util.Collections.emptyList();
        private void ensureFdataIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            fdata_ = new java.util.ArrayList<java.lang.Float>(fdata_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated float fdata = 3;</code>
         *
         * <pre>
         * event info as you want (array, float) 
         * </pre>
         */
        public java.util.List<java.lang.Float>
            getFdataList() {
          return java.util.Collections.unmodifiableList(fdata_);
        }
        /**
         * <code>repeated float fdata = 3;</code>
         *
         * <pre>
         * event info as you want (array, float) 
         * </pre>
         */
        public int getFdataCount() {
          return fdata_.size();
        }
        /**
         * <code>repeated float fdata = 3;</code>
         *
         * <pre>
         * event info as you want (array, float) 
         * </pre>
         */
        public float getFdata(int index) {
          return fdata_.get(index);
        }
        /**
         * <code>repeated float fdata = 3;</code>
         *
         * <pre>
         * event info as you want (array, float) 
         * </pre>
         */
        public Builder setFdata(
            int index, float value) {
          ensureFdataIsMutable();
          fdata_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float fdata = 3;</code>
         *
         * <pre>
         * event info as you want (array, float) 
         * </pre>
         */
        public Builder addFdata(float value) {
          ensureFdataIsMutable();
          fdata_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float fdata = 3;</code>
         *
         * <pre>
         * event info as you want (array, float) 
         * </pre>
         */
        public Builder addAllFdata(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureFdataIsMutable();
          super.addAll(values, fdata_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float fdata = 3;</code>
         *
         * <pre>
         * event info as you want (array, float) 
         * </pre>
         */
        public Builder clearFdata() {
          fdata_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated sint64 idata = 4;
        private java.util.List<java.lang.Long> idata_ = java.util.Collections.emptyList();
        private void ensureIdataIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            idata_ = new java.util.ArrayList<java.lang.Long>(idata_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated sint64 idata = 4;</code>
         *
         * <pre>
         * event info as you want (array, varint)
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getIdataList() {
          return java.util.Collections.unmodifiableList(idata_);
        }
        /**
         * <code>repeated sint64 idata = 4;</code>
         *
         * <pre>
         * event info as you want (array, varint)
         * </pre>
         */
        public int getIdataCount() {
          return idata_.size();
        }
        /**
         * <code>repeated sint64 idata = 4;</code>
         *
         * <pre>
         * event info as you want (array, varint)
         * </pre>
         */
        public long getIdata(int index) {
          return idata_.get(index);
        }
        /**
         * <code>repeated sint64 idata = 4;</code>
         *
         * <pre>
         * event info as you want (array, varint)
         * </pre>
         */
        public Builder setIdata(
            int index, long value) {
          ensureIdataIsMutable();
          idata_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 idata = 4;</code>
         *
         * <pre>
         * event info as you want (array, varint)
         * </pre>
         */
        public Builder addIdata(long value) {
          ensureIdataIsMutable();
          idata_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 idata = 4;</code>
         *
         * <pre>
         * event info as you want (array, varint)
         * </pre>
         */
        public Builder addAllIdata(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureIdataIsMutable();
          super.addAll(values, idata_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 idata = 4;</code>
         *
         * <pre>
         * event info as you want (array, varint)
         * </pre>
         */
        public Builder clearIdata() {
          idata_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Event)
      }

      static {
        defaultInstance = new Event(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Event)
    }

    public interface ParticlesOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint32 id = 1 [packed = true];
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      java.util.List<java.lang.Integer> getIdList();
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      int getIdCount();
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      int getId(int index);

      // repeated sint32 pdg_id = 2 [packed = true];
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      java.util.List<java.lang.Integer> getPdgIdList();
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      int getPdgIdCount();
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      int getPdgId(int index);

      // repeated sint64 Energy = 3 [packed = true];
      /**
       * <code>repeated sint64 Energy = 3 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      java.util.List<java.lang.Long> getEnergyList();
      /**
       * <code>repeated sint64 Energy = 3 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      int getEnergyCount();
      /**
       * <code>repeated sint64 Energy = 3 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      long getEnergy(int index);

      // repeated sint64 Px = 4 [packed = true];
      /**
       * <code>repeated sint64 Px = 4 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      java.util.List<java.lang.Long> getPxList();
      /**
       * <code>repeated sint64 Px = 4 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      int getPxCount();
      /**
       * <code>repeated sint64 Px = 4 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      long getPx(int index);

      // repeated sint64 Py = 5 [packed = true];
      /**
       * <code>repeated sint64 Py = 5 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      java.util.List<java.lang.Long> getPyList();
      /**
       * <code>repeated sint64 Py = 5 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      int getPyCount();
      /**
       * <code>repeated sint64 Py = 5 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      long getPy(int index);

      // repeated sint64 Pz = 6 [packed = true];
      /**
       * <code>repeated sint64 Pz = 6 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      java.util.List<java.lang.Long> getPzList();
      /**
       * <code>repeated sint64 Pz = 6 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      int getPzCount();
      /**
       * <code>repeated sint64 Pz = 6 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      long getPz(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Particles}
     *
     * <pre>
     * Particle definition for NLO programs
     * </pre>
     */
    public static final class Particles extends
        com.google.protobuf.GeneratedMessage
        implements ParticlesOrBuilder {
      // Use Particles.newBuilder() to construct.
      private Particles(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Particles(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Particles defaultInstance;
      public static Particles getDefaultInstance() {
        return defaultInstance;
      }

      public Particles getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Particles(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  id_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                id_.add(input.readUInt32());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  id_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  id_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  pdgId_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                pdgId_.add(input.readSInt32());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  pdgId_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pdgId_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  energy_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                energy_.add(input.readSInt64());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  energy_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  energy_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  px_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                px_.add(input.readSInt64());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  px_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  px_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  py_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000010;
                }
                py_.add(input.readSInt64());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  py_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  py_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 48: {
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  pz_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000020;
                }
                pz_.add(input.readSInt64());
                break;
              }
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                  pz_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000020;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pz_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            id_ = java.util.Collections.unmodifiableList(id_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            pdgId_ = java.util.Collections.unmodifiableList(pdgId_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            energy_ = java.util.Collections.unmodifiableList(energy_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            px_ = java.util.Collections.unmodifiableList(px_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            py_ = java.util.Collections.unmodifiableList(py_);
          }
          if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
            pz_ = java.util.Collections.unmodifiableList(pz_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pronlo.io.ProMC.internal_static_promc_ProMCEvent_Particles_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pronlo.io.ProMC.internal_static_promc_ProMCEvent_Particles_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pronlo.io.ProMC.ProMCEvent.Particles.class, pronlo.io.ProMC.ProMCEvent.Particles.Builder.class);
      }

      public static com.google.protobuf.Parser<Particles> PARSER =
          new com.google.protobuf.AbstractParser<Particles>() {
        public Particles parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Particles(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Particles> getParserForType() {
        return PARSER;
      }

      // repeated uint32 id = 1 [packed = true];
      public static final int ID_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Integer> id_;
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getIdList() {
        return id_;
      }
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      public int getIdCount() {
        return id_.size();
      }
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      public int getId(int index) {
        return id_.get(index);
      }
      private int idMemoizedSerializedSize = -1;

      // repeated sint32 pdg_id = 2 [packed = true];
      public static final int PDG_ID_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Integer> pdgId_;
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPdgIdList() {
        return pdgId_;
      }
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      public int getPdgIdCount() {
        return pdgId_.size();
      }
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type 
       * </pre>
       */
      public int getPdgId(int index) {
        return pdgId_.get(index);
      }
      private int pdgIdMemoizedSerializedSize = -1;

      // repeated sint64 Energy = 3 [packed = true];
      public static final int ENERGY_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Long> energy_;
      /**
       * <code>repeated sint64 Energy = 3 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEnergyList() {
        return energy_;
      }
      /**
       * <code>repeated sint64 Energy = 3 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      public int getEnergyCount() {
        return energy_.size();
      }
      /**
       * <code>repeated sint64 Energy = 3 [packed = true];</code>
       *
       * <pre>
       * Energy
       * </pre>
       */
      public long getEnergy(int index) {
        return energy_.get(index);
      }
      private int energyMemoizedSerializedSize = -1;

      // repeated sint64 Px = 4 [packed = true];
      public static final int PX_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Long> px_;
      /**
       * <code>repeated sint64 Px = 4 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPxList() {
        return px_;
      }
      /**
       * <code>repeated sint64 Px = 4 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      public int getPxCount() {
        return px_.size();
      }
      /**
       * <code>repeated sint64 Px = 4 [packed = true];</code>
       *
       * <pre>
       * pX 
       * </pre>
       */
      public long getPx(int index) {
        return px_.get(index);
      }
      private int pxMemoizedSerializedSize = -1;

      // repeated sint64 Py = 5 [packed = true];
      public static final int PY_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Long> py_;
      /**
       * <code>repeated sint64 Py = 5 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPyList() {
        return py_;
      }
      /**
       * <code>repeated sint64 Py = 5 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      public int getPyCount() {
        return py_.size();
      }
      /**
       * <code>repeated sint64 Py = 5 [packed = true];</code>
       *
       * <pre>
       * pY 
       * </pre>
       */
      public long getPy(int index) {
        return py_.get(index);
      }
      private int pyMemoizedSerializedSize = -1;

      // repeated sint64 Pz = 6 [packed = true];
      public static final int PZ_FIELD_NUMBER = 6;
      private java.util.List<java.lang.Long> pz_;
      /**
       * <code>repeated sint64 Pz = 6 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPzList() {
        return pz_;
      }
      /**
       * <code>repeated sint64 Pz = 6 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      public int getPzCount() {
        return pz_.size();
      }
      /**
       * <code>repeated sint64 Pz = 6 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      public long getPz(int index) {
        return pz_.get(index);
      }
      private int pzMemoizedSerializedSize = -1;

      private void initFields() {
        id_ = java.util.Collections.emptyList();
        pdgId_ = java.util.Collections.emptyList();
        energy_ = java.util.Collections.emptyList();
        px_ = java.util.Collections.emptyList();
        py_ = java.util.Collections.emptyList();
        pz_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getIdList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(idMemoizedSerializedSize);
        }
        for (int i = 0; i < id_.size(); i++) {
          output.writeUInt32NoTag(id_.get(i));
        }
        if (getPdgIdList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(pdgIdMemoizedSerializedSize);
        }
        for (int i = 0; i < pdgId_.size(); i++) {
          output.writeSInt32NoTag(pdgId_.get(i));
        }
        if (getEnergyList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(energyMemoizedSerializedSize);
        }
        for (int i = 0; i < energy_.size(); i++) {
          output.writeSInt64NoTag(energy_.get(i));
        }
        if (getPxList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(pxMemoizedSerializedSize);
        }
        for (int i = 0; i < px_.size(); i++) {
          output.writeSInt64NoTag(px_.get(i));
        }
        if (getPyList().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(pyMemoizedSerializedSize);
        }
        for (int i = 0; i < py_.size(); i++) {
          output.writeSInt64NoTag(py_.get(i));
        }
        if (getPzList().size() > 0) {
          output.writeRawVarint32(50);
          output.writeRawVarint32(pzMemoizedSerializedSize);
        }
        for (int i = 0; i < pz_.size(); i++) {
          output.writeSInt64NoTag(pz_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < id_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(id_.get(i));
          }
          size += dataSize;
          if (!getIdList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          idMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < pdgId_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(pdgId_.get(i));
          }
          size += dataSize;
          if (!getPdgIdList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pdgIdMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < energy_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(energy_.get(i));
          }
          size += dataSize;
          if (!getEnergyList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          energyMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < px_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(px_.get(i));
          }
          size += dataSize;
          if (!getPxList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pxMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < py_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(py_.get(i));
          }
          size += dataSize;
          if (!getPyList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pyMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < pz_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(pz_.get(i));
          }
          size += dataSize;
          if (!getPzList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pzMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static pronlo.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pronlo.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pronlo.io.ProMC.ProMCEvent.Particles parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static pronlo.io.ProMC.ProMCEvent.Particles parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static pronlo.io.ProMC.ProMCEvent.Particles parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pronlo.io.ProMC.ProMCEvent.Particles parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static pronlo.io.ProMC.ProMCEvent.Particles parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static pronlo.io.ProMC.ProMCEvent.Particles parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static pronlo.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static pronlo.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(pronlo.io.ProMC.ProMCEvent.Particles prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Particles}
       *
       * <pre>
       * Particle definition for NLO programs
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements pronlo.io.ProMC.ProMCEvent.ParticlesOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return pronlo.io.ProMC.internal_static_promc_ProMCEvent_Particles_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return pronlo.io.ProMC.internal_static_promc_ProMCEvent_Particles_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  pronlo.io.ProMC.ProMCEvent.Particles.class, pronlo.io.ProMC.ProMCEvent.Particles.Builder.class);
        }

        // Construct using pronlo.io.ProMC.ProMCEvent.Particles.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          pdgId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          energy_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          px_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          py_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          pz_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return pronlo.io.ProMC.internal_static_promc_ProMCEvent_Particles_descriptor;
        }

        public pronlo.io.ProMC.ProMCEvent.Particles getDefaultInstanceForType() {
          return pronlo.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
        }

        public pronlo.io.ProMC.ProMCEvent.Particles build() {
          pronlo.io.ProMC.ProMCEvent.Particles result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public pronlo.io.ProMC.ProMCEvent.Particles buildPartial() {
          pronlo.io.ProMC.ProMCEvent.Particles result = new pronlo.io.ProMC.ProMCEvent.Particles(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            id_ = java.util.Collections.unmodifiableList(id_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.id_ = id_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            pdgId_ = java.util.Collections.unmodifiableList(pdgId_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.pdgId_ = pdgId_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            energy_ = java.util.Collections.unmodifiableList(energy_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.energy_ = energy_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            px_ = java.util.Collections.unmodifiableList(px_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.px_ = px_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            py_ = java.util.Collections.unmodifiableList(py_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.py_ = py_;
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            pz_ = java.util.Collections.unmodifiableList(pz_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.pz_ = pz_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof pronlo.io.ProMC.ProMCEvent.Particles) {
            return mergeFrom((pronlo.io.ProMC.ProMCEvent.Particles)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(pronlo.io.ProMC.ProMCEvent.Particles other) {
          if (other == pronlo.io.ProMC.ProMCEvent.Particles.getDefaultInstance()) return this;
          if (!other.id_.isEmpty()) {
            if (id_.isEmpty()) {
              id_ = other.id_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureIdIsMutable();
              id_.addAll(other.id_);
            }
            onChanged();
          }
          if (!other.pdgId_.isEmpty()) {
            if (pdgId_.isEmpty()) {
              pdgId_ = other.pdgId_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePdgIdIsMutable();
              pdgId_.addAll(other.pdgId_);
            }
            onChanged();
          }
          if (!other.energy_.isEmpty()) {
            if (energy_.isEmpty()) {
              energy_ = other.energy_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureEnergyIsMutable();
              energy_.addAll(other.energy_);
            }
            onChanged();
          }
          if (!other.px_.isEmpty()) {
            if (px_.isEmpty()) {
              px_ = other.px_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensurePxIsMutable();
              px_.addAll(other.px_);
            }
            onChanged();
          }
          if (!other.py_.isEmpty()) {
            if (py_.isEmpty()) {
              py_ = other.py_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensurePyIsMutable();
              py_.addAll(other.py_);
            }
            onChanged();
          }
          if (!other.pz_.isEmpty()) {
            if (pz_.isEmpty()) {
              pz_ = other.pz_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensurePzIsMutable();
              pz_.addAll(other.pz_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          pronlo.io.ProMC.ProMCEvent.Particles parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (pronlo.io.ProMC.ProMCEvent.Particles) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint32 id = 1 [packed = true];
        private java.util.List<java.lang.Integer> id_ = java.util.Collections.emptyList();
        private void ensureIdIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            id_ = new java.util.ArrayList<java.lang.Integer>(id_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getIdList() {
          return java.util.Collections.unmodifiableList(id_);
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public int getIdCount() {
          return id_.size();
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public int getId(int index) {
          return id_.get(index);
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder setId(
            int index, int value) {
          ensureIdIsMutable();
          id_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder addId(int value) {
          ensureIdIsMutable();
          id_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder addAllId(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureIdIsMutable();
          super.addAll(values, id_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder clearId() {
          id_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint32 pdg_id = 2 [packed = true];
        private java.util.List<java.lang.Integer> pdgId_ = java.util.Collections.emptyList();
        private void ensurePdgIdIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            pdgId_ = new java.util.ArrayList<java.lang.Integer>(pdgId_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getPdgIdList() {
          return java.util.Collections.unmodifiableList(pdgId_);
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public int getPdgIdCount() {
          return pdgId_.size();
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public int getPdgId(int index) {
          return pdgId_.get(index);
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public Builder setPdgId(
            int index, int value) {
          ensurePdgIdIsMutable();
          pdgId_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public Builder addPdgId(int value) {
          ensurePdgIdIsMutable();
          pdgId_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public Builder addAllPdgId(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensurePdgIdIsMutable();
          super.addAll(values, pdgId_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type 
         * </pre>
         */
        public Builder clearPdgId() {
          pdgId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated sint64 Energy = 3 [packed = true];
        private java.util.List<java.lang.Long> energy_ = java.util.Collections.emptyList();
        private void ensureEnergyIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            energy_ = new java.util.ArrayList<java.lang.Long>(energy_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated sint64 Energy = 3 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEnergyList() {
          return java.util.Collections.unmodifiableList(energy_);
        }
        /**
         * <code>repeated sint64 Energy = 3 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public int getEnergyCount() {
          return energy_.size();
        }
        /**
         * <code>repeated sint64 Energy = 3 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public long getEnergy(int index) {
          return energy_.get(index);
        }
        /**
         * <code>repeated sint64 Energy = 3 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public Builder setEnergy(
            int index, long value) {
          ensureEnergyIsMutable();
          energy_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Energy = 3 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public Builder addEnergy(long value) {
          ensureEnergyIsMutable();
          energy_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Energy = 3 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public Builder addAllEnergy(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEnergyIsMutable();
          super.addAll(values, energy_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Energy = 3 [packed = true];</code>
         *
         * <pre>
         * Energy
         * </pre>
         */
        public Builder clearEnergy() {
          energy_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated sint64 Px = 4 [packed = true];
        private java.util.List<java.lang.Long> px_ = java.util.Collections.emptyList();
        private void ensurePxIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            px_ = new java.util.ArrayList<java.lang.Long>(px_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated sint64 Px = 4 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPxList() {
          return java.util.Collections.unmodifiableList(px_);
        }
        /**
         * <code>repeated sint64 Px = 4 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public int getPxCount() {
          return px_.size();
        }
        /**
         * <code>repeated sint64 Px = 4 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public long getPx(int index) {
          return px_.get(index);
        }
        /**
         * <code>repeated sint64 Px = 4 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public Builder setPx(
            int index, long value) {
          ensurePxIsMutable();
          px_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Px = 4 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public Builder addPx(long value) {
          ensurePxIsMutable();
          px_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Px = 4 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public Builder addAllPx(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePxIsMutable();
          super.addAll(values, px_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Px = 4 [packed = true];</code>
         *
         * <pre>
         * pX 
         * </pre>
         */
        public Builder clearPx() {
          px_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // repeated sint64 Py = 5 [packed = true];
        private java.util.List<java.lang.Long> py_ = java.util.Collections.emptyList();
        private void ensurePyIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            py_ = new java.util.ArrayList<java.lang.Long>(py_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated sint64 Py = 5 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPyList() {
          return java.util.Collections.unmodifiableList(py_);
        }
        /**
         * <code>repeated sint64 Py = 5 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public int getPyCount() {
          return py_.size();
        }
        /**
         * <code>repeated sint64 Py = 5 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public long getPy(int index) {
          return py_.get(index);
        }
        /**
         * <code>repeated sint64 Py = 5 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public Builder setPy(
            int index, long value) {
          ensurePyIsMutable();
          py_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Py = 5 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public Builder addPy(long value) {
          ensurePyIsMutable();
          py_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Py = 5 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public Builder addAllPy(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePyIsMutable();
          super.addAll(values, py_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Py = 5 [packed = true];</code>
         *
         * <pre>
         * pY 
         * </pre>
         */
        public Builder clearPy() {
          py_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        // repeated sint64 Pz = 6 [packed = true];
        private java.util.List<java.lang.Long> pz_ = java.util.Collections.emptyList();
        private void ensurePzIsMutable() {
          if (!((bitField0_ & 0x00000020) == 0x00000020)) {
            pz_ = new java.util.ArrayList<java.lang.Long>(pz_);
            bitField0_ |= 0x00000020;
           }
        }
        /**
         * <code>repeated sint64 Pz = 6 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPzList() {
          return java.util.Collections.unmodifiableList(pz_);
        }
        /**
         * <code>repeated sint64 Pz = 6 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public int getPzCount() {
          return pz_.size();
        }
        /**
         * <code>repeated sint64 Pz = 6 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public long getPz(int index) {
          return pz_.get(index);
        }
        /**
         * <code>repeated sint64 Pz = 6 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder setPz(
            int index, long value) {
          ensurePzIsMutable();
          pz_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Pz = 6 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder addPz(long value) {
          ensurePzIsMutable();
          pz_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Pz = 6 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder addAllPz(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePzIsMutable();
          super.addAll(values, pz_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Pz = 6 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder clearPz() {
          pz_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Particles)
      }

      static {
        defaultInstance = new Particles(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Particles)
    }

    private int bitField0_;
    // optional .promc.ProMCEvent.Event event = 1;
    public static final int EVENT_FIELD_NUMBER = 1;
    private pronlo.io.ProMC.ProMCEvent.Event event_;
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    public boolean hasEvent() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    public pronlo.io.ProMC.ProMCEvent.Event getEvent() {
      return event_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * even record for this event
     * </pre>
     */
    public pronlo.io.ProMC.ProMCEvent.EventOrBuilder getEventOrBuilder() {
      return event_;
    }

    // optional .promc.ProMCEvent.Particles particles = 2;
    public static final int PARTICLES_FIELD_NUMBER = 2;
    private pronlo.io.ProMC.ProMCEvent.Particles particles_;
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    public boolean hasParticles() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    public pronlo.io.ProMC.ProMCEvent.Particles getParticles() {
      return particles_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on generator-level particles 
     * </pre>
     */
    public pronlo.io.ProMC.ProMCEvent.ParticlesOrBuilder getParticlesOrBuilder() {
      return particles_;
    }

    private void initFields() {
      event_ = pronlo.io.ProMC.ProMCEvent.Event.getDefaultInstance();
      particles_ = pronlo.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, event_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, particles_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, event_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, particles_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static pronlo.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pronlo.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pronlo.io.ProMC.ProMCEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static pronlo.io.ProMC.ProMCEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static pronlo.io.ProMC.ProMCEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pronlo.io.ProMC.ProMCEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static pronlo.io.ProMC.ProMCEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static pronlo.io.ProMC.ProMCEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static pronlo.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static pronlo.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(pronlo.io.ProMC.ProMCEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code promc.ProMCEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements pronlo.io.ProMC.ProMCEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return pronlo.io.ProMC.internal_static_promc_ProMCEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return pronlo.io.ProMC.internal_static_promc_ProMCEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                pronlo.io.ProMC.ProMCEvent.class, pronlo.io.ProMC.ProMCEvent.Builder.class);
      }

      // Construct using pronlo.io.ProMC.ProMCEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getEventFieldBuilder();
          getParticlesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (eventBuilder_ == null) {
          event_ = pronlo.io.ProMC.ProMCEvent.Event.getDefaultInstance();
        } else {
          eventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (particlesBuilder_ == null) {
          particles_ = pronlo.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
        } else {
          particlesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return pronlo.io.ProMC.internal_static_promc_ProMCEvent_descriptor;
      }

      public pronlo.io.ProMC.ProMCEvent getDefaultInstanceForType() {
        return pronlo.io.ProMC.ProMCEvent.getDefaultInstance();
      }

      public pronlo.io.ProMC.ProMCEvent build() {
        pronlo.io.ProMC.ProMCEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public pronlo.io.ProMC.ProMCEvent buildPartial() {
        pronlo.io.ProMC.ProMCEvent result = new pronlo.io.ProMC.ProMCEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (particlesBuilder_ == null) {
          result.particles_ = particles_;
        } else {
          result.particles_ = particlesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof pronlo.io.ProMC.ProMCEvent) {
          return mergeFrom((pronlo.io.ProMC.ProMCEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(pronlo.io.ProMC.ProMCEvent other) {
        if (other == pronlo.io.ProMC.ProMCEvent.getDefaultInstance()) return this;
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        if (other.hasParticles()) {
          mergeParticles(other.getParticles());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        pronlo.io.ProMC.ProMCEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (pronlo.io.ProMC.ProMCEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .promc.ProMCEvent.Event event = 1;
      private pronlo.io.ProMC.ProMCEvent.Event event_ = pronlo.io.ProMC.ProMCEvent.Event.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pronlo.io.ProMC.ProMCEvent.Event, pronlo.io.ProMC.ProMCEvent.Event.Builder, pronlo.io.ProMC.ProMCEvent.EventOrBuilder> eventBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public boolean hasEvent() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public pronlo.io.ProMC.ProMCEvent.Event getEvent() {
        if (eventBuilder_ == null) {
          return event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public Builder setEvent(pronlo.io.ProMC.ProMCEvent.Event value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public Builder setEvent(
          pronlo.io.ProMC.ProMCEvent.Event.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public Builder mergeEvent(pronlo.io.ProMC.ProMCEvent.Event value) {
        if (eventBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              event_ != pronlo.io.ProMC.ProMCEvent.Event.getDefaultInstance()) {
            event_ =
              pronlo.io.ProMC.ProMCEvent.Event.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = pronlo.io.ProMC.ProMCEvent.Event.getDefaultInstance();
          onChanged();
        } else {
          eventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public pronlo.io.ProMC.ProMCEvent.Event.Builder getEventBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      public pronlo.io.ProMC.ProMCEvent.EventOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * even record for this event
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pronlo.io.ProMC.ProMCEvent.Event, pronlo.io.ProMC.ProMCEvent.Event.Builder, pronlo.io.ProMC.ProMCEvent.EventOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pronlo.io.ProMC.ProMCEvent.Event, pronlo.io.ProMC.ProMCEvent.Event.Builder, pronlo.io.ProMC.ProMCEvent.EventOrBuilder>(
                  event_,
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      // optional .promc.ProMCEvent.Particles particles = 2;
      private pronlo.io.ProMC.ProMCEvent.Particles particles_ = pronlo.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pronlo.io.ProMC.ProMCEvent.Particles, pronlo.io.ProMC.ProMCEvent.Particles.Builder, pronlo.io.ProMC.ProMCEvent.ParticlesOrBuilder> particlesBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public boolean hasParticles() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public pronlo.io.ProMC.ProMCEvent.Particles getParticles() {
        if (particlesBuilder_ == null) {
          return particles_;
        } else {
          return particlesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public Builder setParticles(pronlo.io.ProMC.ProMCEvent.Particles value) {
        if (particlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          particles_ = value;
          onChanged();
        } else {
          particlesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public Builder setParticles(
          pronlo.io.ProMC.ProMCEvent.Particles.Builder builderForValue) {
        if (particlesBuilder_ == null) {
          particles_ = builderForValue.build();
          onChanged();
        } else {
          particlesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public Builder mergeParticles(pronlo.io.ProMC.ProMCEvent.Particles value) {
        if (particlesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              particles_ != pronlo.io.ProMC.ProMCEvent.Particles.getDefaultInstance()) {
            particles_ =
              pronlo.io.ProMC.ProMCEvent.Particles.newBuilder(particles_).mergeFrom(value).buildPartial();
          } else {
            particles_ = value;
          }
          onChanged();
        } else {
          particlesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public Builder clearParticles() {
        if (particlesBuilder_ == null) {
          particles_ = pronlo.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
          onChanged();
        } else {
          particlesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public pronlo.io.ProMC.ProMCEvent.Particles.Builder getParticlesBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getParticlesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      public pronlo.io.ProMC.ProMCEvent.ParticlesOrBuilder getParticlesOrBuilder() {
        if (particlesBuilder_ != null) {
          return particlesBuilder_.getMessageOrBuilder();
        } else {
          return particles_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on generator-level particles 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pronlo.io.ProMC.ProMCEvent.Particles, pronlo.io.ProMC.ProMCEvent.Particles.Builder, pronlo.io.ProMC.ProMCEvent.ParticlesOrBuilder> 
          getParticlesFieldBuilder() {
        if (particlesBuilder_ == null) {
          particlesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pronlo.io.ProMC.ProMCEvent.Particles, pronlo.io.ProMC.ProMCEvent.Particles.Builder, pronlo.io.ProMC.ProMCEvent.ParticlesOrBuilder>(
                  particles_,
                  getParentForChildren(),
                  isClean());
          particles_ = null;
        }
        return particlesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:promc.ProMCEvent)
    }

    static {
      defaultInstance = new ProMCEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:promc.ProMCEvent)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Event_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Event_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Particles_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Particles_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013ProMC.proto\022\005promc\"\244\002\n\nProMCEvent\022&\n\005e" +
      "vent\030\001 \001(\0132\027.promc.ProMCEvent.Event\022.\n\tp" +
      "articles\030\002 \001(\0132\033.promc.ProMCEvent.Partic" +
      "les\032I\n\005Event\022\016\n\006Number\030\001 \001(\005\022\022\n\nProcess_" +
      "ID\030\002 \001(\005\022\r\n\005fdata\030\003 \003(\002\022\r\n\005idata\030\004 \003(\022\032s" +
      "\n\tParticles\022\016\n\002id\030\001 \003(\rB\002\020\001\022\022\n\006pdg_id\030\002 " +
      "\003(\021B\002\020\001\022\022\n\006Energy\030\003 \003(\022B\002\020\001\022\016\n\002Px\030\004 \003(\022B" +
      "\002\020\001\022\016\n\002Py\030\005 \003(\022B\002\020\001\022\016\n\002Pz\030\006 \003(\022B\002\020\001B\022\n\tp" +
      "ronlo.ioB\005ProMC"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_promc_ProMCEvent_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_promc_ProMCEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_descriptor,
              new java.lang.String[] { "Event", "Particles", });
          internal_static_promc_ProMCEvent_Event_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(0);
          internal_static_promc_ProMCEvent_Event_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Event_descriptor,
              new java.lang.String[] { "Number", "ProcessID", "Fdata", "Idata", });
          internal_static_promc_ProMCEvent_Particles_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(1);
          internal_static_promc_ProMCEvent_Particles_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Particles_descriptor,
              new java.lang.String[] { "Id", "PdgId", "Energy", "Px", "Py", "Pz", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
