// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProMC.proto

package proreco.io;

public final class ProMC {
  private ProMC() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ProMCEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .promc.ProMCEvent.Event event = 1;
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * information on event 
     * </pre>
     */
    boolean hasEvent();
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * information on event 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.Event getEvent();
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * information on event 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.EventOrBuilder getEventOrBuilder();

    // optional .promc.ProMCEvent.Particles particles = 2;
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on particle 
     * </pre>
     */
    boolean hasParticles();
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on particle 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.Particles getParticles();
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on particle 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.ParticlesOrBuilder getParticlesOrBuilder();

    // optional .promc.ProMCEvent.Jets jets = 3;
    /**
     * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
     *
     * <pre>
     * jets 
     * </pre>
     */
    boolean hasJets();
    /**
     * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
     *
     * <pre>
     * jets 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.Jets getJets();
    /**
     * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
     *
     * <pre>
     * jets 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.JetsOrBuilder getJetsOrBuilder();

    // optional .promc.ProMCEvent.GenJets genjets = 4;
    /**
     * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
     *
     * <pre>
     * generator jets 
     * </pre>
     */
    boolean hasGenjets();
    /**
     * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
     *
     * <pre>
     * generator jets 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.GenJets getGenjets();
    /**
     * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
     *
     * <pre>
     * generator jets 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.GenJetsOrBuilder getGenjetsOrBuilder();

    // optional .promc.ProMCEvent.BLJets bjets = 5;
    /**
     * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
     *
     * <pre>
     * b-jets
     * </pre>
     */
    boolean hasBjets();
    /**
     * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
     *
     * <pre>
     * b-jets
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.BLJets getBjets();
    /**
     * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
     *
     * <pre>
     * b-jets
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.BLJetsOrBuilder getBjetsOrBuilder();

    // optional .promc.ProMCEvent.Electrons electrons = 6;
    /**
     * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
     *
     * <pre>
     * electrons
     * </pre>
     */
    boolean hasElectrons();
    /**
     * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
     *
     * <pre>
     * electrons
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.Electrons getElectrons();
    /**
     * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
     *
     * <pre>
     * electrons
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.ElectronsOrBuilder getElectronsOrBuilder();

    // optional .promc.ProMCEvent.Muons muons = 7;
    /**
     * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
     *
     * <pre>
     * muons 
     * </pre>
     */
    boolean hasMuons();
    /**
     * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
     *
     * <pre>
     * muons 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.Muons getMuons();
    /**
     * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
     *
     * <pre>
     * muons 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.MuonsOrBuilder getMuonsOrBuilder();

    // optional .promc.ProMCEvent.Tracks tracks = 8;
    /**
     * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
     *
     * <pre>
     * tracks 
     * </pre>
     */
    boolean hasTracks();
    /**
     * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
     *
     * <pre>
     * tracks 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.Tracks getTracks();
    /**
     * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
     *
     * <pre>
     * tracks 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.TracksOrBuilder getTracksOrBuilder();

    // optional .promc.ProMCEvent.Photons photons = 9;
    /**
     * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
     *
     * <pre>
     * photons 
     * </pre>
     */
    boolean hasPhotons();
    /**
     * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
     *
     * <pre>
     * photons 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.Photons getPhotons();
    /**
     * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
     *
     * <pre>
     * photons 
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.PhotonsOrBuilder getPhotonsOrBuilder();

    // optional .promc.ProMCEvent.MissingET missingET = 10;
    /**
     * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
     *
     * <pre>
     * missing ET
     * </pre>
     */
    boolean hasMissingET();
    /**
     * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
     *
     * <pre>
     * missing ET
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.MissingET getMissingET();
    /**
     * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
     *
     * <pre>
     * missing ET
     * </pre>
     */
    proreco.io.ProMC.ProMCEvent.MissingETOrBuilder getMissingETOrBuilder();
  }
  /**
   * Protobuf type {@code promc.ProMCEvent}
   */
  public static final class ProMCEvent extends
      com.google.protobuf.GeneratedMessage
      implements ProMCEventOrBuilder {
    // Use ProMCEvent.newBuilder() to construct.
    private ProMCEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ProMCEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ProMCEvent defaultInstance;
    public static ProMCEvent getDefaultInstance() {
      return defaultInstance;
    }

    public ProMCEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ProMCEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              proreco.io.ProMC.ProMCEvent.Event.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(proreco.io.ProMC.ProMCEvent.Event.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              proreco.io.ProMC.ProMCEvent.Particles.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = particles_.toBuilder();
              }
              particles_ = input.readMessage(proreco.io.ProMC.ProMCEvent.Particles.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(particles_);
                particles_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              proreco.io.ProMC.ProMCEvent.Jets.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = jets_.toBuilder();
              }
              jets_ = input.readMessage(proreco.io.ProMC.ProMCEvent.Jets.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(jets_);
                jets_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              proreco.io.ProMC.ProMCEvent.GenJets.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = genjets_.toBuilder();
              }
              genjets_ = input.readMessage(proreco.io.ProMC.ProMCEvent.GenJets.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(genjets_);
                genjets_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              proreco.io.ProMC.ProMCEvent.BLJets.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = bjets_.toBuilder();
              }
              bjets_ = input.readMessage(proreco.io.ProMC.ProMCEvent.BLJets.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(bjets_);
                bjets_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              proreco.io.ProMC.ProMCEvent.Electrons.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = electrons_.toBuilder();
              }
              electrons_ = input.readMessage(proreco.io.ProMC.ProMCEvent.Electrons.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(electrons_);
                electrons_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              proreco.io.ProMC.ProMCEvent.Muons.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = muons_.toBuilder();
              }
              muons_ = input.readMessage(proreco.io.ProMC.ProMCEvent.Muons.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(muons_);
                muons_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              proreco.io.ProMC.ProMCEvent.Tracks.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = tracks_.toBuilder();
              }
              tracks_ = input.readMessage(proreco.io.ProMC.ProMCEvent.Tracks.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tracks_);
                tracks_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              proreco.io.ProMC.ProMCEvent.Photons.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = photons_.toBuilder();
              }
              photons_ = input.readMessage(proreco.io.ProMC.ProMCEvent.Photons.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(photons_);
                photons_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              proreco.io.ProMC.ProMCEvent.MissingET.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = missingET_.toBuilder();
              }
              missingET_ = input.readMessage(proreco.io.ProMC.ProMCEvent.MissingET.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(missingET_);
                missingET_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return proreco.io.ProMC.internal_static_promc_ProMCEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return proreco.io.ProMC.internal_static_promc_ProMCEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              proreco.io.ProMC.ProMCEvent.class, proreco.io.ProMC.ProMCEvent.Builder.class);
    }

    public static com.google.protobuf.Parser<ProMCEvent> PARSER =
        new com.google.protobuf.AbstractParser<ProMCEvent>() {
      public ProMCEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProMCEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ProMCEvent> getParserForType() {
      return PARSER;
    }

    public interface EventOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated int32 Number = 1 [packed = true];
      /**
       * <code>repeated int32 Number = 1 [packed = true];</code>
       *
       * <pre>
       * Number 
       * </pre>
       */
      java.util.List<java.lang.Integer> getNumberList();
      /**
       * <code>repeated int32 Number = 1 [packed = true];</code>
       *
       * <pre>
       * Number 
       * </pre>
       */
      int getNumberCount();
      /**
       * <code>repeated int32 Number = 1 [packed = true];</code>
       *
       * <pre>
       * Number 
       * </pre>
       */
      int getNumber(int index);

      // repeated int32 ProcessID = 2 [packed = true];
      /**
       * <code>repeated int32 ProcessID = 2 [packed = true];</code>
       *
       * <pre>
       * ID unique signal process id 
       * </pre>
       */
      java.util.List<java.lang.Integer> getProcessIDList();
      /**
       * <code>repeated int32 ProcessID = 2 [packed = true];</code>
       *
       * <pre>
       * ID unique signal process id 
       * </pre>
       */
      int getProcessIDCount();
      /**
       * <code>repeated int32 ProcessID = 2 [packed = true];</code>
       *
       * <pre>
       * ID unique signal process id 
       * </pre>
       */
      int getProcessID(int index);

      // repeated int32 MPI = 3 [packed = true];
      /**
       * <code>repeated int32 MPI = 3 [packed = true];</code>
       *
       * <pre>
       * MPI number of multi parton interactions 
       * </pre>
       */
      java.util.List<java.lang.Integer> getMPIList();
      /**
       * <code>repeated int32 MPI = 3 [packed = true];</code>
       *
       * <pre>
       * MPI number of multi parton interactions 
       * </pre>
       */
      int getMPICount();
      /**
       * <code>repeated int32 MPI = 3 [packed = true];</code>
       *
       * <pre>
       * MPI number of multi parton interactions 
       * </pre>
       */
      int getMPI(int index);

      // repeated int32 ID1 = 4 [packed = true];
      /**
       * <code>repeated int32 ID1 = 4 [packed = true];</code>
       *
       * <pre>
       * ID1 flavour code of first parton 
       * </pre>
       */
      java.util.List<java.lang.Integer> getID1List();
      /**
       * <code>repeated int32 ID1 = 4 [packed = true];</code>
       *
       * <pre>
       * ID1 flavour code of first parton 
       * </pre>
       */
      int getID1Count();
      /**
       * <code>repeated int32 ID1 = 4 [packed = true];</code>
       *
       * <pre>
       * ID1 flavour code of first parton 
       * </pre>
       */
      int getID1(int index);

      // repeated int32 ID2 = 5 [packed = true];
      /**
       * <code>repeated int32 ID2 = 5 [packed = true];</code>
       *
       * <pre>
       * ID2 flavour code of second parton 
       * </pre>
       */
      java.util.List<java.lang.Integer> getID2List();
      /**
       * <code>repeated int32 ID2 = 5 [packed = true];</code>
       *
       * <pre>
       * ID2 flavour code of second parton 
       * </pre>
       */
      int getID2Count();
      /**
       * <code>repeated int32 ID2 = 5 [packed = true];</code>
       *
       * <pre>
       * ID2 flavour code of second parton 
       * </pre>
       */
      int getID2(int index);

      // repeated float PDF1 = 6 [packed = true];
      /**
       * <code>repeated float PDF1 = 6 [packed = true];</code>
       *
       * <pre>
       * PDF1 PDF (id1, x1, Q)  
       * </pre>
       */
      java.util.List<java.lang.Float> getPDF1List();
      /**
       * <code>repeated float PDF1 = 6 [packed = true];</code>
       *
       * <pre>
       * PDF1 PDF (id1, x1, Q)  
       * </pre>
       */
      int getPDF1Count();
      /**
       * <code>repeated float PDF1 = 6 [packed = true];</code>
       *
       * <pre>
       * PDF1 PDF (id1, x1, Q)  
       * </pre>
       */
      float getPDF1(int index);

      // repeated float PDF2 = 7 [packed = true];
      /**
       * <code>repeated float PDF2 = 7 [packed = true];</code>
       *
       * <pre>
       * PDF2 PDF (id2, x2, Q)  
       * </pre>
       */
      java.util.List<java.lang.Float> getPDF2List();
      /**
       * <code>repeated float PDF2 = 7 [packed = true];</code>
       *
       * <pre>
       * PDF2 PDF (id2, x2, Q)  
       * </pre>
       */
      int getPDF2Count();
      /**
       * <code>repeated float PDF2 = 7 [packed = true];</code>
       *
       * <pre>
       * PDF2 PDF (id2, x2, Q)  
       * </pre>
       */
      float getPDF2(int index);

      // repeated float X1 = 8;
      /**
       * <code>repeated float X1 = 8;</code>
       *
       * <pre>
       * X1 fraction of beam momentum carried by first parton ("beam side")  
       * </pre>
       */
      java.util.List<java.lang.Float> getX1List();
      /**
       * <code>repeated float X1 = 8;</code>
       *
       * <pre>
       * X1 fraction of beam momentum carried by first parton ("beam side")  
       * </pre>
       */
      int getX1Count();
      /**
       * <code>repeated float X1 = 8;</code>
       *
       * <pre>
       * X1 fraction of beam momentum carried by first parton ("beam side")  
       * </pre>
       */
      float getX1(int index);

      // repeated float X2 = 9;
      /**
       * <code>repeated float X2 = 9;</code>
       *
       * <pre>
       * X2 fraction of beam momentum carried by second parton ("target side")  
       * </pre>
       */
      java.util.List<java.lang.Float> getX2List();
      /**
       * <code>repeated float X2 = 9;</code>
       *
       * <pre>
       * X2 fraction of beam momentum carried by second parton ("target side")  
       * </pre>
       */
      int getX2Count();
      /**
       * <code>repeated float X2 = 9;</code>
       *
       * <pre>
       * X2 fraction of beam momentum carried by second parton ("target side")  
       * </pre>
       */
      float getX2(int index);

      // repeated float ScalePDF = 10;
      /**
       * <code>repeated float ScalePDF = 10;</code>
       *
       * <pre>
       * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
       * </pre>
       */
      java.util.List<java.lang.Float> getScalePDFList();
      /**
       * <code>repeated float ScalePDF = 10;</code>
       *
       * <pre>
       * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
       * </pre>
       */
      int getScalePDFCount();
      /**
       * <code>repeated float ScalePDF = 10;</code>
       *
       * <pre>
       * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
       * </pre>
       */
      float getScalePDF(int index);

      // repeated float AlphaQED = 11;
      /**
       * <code>repeated float AlphaQED = 11;</code>
       *
       * <pre>
       * AlphaQED QED coupling, see hep-ph/0109068  
       * </pre>
       */
      java.util.List<java.lang.Float> getAlphaQEDList();
      /**
       * <code>repeated float AlphaQED = 11;</code>
       *
       * <pre>
       * AlphaQED QED coupling, see hep-ph/0109068  
       * </pre>
       */
      int getAlphaQEDCount();
      /**
       * <code>repeated float AlphaQED = 11;</code>
       *
       * <pre>
       * AlphaQED QED coupling, see hep-ph/0109068  
       * </pre>
       */
      float getAlphaQED(int index);

      // repeated float Scale = 12;
      /**
       * <code>repeated float Scale = 12;</code>
       *
       * <pre>
       * Scale   energy scale, see hep-ph/0109068 
       * </pre>
       */
      java.util.List<java.lang.Float> getScaleList();
      /**
       * <code>repeated float Scale = 12;</code>
       *
       * <pre>
       * Scale   energy scale, see hep-ph/0109068 
       * </pre>
       */
      int getScaleCount();
      /**
       * <code>repeated float Scale = 12;</code>
       *
       * <pre>
       * Scale   energy scale, see hep-ph/0109068 
       * </pre>
       */
      float getScale(int index);

      // repeated float AlphaQCD = 13;
      /**
       * <code>repeated float AlphaQCD = 13;</code>
       *
       * <pre>
       * QCD coupling, see hep-ph/0109068
       * </pre>
       */
      java.util.List<java.lang.Float> getAlphaQCDList();
      /**
       * <code>repeated float AlphaQCD = 13;</code>
       *
       * <pre>
       * QCD coupling, see hep-ph/0109068
       * </pre>
       */
      int getAlphaQCDCount();
      /**
       * <code>repeated float AlphaQCD = 13;</code>
       *
       * <pre>
       * QCD coupling, see hep-ph/0109068
       * </pre>
       */
      float getAlphaQCD(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Event}
     *
     * <pre>
     * Event 
     * </pre>
     */
    public static final class Event extends
        com.google.protobuf.GeneratedMessage
        implements EventOrBuilder {
      // Use Event.newBuilder() to construct.
      private Event(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Event(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Event defaultInstance;
      public static Event getDefaultInstance() {
        return defaultInstance;
      }

      public Event getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Event(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  number_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                number_.add(input.readInt32());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  number_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  number_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  processID_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                processID_.add(input.readInt32());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  processID_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  processID_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  mPI_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                mPI_.add(input.readInt32());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  mPI_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mPI_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  iD1_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                iD1_.add(input.readInt32());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  iD1_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  iD1_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  iD2_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                iD2_.add(input.readInt32());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  iD2_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  iD2_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 53: {
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  pDF1_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000020;
                }
                pDF1_.add(input.readFloat());
                break;
              }
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                  pDF1_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000020;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pDF1_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 61: {
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  pDF2_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000040;
                }
                pDF2_.add(input.readFloat());
                break;
              }
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                  pDF2_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000040;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pDF2_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 69: {
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                  x1_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000080;
                }
                x1_.add(input.readFloat());
                break;
              }
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                  x1_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000080;
                }
                while (input.getBytesUntilLimit() > 0) {
                  x1_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 77: {
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                  x2_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000100;
                }
                x2_.add(input.readFloat());
                break;
              }
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                  x2_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000100;
                }
                while (input.getBytesUntilLimit() > 0) {
                  x2_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 85: {
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                  scalePDF_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000200;
                }
                scalePDF_.add(input.readFloat());
                break;
              }
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                  scalePDF_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000200;
                }
                while (input.getBytesUntilLimit() > 0) {
                  scalePDF_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 93: {
                if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                  alphaQED_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000400;
                }
                alphaQED_.add(input.readFloat());
                break;
              }
              case 90: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                  alphaQED_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000400;
                }
                while (input.getBytesUntilLimit() > 0) {
                  alphaQED_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 101: {
                if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                  scale_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000800;
                }
                scale_.add(input.readFloat());
                break;
              }
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                  scale_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000800;
                }
                while (input.getBytesUntilLimit() > 0) {
                  scale_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 109: {
                if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                  alphaQCD_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00001000;
                }
                alphaQCD_.add(input.readFloat());
                break;
              }
              case 106: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                  alphaQCD_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00001000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  alphaQCD_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            number_ = java.util.Collections.unmodifiableList(number_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            processID_ = java.util.Collections.unmodifiableList(processID_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            mPI_ = java.util.Collections.unmodifiableList(mPI_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            iD1_ = java.util.Collections.unmodifiableList(iD1_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            iD2_ = java.util.Collections.unmodifiableList(iD2_);
          }
          if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
            pDF1_ = java.util.Collections.unmodifiableList(pDF1_);
          }
          if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
            pDF2_ = java.util.Collections.unmodifiableList(pDF2_);
          }
          if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
            x1_ = java.util.Collections.unmodifiableList(x1_);
          }
          if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
            x2_ = java.util.Collections.unmodifiableList(x2_);
          }
          if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
            scalePDF_ = java.util.Collections.unmodifiableList(scalePDF_);
          }
          if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
            alphaQED_ = java.util.Collections.unmodifiableList(alphaQED_);
          }
          if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
            scale_ = java.util.Collections.unmodifiableList(scale_);
          }
          if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
            alphaQCD_ = java.util.Collections.unmodifiableList(alphaQCD_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Event_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Event_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.Event.class, proreco.io.ProMC.ProMCEvent.Event.Builder.class);
      }

      public static com.google.protobuf.Parser<Event> PARSER =
          new com.google.protobuf.AbstractParser<Event>() {
        public Event parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Event(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Event> getParserForType() {
        return PARSER;
      }

      // repeated int32 Number = 1 [packed = true];
      public static final int NUMBER_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Integer> number_;
      /**
       * <code>repeated int32 Number = 1 [packed = true];</code>
       *
       * <pre>
       * Number 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getNumberList() {
        return number_;
      }
      /**
       * <code>repeated int32 Number = 1 [packed = true];</code>
       *
       * <pre>
       * Number 
       * </pre>
       */
      public int getNumberCount() {
        return number_.size();
      }
      /**
       * <code>repeated int32 Number = 1 [packed = true];</code>
       *
       * <pre>
       * Number 
       * </pre>
       */
      public int getNumber(int index) {
        return number_.get(index);
      }
      private int numberMemoizedSerializedSize = -1;

      // repeated int32 ProcessID = 2 [packed = true];
      public static final int PROCESSID_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Integer> processID_;
      /**
       * <code>repeated int32 ProcessID = 2 [packed = true];</code>
       *
       * <pre>
       * ID unique signal process id 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getProcessIDList() {
        return processID_;
      }
      /**
       * <code>repeated int32 ProcessID = 2 [packed = true];</code>
       *
       * <pre>
       * ID unique signal process id 
       * </pre>
       */
      public int getProcessIDCount() {
        return processID_.size();
      }
      /**
       * <code>repeated int32 ProcessID = 2 [packed = true];</code>
       *
       * <pre>
       * ID unique signal process id 
       * </pre>
       */
      public int getProcessID(int index) {
        return processID_.get(index);
      }
      private int processIDMemoizedSerializedSize = -1;

      // repeated int32 MPI = 3 [packed = true];
      public static final int MPI_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Integer> mPI_;
      /**
       * <code>repeated int32 MPI = 3 [packed = true];</code>
       *
       * <pre>
       * MPI number of multi parton interactions 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMPIList() {
        return mPI_;
      }
      /**
       * <code>repeated int32 MPI = 3 [packed = true];</code>
       *
       * <pre>
       * MPI number of multi parton interactions 
       * </pre>
       */
      public int getMPICount() {
        return mPI_.size();
      }
      /**
       * <code>repeated int32 MPI = 3 [packed = true];</code>
       *
       * <pre>
       * MPI number of multi parton interactions 
       * </pre>
       */
      public int getMPI(int index) {
        return mPI_.get(index);
      }
      private int mPIMemoizedSerializedSize = -1;

      // repeated int32 ID1 = 4 [packed = true];
      public static final int ID1_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Integer> iD1_;
      /**
       * <code>repeated int32 ID1 = 4 [packed = true];</code>
       *
       * <pre>
       * ID1 flavour code of first parton 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getID1List() {
        return iD1_;
      }
      /**
       * <code>repeated int32 ID1 = 4 [packed = true];</code>
       *
       * <pre>
       * ID1 flavour code of first parton 
       * </pre>
       */
      public int getID1Count() {
        return iD1_.size();
      }
      /**
       * <code>repeated int32 ID1 = 4 [packed = true];</code>
       *
       * <pre>
       * ID1 flavour code of first parton 
       * </pre>
       */
      public int getID1(int index) {
        return iD1_.get(index);
      }
      private int iD1MemoizedSerializedSize = -1;

      // repeated int32 ID2 = 5 [packed = true];
      public static final int ID2_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Integer> iD2_;
      /**
       * <code>repeated int32 ID2 = 5 [packed = true];</code>
       *
       * <pre>
       * ID2 flavour code of second parton 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getID2List() {
        return iD2_;
      }
      /**
       * <code>repeated int32 ID2 = 5 [packed = true];</code>
       *
       * <pre>
       * ID2 flavour code of second parton 
       * </pre>
       */
      public int getID2Count() {
        return iD2_.size();
      }
      /**
       * <code>repeated int32 ID2 = 5 [packed = true];</code>
       *
       * <pre>
       * ID2 flavour code of second parton 
       * </pre>
       */
      public int getID2(int index) {
        return iD2_.get(index);
      }
      private int iD2MemoizedSerializedSize = -1;

      // repeated float PDF1 = 6 [packed = true];
      public static final int PDF1_FIELD_NUMBER = 6;
      private java.util.List<java.lang.Float> pDF1_;
      /**
       * <code>repeated float PDF1 = 6 [packed = true];</code>
       *
       * <pre>
       * PDF1 PDF (id1, x1, Q)  
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getPDF1List() {
        return pDF1_;
      }
      /**
       * <code>repeated float PDF1 = 6 [packed = true];</code>
       *
       * <pre>
       * PDF1 PDF (id1, x1, Q)  
       * </pre>
       */
      public int getPDF1Count() {
        return pDF1_.size();
      }
      /**
       * <code>repeated float PDF1 = 6 [packed = true];</code>
       *
       * <pre>
       * PDF1 PDF (id1, x1, Q)  
       * </pre>
       */
      public float getPDF1(int index) {
        return pDF1_.get(index);
      }
      private int pDF1MemoizedSerializedSize = -1;

      // repeated float PDF2 = 7 [packed = true];
      public static final int PDF2_FIELD_NUMBER = 7;
      private java.util.List<java.lang.Float> pDF2_;
      /**
       * <code>repeated float PDF2 = 7 [packed = true];</code>
       *
       * <pre>
       * PDF2 PDF (id2, x2, Q)  
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getPDF2List() {
        return pDF2_;
      }
      /**
       * <code>repeated float PDF2 = 7 [packed = true];</code>
       *
       * <pre>
       * PDF2 PDF (id2, x2, Q)  
       * </pre>
       */
      public int getPDF2Count() {
        return pDF2_.size();
      }
      /**
       * <code>repeated float PDF2 = 7 [packed = true];</code>
       *
       * <pre>
       * PDF2 PDF (id2, x2, Q)  
       * </pre>
       */
      public float getPDF2(int index) {
        return pDF2_.get(index);
      }
      private int pDF2MemoizedSerializedSize = -1;

      // repeated float X1 = 8;
      public static final int X1_FIELD_NUMBER = 8;
      private java.util.List<java.lang.Float> x1_;
      /**
       * <code>repeated float X1 = 8;</code>
       *
       * <pre>
       * X1 fraction of beam momentum carried by first parton ("beam side")  
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getX1List() {
        return x1_;
      }
      /**
       * <code>repeated float X1 = 8;</code>
       *
       * <pre>
       * X1 fraction of beam momentum carried by first parton ("beam side")  
       * </pre>
       */
      public int getX1Count() {
        return x1_.size();
      }
      /**
       * <code>repeated float X1 = 8;</code>
       *
       * <pre>
       * X1 fraction of beam momentum carried by first parton ("beam side")  
       * </pre>
       */
      public float getX1(int index) {
        return x1_.get(index);
      }

      // repeated float X2 = 9;
      public static final int X2_FIELD_NUMBER = 9;
      private java.util.List<java.lang.Float> x2_;
      /**
       * <code>repeated float X2 = 9;</code>
       *
       * <pre>
       * X2 fraction of beam momentum carried by second parton ("target side")  
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getX2List() {
        return x2_;
      }
      /**
       * <code>repeated float X2 = 9;</code>
       *
       * <pre>
       * X2 fraction of beam momentum carried by second parton ("target side")  
       * </pre>
       */
      public int getX2Count() {
        return x2_.size();
      }
      /**
       * <code>repeated float X2 = 9;</code>
       *
       * <pre>
       * X2 fraction of beam momentum carried by second parton ("target side")  
       * </pre>
       */
      public float getX2(int index) {
        return x2_.get(index);
      }

      // repeated float ScalePDF = 10;
      public static final int SCALEPDF_FIELD_NUMBER = 10;
      private java.util.List<java.lang.Float> scalePDF_;
      /**
       * <code>repeated float ScalePDF = 10;</code>
       *
       * <pre>
       * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getScalePDFList() {
        return scalePDF_;
      }
      /**
       * <code>repeated float ScalePDF = 10;</code>
       *
       * <pre>
       * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
       * </pre>
       */
      public int getScalePDFCount() {
        return scalePDF_.size();
      }
      /**
       * <code>repeated float ScalePDF = 10;</code>
       *
       * <pre>
       * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
       * </pre>
       */
      public float getScalePDF(int index) {
        return scalePDF_.get(index);
      }

      // repeated float AlphaQED = 11;
      public static final int ALPHAQED_FIELD_NUMBER = 11;
      private java.util.List<java.lang.Float> alphaQED_;
      /**
       * <code>repeated float AlphaQED = 11;</code>
       *
       * <pre>
       * AlphaQED QED coupling, see hep-ph/0109068  
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getAlphaQEDList() {
        return alphaQED_;
      }
      /**
       * <code>repeated float AlphaQED = 11;</code>
       *
       * <pre>
       * AlphaQED QED coupling, see hep-ph/0109068  
       * </pre>
       */
      public int getAlphaQEDCount() {
        return alphaQED_.size();
      }
      /**
       * <code>repeated float AlphaQED = 11;</code>
       *
       * <pre>
       * AlphaQED QED coupling, see hep-ph/0109068  
       * </pre>
       */
      public float getAlphaQED(int index) {
        return alphaQED_.get(index);
      }

      // repeated float Scale = 12;
      public static final int SCALE_FIELD_NUMBER = 12;
      private java.util.List<java.lang.Float> scale_;
      /**
       * <code>repeated float Scale = 12;</code>
       *
       * <pre>
       * Scale   energy scale, see hep-ph/0109068 
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getScaleList() {
        return scale_;
      }
      /**
       * <code>repeated float Scale = 12;</code>
       *
       * <pre>
       * Scale   energy scale, see hep-ph/0109068 
       * </pre>
       */
      public int getScaleCount() {
        return scale_.size();
      }
      /**
       * <code>repeated float Scale = 12;</code>
       *
       * <pre>
       * Scale   energy scale, see hep-ph/0109068 
       * </pre>
       */
      public float getScale(int index) {
        return scale_.get(index);
      }

      // repeated float AlphaQCD = 13;
      public static final int ALPHAQCD_FIELD_NUMBER = 13;
      private java.util.List<java.lang.Float> alphaQCD_;
      /**
       * <code>repeated float AlphaQCD = 13;</code>
       *
       * <pre>
       * QCD coupling, see hep-ph/0109068
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getAlphaQCDList() {
        return alphaQCD_;
      }
      /**
       * <code>repeated float AlphaQCD = 13;</code>
       *
       * <pre>
       * QCD coupling, see hep-ph/0109068
       * </pre>
       */
      public int getAlphaQCDCount() {
        return alphaQCD_.size();
      }
      /**
       * <code>repeated float AlphaQCD = 13;</code>
       *
       * <pre>
       * QCD coupling, see hep-ph/0109068
       * </pre>
       */
      public float getAlphaQCD(int index) {
        return alphaQCD_.get(index);
      }

      private void initFields() {
        number_ = java.util.Collections.emptyList();
        processID_ = java.util.Collections.emptyList();
        mPI_ = java.util.Collections.emptyList();
        iD1_ = java.util.Collections.emptyList();
        iD2_ = java.util.Collections.emptyList();
        pDF1_ = java.util.Collections.emptyList();
        pDF2_ = java.util.Collections.emptyList();
        x1_ = java.util.Collections.emptyList();
        x2_ = java.util.Collections.emptyList();
        scalePDF_ = java.util.Collections.emptyList();
        alphaQED_ = java.util.Collections.emptyList();
        scale_ = java.util.Collections.emptyList();
        alphaQCD_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getNumberList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(numberMemoizedSerializedSize);
        }
        for (int i = 0; i < number_.size(); i++) {
          output.writeInt32NoTag(number_.get(i));
        }
        if (getProcessIDList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(processIDMemoizedSerializedSize);
        }
        for (int i = 0; i < processID_.size(); i++) {
          output.writeInt32NoTag(processID_.get(i));
        }
        if (getMPIList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(mPIMemoizedSerializedSize);
        }
        for (int i = 0; i < mPI_.size(); i++) {
          output.writeInt32NoTag(mPI_.get(i));
        }
        if (getID1List().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(iD1MemoizedSerializedSize);
        }
        for (int i = 0; i < iD1_.size(); i++) {
          output.writeInt32NoTag(iD1_.get(i));
        }
        if (getID2List().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(iD2MemoizedSerializedSize);
        }
        for (int i = 0; i < iD2_.size(); i++) {
          output.writeInt32NoTag(iD2_.get(i));
        }
        if (getPDF1List().size() > 0) {
          output.writeRawVarint32(50);
          output.writeRawVarint32(pDF1MemoizedSerializedSize);
        }
        for (int i = 0; i < pDF1_.size(); i++) {
          output.writeFloatNoTag(pDF1_.get(i));
        }
        if (getPDF2List().size() > 0) {
          output.writeRawVarint32(58);
          output.writeRawVarint32(pDF2MemoizedSerializedSize);
        }
        for (int i = 0; i < pDF2_.size(); i++) {
          output.writeFloatNoTag(pDF2_.get(i));
        }
        for (int i = 0; i < x1_.size(); i++) {
          output.writeFloat(8, x1_.get(i));
        }
        for (int i = 0; i < x2_.size(); i++) {
          output.writeFloat(9, x2_.get(i));
        }
        for (int i = 0; i < scalePDF_.size(); i++) {
          output.writeFloat(10, scalePDF_.get(i));
        }
        for (int i = 0; i < alphaQED_.size(); i++) {
          output.writeFloat(11, alphaQED_.get(i));
        }
        for (int i = 0; i < scale_.size(); i++) {
          output.writeFloat(12, scale_.get(i));
        }
        for (int i = 0; i < alphaQCD_.size(); i++) {
          output.writeFloat(13, alphaQCD_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < number_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(number_.get(i));
          }
          size += dataSize;
          if (!getNumberList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          numberMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < processID_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(processID_.get(i));
          }
          size += dataSize;
          if (!getProcessIDList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          processIDMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < mPI_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(mPI_.get(i));
          }
          size += dataSize;
          if (!getMPIList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          mPIMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < iD1_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(iD1_.get(i));
          }
          size += dataSize;
          if (!getID1List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          iD1MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < iD2_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(iD2_.get(i));
          }
          size += dataSize;
          if (!getID2List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          iD2MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * getPDF1List().size();
          size += dataSize;
          if (!getPDF1List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pDF1MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * getPDF2List().size();
          size += dataSize;
          if (!getPDF2List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pDF2MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * getX1List().size();
          size += dataSize;
          size += 1 * getX1List().size();
        }
        {
          int dataSize = 0;
          dataSize = 4 * getX2List().size();
          size += dataSize;
          size += 1 * getX2List().size();
        }
        {
          int dataSize = 0;
          dataSize = 4 * getScalePDFList().size();
          size += dataSize;
          size += 1 * getScalePDFList().size();
        }
        {
          int dataSize = 0;
          dataSize = 4 * getAlphaQEDList().size();
          size += dataSize;
          size += 1 * getAlphaQEDList().size();
        }
        {
          int dataSize = 0;
          dataSize = 4 * getScaleList().size();
          size += dataSize;
          size += 1 * getScaleList().size();
        }
        {
          int dataSize = 0;
          dataSize = 4 * getAlphaQCDList().size();
          size += dataSize;
          size += 1 * getAlphaQCDList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static proreco.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Event parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Event parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Event parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Event parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Event parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Event parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Event parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proreco.io.ProMC.ProMCEvent.Event prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Event}
       *
       * <pre>
       * Event 
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements proreco.io.ProMC.ProMCEvent.EventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Event_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Event_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  proreco.io.ProMC.ProMCEvent.Event.class, proreco.io.ProMC.ProMCEvent.Event.Builder.class);
        }

        // Construct using proreco.io.ProMC.ProMCEvent.Event.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          number_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          processID_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          mPI_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          iD1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          iD2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          pDF1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          pDF2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          x1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          x2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          scalePDF_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          alphaQED_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          scale_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          alphaQCD_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Event_descriptor;
        }

        public proreco.io.ProMC.ProMCEvent.Event getDefaultInstanceForType() {
          return proreco.io.ProMC.ProMCEvent.Event.getDefaultInstance();
        }

        public proreco.io.ProMC.ProMCEvent.Event build() {
          proreco.io.ProMC.ProMCEvent.Event result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public proreco.io.ProMC.ProMCEvent.Event buildPartial() {
          proreco.io.ProMC.ProMCEvent.Event result = new proreco.io.ProMC.ProMCEvent.Event(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            number_ = java.util.Collections.unmodifiableList(number_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.number_ = number_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            processID_ = java.util.Collections.unmodifiableList(processID_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.processID_ = processID_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            mPI_ = java.util.Collections.unmodifiableList(mPI_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.mPI_ = mPI_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            iD1_ = java.util.Collections.unmodifiableList(iD1_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.iD1_ = iD1_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            iD2_ = java.util.Collections.unmodifiableList(iD2_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.iD2_ = iD2_;
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            pDF1_ = java.util.Collections.unmodifiableList(pDF1_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.pDF1_ = pDF1_;
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            pDF2_ = java.util.Collections.unmodifiableList(pDF2_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.pDF2_ = pDF2_;
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            x1_ = java.util.Collections.unmodifiableList(x1_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.x1_ = x1_;
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            x2_ = java.util.Collections.unmodifiableList(x2_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.x2_ = x2_;
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            scalePDF_ = java.util.Collections.unmodifiableList(scalePDF_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.scalePDF_ = scalePDF_;
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            alphaQED_ = java.util.Collections.unmodifiableList(alphaQED_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.alphaQED_ = alphaQED_;
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            scale_ = java.util.Collections.unmodifiableList(scale_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.scale_ = scale_;
          if (((bitField0_ & 0x00001000) == 0x00001000)) {
            alphaQCD_ = java.util.Collections.unmodifiableList(alphaQCD_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.alphaQCD_ = alphaQCD_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof proreco.io.ProMC.ProMCEvent.Event) {
            return mergeFrom((proreco.io.ProMC.ProMCEvent.Event)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(proreco.io.ProMC.ProMCEvent.Event other) {
          if (other == proreco.io.ProMC.ProMCEvent.Event.getDefaultInstance()) return this;
          if (!other.number_.isEmpty()) {
            if (number_.isEmpty()) {
              number_ = other.number_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureNumberIsMutable();
              number_.addAll(other.number_);
            }
            onChanged();
          }
          if (!other.processID_.isEmpty()) {
            if (processID_.isEmpty()) {
              processID_ = other.processID_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureProcessIDIsMutable();
              processID_.addAll(other.processID_);
            }
            onChanged();
          }
          if (!other.mPI_.isEmpty()) {
            if (mPI_.isEmpty()) {
              mPI_ = other.mPI_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureMPIIsMutable();
              mPI_.addAll(other.mPI_);
            }
            onChanged();
          }
          if (!other.iD1_.isEmpty()) {
            if (iD1_.isEmpty()) {
              iD1_ = other.iD1_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureID1IsMutable();
              iD1_.addAll(other.iD1_);
            }
            onChanged();
          }
          if (!other.iD2_.isEmpty()) {
            if (iD2_.isEmpty()) {
              iD2_ = other.iD2_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureID2IsMutable();
              iD2_.addAll(other.iD2_);
            }
            onChanged();
          }
          if (!other.pDF1_.isEmpty()) {
            if (pDF1_.isEmpty()) {
              pDF1_ = other.pDF1_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensurePDF1IsMutable();
              pDF1_.addAll(other.pDF1_);
            }
            onChanged();
          }
          if (!other.pDF2_.isEmpty()) {
            if (pDF2_.isEmpty()) {
              pDF2_ = other.pDF2_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensurePDF2IsMutable();
              pDF2_.addAll(other.pDF2_);
            }
            onChanged();
          }
          if (!other.x1_.isEmpty()) {
            if (x1_.isEmpty()) {
              x1_ = other.x1_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureX1IsMutable();
              x1_.addAll(other.x1_);
            }
            onChanged();
          }
          if (!other.x2_.isEmpty()) {
            if (x2_.isEmpty()) {
              x2_ = other.x2_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureX2IsMutable();
              x2_.addAll(other.x2_);
            }
            onChanged();
          }
          if (!other.scalePDF_.isEmpty()) {
            if (scalePDF_.isEmpty()) {
              scalePDF_ = other.scalePDF_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureScalePDFIsMutable();
              scalePDF_.addAll(other.scalePDF_);
            }
            onChanged();
          }
          if (!other.alphaQED_.isEmpty()) {
            if (alphaQED_.isEmpty()) {
              alphaQED_ = other.alphaQED_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureAlphaQEDIsMutable();
              alphaQED_.addAll(other.alphaQED_);
            }
            onChanged();
          }
          if (!other.scale_.isEmpty()) {
            if (scale_.isEmpty()) {
              scale_ = other.scale_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureScaleIsMutable();
              scale_.addAll(other.scale_);
            }
            onChanged();
          }
          if (!other.alphaQCD_.isEmpty()) {
            if (alphaQCD_.isEmpty()) {
              alphaQCD_ = other.alphaQCD_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensureAlphaQCDIsMutable();
              alphaQCD_.addAll(other.alphaQCD_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          proreco.io.ProMC.ProMCEvent.Event parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (proreco.io.ProMC.ProMCEvent.Event) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated int32 Number = 1 [packed = true];
        private java.util.List<java.lang.Integer> number_ = java.util.Collections.emptyList();
        private void ensureNumberIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            number_ = new java.util.ArrayList<java.lang.Integer>(number_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated int32 Number = 1 [packed = true];</code>
         *
         * <pre>
         * Number 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getNumberList() {
          return java.util.Collections.unmodifiableList(number_);
        }
        /**
         * <code>repeated int32 Number = 1 [packed = true];</code>
         *
         * <pre>
         * Number 
         * </pre>
         */
        public int getNumberCount() {
          return number_.size();
        }
        /**
         * <code>repeated int32 Number = 1 [packed = true];</code>
         *
         * <pre>
         * Number 
         * </pre>
         */
        public int getNumber(int index) {
          return number_.get(index);
        }
        /**
         * <code>repeated int32 Number = 1 [packed = true];</code>
         *
         * <pre>
         * Number 
         * </pre>
         */
        public Builder setNumber(
            int index, int value) {
          ensureNumberIsMutable();
          number_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 Number = 1 [packed = true];</code>
         *
         * <pre>
         * Number 
         * </pre>
         */
        public Builder addNumber(int value) {
          ensureNumberIsMutable();
          number_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 Number = 1 [packed = true];</code>
         *
         * <pre>
         * Number 
         * </pre>
         */
        public Builder addAllNumber(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureNumberIsMutable();
          super.addAll(values, number_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 Number = 1 [packed = true];</code>
         *
         * <pre>
         * Number 
         * </pre>
         */
        public Builder clearNumber() {
          number_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated int32 ProcessID = 2 [packed = true];
        private java.util.List<java.lang.Integer> processID_ = java.util.Collections.emptyList();
        private void ensureProcessIDIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            processID_ = new java.util.ArrayList<java.lang.Integer>(processID_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated int32 ProcessID = 2 [packed = true];</code>
         *
         * <pre>
         * ID unique signal process id 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getProcessIDList() {
          return java.util.Collections.unmodifiableList(processID_);
        }
        /**
         * <code>repeated int32 ProcessID = 2 [packed = true];</code>
         *
         * <pre>
         * ID unique signal process id 
         * </pre>
         */
        public int getProcessIDCount() {
          return processID_.size();
        }
        /**
         * <code>repeated int32 ProcessID = 2 [packed = true];</code>
         *
         * <pre>
         * ID unique signal process id 
         * </pre>
         */
        public int getProcessID(int index) {
          return processID_.get(index);
        }
        /**
         * <code>repeated int32 ProcessID = 2 [packed = true];</code>
         *
         * <pre>
         * ID unique signal process id 
         * </pre>
         */
        public Builder setProcessID(
            int index, int value) {
          ensureProcessIDIsMutable();
          processID_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 ProcessID = 2 [packed = true];</code>
         *
         * <pre>
         * ID unique signal process id 
         * </pre>
         */
        public Builder addProcessID(int value) {
          ensureProcessIDIsMutable();
          processID_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 ProcessID = 2 [packed = true];</code>
         *
         * <pre>
         * ID unique signal process id 
         * </pre>
         */
        public Builder addAllProcessID(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureProcessIDIsMutable();
          super.addAll(values, processID_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 ProcessID = 2 [packed = true];</code>
         *
         * <pre>
         * ID unique signal process id 
         * </pre>
         */
        public Builder clearProcessID() {
          processID_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated int32 MPI = 3 [packed = true];
        private java.util.List<java.lang.Integer> mPI_ = java.util.Collections.emptyList();
        private void ensureMPIIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            mPI_ = new java.util.ArrayList<java.lang.Integer>(mPI_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated int32 MPI = 3 [packed = true];</code>
         *
         * <pre>
         * MPI number of multi parton interactions 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getMPIList() {
          return java.util.Collections.unmodifiableList(mPI_);
        }
        /**
         * <code>repeated int32 MPI = 3 [packed = true];</code>
         *
         * <pre>
         * MPI number of multi parton interactions 
         * </pre>
         */
        public int getMPICount() {
          return mPI_.size();
        }
        /**
         * <code>repeated int32 MPI = 3 [packed = true];</code>
         *
         * <pre>
         * MPI number of multi parton interactions 
         * </pre>
         */
        public int getMPI(int index) {
          return mPI_.get(index);
        }
        /**
         * <code>repeated int32 MPI = 3 [packed = true];</code>
         *
         * <pre>
         * MPI number of multi parton interactions 
         * </pre>
         */
        public Builder setMPI(
            int index, int value) {
          ensureMPIIsMutable();
          mPI_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 MPI = 3 [packed = true];</code>
         *
         * <pre>
         * MPI number of multi parton interactions 
         * </pre>
         */
        public Builder addMPI(int value) {
          ensureMPIIsMutable();
          mPI_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 MPI = 3 [packed = true];</code>
         *
         * <pre>
         * MPI number of multi parton interactions 
         * </pre>
         */
        public Builder addAllMPI(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureMPIIsMutable();
          super.addAll(values, mPI_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 MPI = 3 [packed = true];</code>
         *
         * <pre>
         * MPI number of multi parton interactions 
         * </pre>
         */
        public Builder clearMPI() {
          mPI_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated int32 ID1 = 4 [packed = true];
        private java.util.List<java.lang.Integer> iD1_ = java.util.Collections.emptyList();
        private void ensureID1IsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            iD1_ = new java.util.ArrayList<java.lang.Integer>(iD1_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated int32 ID1 = 4 [packed = true];</code>
         *
         * <pre>
         * ID1 flavour code of first parton 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getID1List() {
          return java.util.Collections.unmodifiableList(iD1_);
        }
        /**
         * <code>repeated int32 ID1 = 4 [packed = true];</code>
         *
         * <pre>
         * ID1 flavour code of first parton 
         * </pre>
         */
        public int getID1Count() {
          return iD1_.size();
        }
        /**
         * <code>repeated int32 ID1 = 4 [packed = true];</code>
         *
         * <pre>
         * ID1 flavour code of first parton 
         * </pre>
         */
        public int getID1(int index) {
          return iD1_.get(index);
        }
        /**
         * <code>repeated int32 ID1 = 4 [packed = true];</code>
         *
         * <pre>
         * ID1 flavour code of first parton 
         * </pre>
         */
        public Builder setID1(
            int index, int value) {
          ensureID1IsMutable();
          iD1_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 ID1 = 4 [packed = true];</code>
         *
         * <pre>
         * ID1 flavour code of first parton 
         * </pre>
         */
        public Builder addID1(int value) {
          ensureID1IsMutable();
          iD1_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 ID1 = 4 [packed = true];</code>
         *
         * <pre>
         * ID1 flavour code of first parton 
         * </pre>
         */
        public Builder addAllID1(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureID1IsMutable();
          super.addAll(values, iD1_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 ID1 = 4 [packed = true];</code>
         *
         * <pre>
         * ID1 flavour code of first parton 
         * </pre>
         */
        public Builder clearID1() {
          iD1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // repeated int32 ID2 = 5 [packed = true];
        private java.util.List<java.lang.Integer> iD2_ = java.util.Collections.emptyList();
        private void ensureID2IsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            iD2_ = new java.util.ArrayList<java.lang.Integer>(iD2_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated int32 ID2 = 5 [packed = true];</code>
         *
         * <pre>
         * ID2 flavour code of second parton 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getID2List() {
          return java.util.Collections.unmodifiableList(iD2_);
        }
        /**
         * <code>repeated int32 ID2 = 5 [packed = true];</code>
         *
         * <pre>
         * ID2 flavour code of second parton 
         * </pre>
         */
        public int getID2Count() {
          return iD2_.size();
        }
        /**
         * <code>repeated int32 ID2 = 5 [packed = true];</code>
         *
         * <pre>
         * ID2 flavour code of second parton 
         * </pre>
         */
        public int getID2(int index) {
          return iD2_.get(index);
        }
        /**
         * <code>repeated int32 ID2 = 5 [packed = true];</code>
         *
         * <pre>
         * ID2 flavour code of second parton 
         * </pre>
         */
        public Builder setID2(
            int index, int value) {
          ensureID2IsMutable();
          iD2_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 ID2 = 5 [packed = true];</code>
         *
         * <pre>
         * ID2 flavour code of second parton 
         * </pre>
         */
        public Builder addID2(int value) {
          ensureID2IsMutable();
          iD2_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 ID2 = 5 [packed = true];</code>
         *
         * <pre>
         * ID2 flavour code of second parton 
         * </pre>
         */
        public Builder addAllID2(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureID2IsMutable();
          super.addAll(values, iD2_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 ID2 = 5 [packed = true];</code>
         *
         * <pre>
         * ID2 flavour code of second parton 
         * </pre>
         */
        public Builder clearID2() {
          iD2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        // repeated float PDF1 = 6 [packed = true];
        private java.util.List<java.lang.Float> pDF1_ = java.util.Collections.emptyList();
        private void ensurePDF1IsMutable() {
          if (!((bitField0_ & 0x00000020) == 0x00000020)) {
            pDF1_ = new java.util.ArrayList<java.lang.Float>(pDF1_);
            bitField0_ |= 0x00000020;
           }
        }
        /**
         * <code>repeated float PDF1 = 6 [packed = true];</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)  
         * </pre>
         */
        public java.util.List<java.lang.Float>
            getPDF1List() {
          return java.util.Collections.unmodifiableList(pDF1_);
        }
        /**
         * <code>repeated float PDF1 = 6 [packed = true];</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)  
         * </pre>
         */
        public int getPDF1Count() {
          return pDF1_.size();
        }
        /**
         * <code>repeated float PDF1 = 6 [packed = true];</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)  
         * </pre>
         */
        public float getPDF1(int index) {
          return pDF1_.get(index);
        }
        /**
         * <code>repeated float PDF1 = 6 [packed = true];</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)  
         * </pre>
         */
        public Builder setPDF1(
            int index, float value) {
          ensurePDF1IsMutable();
          pDF1_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float PDF1 = 6 [packed = true];</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)  
         * </pre>
         */
        public Builder addPDF1(float value) {
          ensurePDF1IsMutable();
          pDF1_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float PDF1 = 6 [packed = true];</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)  
         * </pre>
         */
        public Builder addAllPDF1(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensurePDF1IsMutable();
          super.addAll(values, pDF1_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float PDF1 = 6 [packed = true];</code>
         *
         * <pre>
         * PDF1 PDF (id1, x1, Q)  
         * </pre>
         */
        public Builder clearPDF1() {
          pDF1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        // repeated float PDF2 = 7 [packed = true];
        private java.util.List<java.lang.Float> pDF2_ = java.util.Collections.emptyList();
        private void ensurePDF2IsMutable() {
          if (!((bitField0_ & 0x00000040) == 0x00000040)) {
            pDF2_ = new java.util.ArrayList<java.lang.Float>(pDF2_);
            bitField0_ |= 0x00000040;
           }
        }
        /**
         * <code>repeated float PDF2 = 7 [packed = true];</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)  
         * </pre>
         */
        public java.util.List<java.lang.Float>
            getPDF2List() {
          return java.util.Collections.unmodifiableList(pDF2_);
        }
        /**
         * <code>repeated float PDF2 = 7 [packed = true];</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)  
         * </pre>
         */
        public int getPDF2Count() {
          return pDF2_.size();
        }
        /**
         * <code>repeated float PDF2 = 7 [packed = true];</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)  
         * </pre>
         */
        public float getPDF2(int index) {
          return pDF2_.get(index);
        }
        /**
         * <code>repeated float PDF2 = 7 [packed = true];</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)  
         * </pre>
         */
        public Builder setPDF2(
            int index, float value) {
          ensurePDF2IsMutable();
          pDF2_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float PDF2 = 7 [packed = true];</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)  
         * </pre>
         */
        public Builder addPDF2(float value) {
          ensurePDF2IsMutable();
          pDF2_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float PDF2 = 7 [packed = true];</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)  
         * </pre>
         */
        public Builder addAllPDF2(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensurePDF2IsMutable();
          super.addAll(values, pDF2_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float PDF2 = 7 [packed = true];</code>
         *
         * <pre>
         * PDF2 PDF (id2, x2, Q)  
         * </pre>
         */
        public Builder clearPDF2() {
          pDF2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }

        // repeated float X1 = 8;
        private java.util.List<java.lang.Float> x1_ = java.util.Collections.emptyList();
        private void ensureX1IsMutable() {
          if (!((bitField0_ & 0x00000080) == 0x00000080)) {
            x1_ = new java.util.ArrayList<java.lang.Float>(x1_);
            bitField0_ |= 0x00000080;
           }
        }
        /**
         * <code>repeated float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")  
         * </pre>
         */
        public java.util.List<java.lang.Float>
            getX1List() {
          return java.util.Collections.unmodifiableList(x1_);
        }
        /**
         * <code>repeated float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")  
         * </pre>
         */
        public int getX1Count() {
          return x1_.size();
        }
        /**
         * <code>repeated float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")  
         * </pre>
         */
        public float getX1(int index) {
          return x1_.get(index);
        }
        /**
         * <code>repeated float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")  
         * </pre>
         */
        public Builder setX1(
            int index, float value) {
          ensureX1IsMutable();
          x1_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")  
         * </pre>
         */
        public Builder addX1(float value) {
          ensureX1IsMutable();
          x1_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")  
         * </pre>
         */
        public Builder addAllX1(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureX1IsMutable();
          super.addAll(values, x1_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float X1 = 8;</code>
         *
         * <pre>
         * X1 fraction of beam momentum carried by first parton ("beam side")  
         * </pre>
         */
        public Builder clearX1() {
          x1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
          return this;
        }

        // repeated float X2 = 9;
        private java.util.List<java.lang.Float> x2_ = java.util.Collections.emptyList();
        private void ensureX2IsMutable() {
          if (!((bitField0_ & 0x00000100) == 0x00000100)) {
            x2_ = new java.util.ArrayList<java.lang.Float>(x2_);
            bitField0_ |= 0x00000100;
           }
        }
        /**
         * <code>repeated float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")  
         * </pre>
         */
        public java.util.List<java.lang.Float>
            getX2List() {
          return java.util.Collections.unmodifiableList(x2_);
        }
        /**
         * <code>repeated float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")  
         * </pre>
         */
        public int getX2Count() {
          return x2_.size();
        }
        /**
         * <code>repeated float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")  
         * </pre>
         */
        public float getX2(int index) {
          return x2_.get(index);
        }
        /**
         * <code>repeated float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")  
         * </pre>
         */
        public Builder setX2(
            int index, float value) {
          ensureX2IsMutable();
          x2_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")  
         * </pre>
         */
        public Builder addX2(float value) {
          ensureX2IsMutable();
          x2_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")  
         * </pre>
         */
        public Builder addAllX2(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureX2IsMutable();
          super.addAll(values, x2_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float X2 = 9;</code>
         *
         * <pre>
         * X2 fraction of beam momentum carried by second parton ("target side")  
         * </pre>
         */
        public Builder clearX2() {
          x2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }

        // repeated float ScalePDF = 10;
        private java.util.List<java.lang.Float> scalePDF_ = java.util.Collections.emptyList();
        private void ensureScalePDFIsMutable() {
          if (!((bitField0_ & 0x00000200) == 0x00000200)) {
            scalePDF_ = new java.util.ArrayList<java.lang.Float>(scalePDF_);
            bitField0_ |= 0x00000200;
           }
        }
        /**
         * <code>repeated float ScalePDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
         * </pre>
         */
        public java.util.List<java.lang.Float>
            getScalePDFList() {
          return java.util.Collections.unmodifiableList(scalePDF_);
        }
        /**
         * <code>repeated float ScalePDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
         * </pre>
         */
        public int getScalePDFCount() {
          return scalePDF_.size();
        }
        /**
         * <code>repeated float ScalePDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
         * </pre>
         */
        public float getScalePDF(int index) {
          return scalePDF_.get(index);
        }
        /**
         * <code>repeated float ScalePDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
         * </pre>
         */
        public Builder setScalePDF(
            int index, float value) {
          ensureScalePDFIsMutable();
          scalePDF_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float ScalePDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
         * </pre>
         */
        public Builder addScalePDF(float value) {
          ensureScalePDFIsMutable();
          scalePDF_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float ScalePDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
         * </pre>
         */
        public Builder addAllScalePDF(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureScalePDFIsMutable();
          super.addAll(values, scalePDF_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float ScalePDF = 10;</code>
         *
         * <pre>
         * Scale PDF Q-scale used in evaluation of PDF's (in GeV) | 
         * </pre>
         */
        public Builder clearScalePDF() {
          scalePDF_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
          return this;
        }

        // repeated float AlphaQED = 11;
        private java.util.List<java.lang.Float> alphaQED_ = java.util.Collections.emptyList();
        private void ensureAlphaQEDIsMutable() {
          if (!((bitField0_ & 0x00000400) == 0x00000400)) {
            alphaQED_ = new java.util.ArrayList<java.lang.Float>(alphaQED_);
            bitField0_ |= 0x00000400;
           }
        }
        /**
         * <code>repeated float AlphaQED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068  
         * </pre>
         */
        public java.util.List<java.lang.Float>
            getAlphaQEDList() {
          return java.util.Collections.unmodifiableList(alphaQED_);
        }
        /**
         * <code>repeated float AlphaQED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068  
         * </pre>
         */
        public int getAlphaQEDCount() {
          return alphaQED_.size();
        }
        /**
         * <code>repeated float AlphaQED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068  
         * </pre>
         */
        public float getAlphaQED(int index) {
          return alphaQED_.get(index);
        }
        /**
         * <code>repeated float AlphaQED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068  
         * </pre>
         */
        public Builder setAlphaQED(
            int index, float value) {
          ensureAlphaQEDIsMutable();
          alphaQED_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float AlphaQED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068  
         * </pre>
         */
        public Builder addAlphaQED(float value) {
          ensureAlphaQEDIsMutable();
          alphaQED_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float AlphaQED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068  
         * </pre>
         */
        public Builder addAllAlphaQED(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureAlphaQEDIsMutable();
          super.addAll(values, alphaQED_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float AlphaQED = 11;</code>
         *
         * <pre>
         * AlphaQED QED coupling, see hep-ph/0109068  
         * </pre>
         */
        public Builder clearAlphaQED() {
          alphaQED_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
          return this;
        }

        // repeated float Scale = 12;
        private java.util.List<java.lang.Float> scale_ = java.util.Collections.emptyList();
        private void ensureScaleIsMutable() {
          if (!((bitField0_ & 0x00000800) == 0x00000800)) {
            scale_ = new java.util.ArrayList<java.lang.Float>(scale_);
            bitField0_ |= 0x00000800;
           }
        }
        /**
         * <code>repeated float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068 
         * </pre>
         */
        public java.util.List<java.lang.Float>
            getScaleList() {
          return java.util.Collections.unmodifiableList(scale_);
        }
        /**
         * <code>repeated float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068 
         * </pre>
         */
        public int getScaleCount() {
          return scale_.size();
        }
        /**
         * <code>repeated float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068 
         * </pre>
         */
        public float getScale(int index) {
          return scale_.get(index);
        }
        /**
         * <code>repeated float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068 
         * </pre>
         */
        public Builder setScale(
            int index, float value) {
          ensureScaleIsMutable();
          scale_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068 
         * </pre>
         */
        public Builder addScale(float value) {
          ensureScaleIsMutable();
          scale_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068 
         * </pre>
         */
        public Builder addAllScale(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureScaleIsMutable();
          super.addAll(values, scale_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float Scale = 12;</code>
         *
         * <pre>
         * Scale   energy scale, see hep-ph/0109068 
         * </pre>
         */
        public Builder clearScale() {
          scale_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
          return this;
        }

        // repeated float AlphaQCD = 13;
        private java.util.List<java.lang.Float> alphaQCD_ = java.util.Collections.emptyList();
        private void ensureAlphaQCDIsMutable() {
          if (!((bitField0_ & 0x00001000) == 0x00001000)) {
            alphaQCD_ = new java.util.ArrayList<java.lang.Float>(alphaQCD_);
            bitField0_ |= 0x00001000;
           }
        }
        /**
         * <code>repeated float AlphaQCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public java.util.List<java.lang.Float>
            getAlphaQCDList() {
          return java.util.Collections.unmodifiableList(alphaQCD_);
        }
        /**
         * <code>repeated float AlphaQCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public int getAlphaQCDCount() {
          return alphaQCD_.size();
        }
        /**
         * <code>repeated float AlphaQCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public float getAlphaQCD(int index) {
          return alphaQCD_.get(index);
        }
        /**
         * <code>repeated float AlphaQCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public Builder setAlphaQCD(
            int index, float value) {
          ensureAlphaQCDIsMutable();
          alphaQCD_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float AlphaQCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public Builder addAlphaQCD(float value) {
          ensureAlphaQCDIsMutable();
          alphaQCD_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float AlphaQCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public Builder addAllAlphaQCD(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureAlphaQCDIsMutable();
          super.addAll(values, alphaQCD_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float AlphaQCD = 13;</code>
         *
         * <pre>
         * QCD coupling, see hep-ph/0109068
         * </pre>
         */
        public Builder clearAlphaQCD() {
          alphaQCD_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Event)
      }

      static {
        defaultInstance = new Event(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Event)
    }

    public interface ParticlesOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint32 id = 1 [packed = true];
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      java.util.List<java.lang.Integer> getIdList();
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      int getIdCount();
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      int getId(int index);

      // repeated sint32 pdg_id = 2 [packed = true];
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type
       * </pre>
       */
      java.util.List<java.lang.Integer> getPdgIdList();
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type
       * </pre>
       */
      int getPdgIdCount();
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type
       * </pre>
       */
      int getPdgId(int index);

      // repeated uint32 status = 3 [packed = true];
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not)
       * </pre>
       */
      java.util.List<java.lang.Integer> getStatusList();
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not)
       * </pre>
       */
      int getStatusCount();
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not)
       * </pre>
       */
      int getStatus(int index);

      // repeated uint64 mass = 4 [packed = true];
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass
       * </pre>
       */
      java.util.List<java.lang.Long> getMassList();
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass
       * </pre>
       */
      int getMassCount();
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass
       * </pre>
       */
      long getMass(int index);

      // repeated sint64 Px = 5 [packed = true];
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX
       * </pre>
       */
      java.util.List<java.lang.Long> getPxList();
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX
       * </pre>
       */
      int getPxCount();
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX
       * </pre>
       */
      long getPx(int index);

      // repeated sint64 Py = 6 [packed = true];
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY
       * </pre>
       */
      java.util.List<java.lang.Long> getPyList();
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY
       * </pre>
       */
      int getPyCount();
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY
       * </pre>
       */
      long getPy(int index);

      // repeated sint64 Pz = 7 [packed = true];
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      java.util.List<java.lang.Long> getPzList();
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      int getPzCount();
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      long getPz(int index);

      // repeated uint32 mother1 = 8 [packed = true];
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother
       * </pre>
       */
      java.util.List<java.lang.Integer> getMother1List();
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother
       * </pre>
       */
      int getMother1Count();
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother
       * </pre>
       */
      int getMother1(int index);

      // repeated uint32 mother2 = 9 [packed = true];
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother
       * </pre>
       */
      java.util.List<java.lang.Integer> getMother2List();
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother
       * </pre>
       */
      int getMother2Count();
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother
       * </pre>
       */
      int getMother2(int index);

      // repeated uint32 daughter1 = 10 [packed = true];
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter
       * </pre>
       */
      java.util.List<java.lang.Integer> getDaughter1List();
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter
       * </pre>
       */
      int getDaughter1Count();
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter
       * </pre>
       */
      int getDaughter1(int index);

      // repeated uint32 daughter2 = 11 [packed = true];
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter
       * </pre>
       */
      java.util.List<java.lang.Integer> getDaughter2List();
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter
       * </pre>
       */
      int getDaughter2Count();
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter
       * </pre>
       */
      int getDaughter2(int index);

      // repeated sint32 barcode = 12 [packed = true];
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used. For Delphes: isPU  
       * </pre>
       */
      java.util.List<java.lang.Integer> getBarcodeList();
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used. For Delphes: isPU  
       * </pre>
       */
      int getBarcodeCount();
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used. For Delphes: isPU  
       * </pre>
       */
      int getBarcode(int index);

      // repeated sint32 X = 13 [packed = true];
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      java.util.List<java.lang.Integer> getXList();
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      int getXCount();
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      int getX(int index);

      // repeated sint32 Y = 14 [packed = true];
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      java.util.List<java.lang.Integer> getYList();
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      int getYCount();
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      int getY(int index);

      // repeated sint32 Z = 15 [packed = true];
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      java.util.List<java.lang.Integer> getZList();
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      int getZCount();
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      int getZ(int index);

      // repeated uint32 T = 16 [packed = true];
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time
       * </pre>
       */
      java.util.List<java.lang.Integer> getTList();
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time
       * </pre>
       */
      int getTCount();
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time
       * </pre>
       */
      int getT(int index);

      // repeated uint64 weight = 17 [packed = true];
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight
       * </pre>
       */
      java.util.List<java.lang.Long> getWeightList();
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight
       * </pre>
       */
      int getWeightCount();
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight
       * </pre>
       */
      long getWeight(int index);

      // repeated sint32 charge = 18 [packed = true];
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      java.util.List<java.lang.Integer> getChargeList();
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getChargeCount();
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getCharge(int index);

      // repeated uint64 PT = 19 [packed = true];
      /**
       * <code>repeated uint64 PT = 19 [packed = true];</code>
       *
       * <pre>
       * Delphes specific
       * </pre>
       */
      java.util.List<java.lang.Long> getPTList();
      /**
       * <code>repeated uint64 PT = 19 [packed = true];</code>
       *
       * <pre>
       * Delphes specific
       * </pre>
       */
      int getPTCount();
      /**
       * <code>repeated uint64 PT = 19 [packed = true];</code>
       *
       * <pre>
       * Delphes specific
       * </pre>
       */
      long getPT(int index);

      // repeated sint64 Eta = 20 [packed = true];
      /**
       * <code>repeated sint64 Eta = 20 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      java.util.List<java.lang.Long> getEtaList();
      /**
       * <code>repeated sint64 Eta = 20 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      int getEtaCount();
      /**
       * <code>repeated sint64 Eta = 20 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      long getEta(int index);

      // repeated sint64 Phi = 21 [packed = true];
      /**
       * <code>repeated sint64 Phi = 21 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      java.util.List<java.lang.Long> getPhiList();
      /**
       * <code>repeated sint64 Phi = 21 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      int getPhiCount();
      /**
       * <code>repeated sint64 Phi = 21 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      long getPhi(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Particles}
     *
     * <pre>
     * generator (truth) particles
     * </pre>
     */
    public static final class Particles extends
        com.google.protobuf.GeneratedMessage
        implements ParticlesOrBuilder {
      // Use Particles.newBuilder() to construct.
      private Particles(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Particles(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Particles defaultInstance;
      public static Particles getDefaultInstance() {
        return defaultInstance;
      }

      public Particles getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Particles(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  id_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                id_.add(input.readUInt32());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  id_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  id_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  pdgId_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                pdgId_.add(input.readSInt32());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  pdgId_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pdgId_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  status_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                status_.add(input.readUInt32());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  status_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  status_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  mass_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                mass_.add(input.readUInt64());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  mass_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mass_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  px_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000010;
                }
                px_.add(input.readSInt64());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  px_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  px_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 48: {
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  py_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000020;
                }
                py_.add(input.readSInt64());
                break;
              }
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                  py_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000020;
                }
                while (input.getBytesUntilLimit() > 0) {
                  py_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 56: {
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  pz_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000040;
                }
                pz_.add(input.readSInt64());
                break;
              }
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                  pz_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000040;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pz_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 64: {
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                  mother1_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                mother1_.add(input.readUInt32());
                break;
              }
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                  mother1_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mother1_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 72: {
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                  mother2_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                mother2_.add(input.readUInt32());
                break;
              }
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                  mother2_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mother2_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 80: {
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                  daughter1_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                daughter1_.add(input.readUInt32());
                break;
              }
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                  daughter1_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                while (input.getBytesUntilLimit() > 0) {
                  daughter1_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 88: {
                if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                  daughter2_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000400;
                }
                daughter2_.add(input.readUInt32());
                break;
              }
              case 90: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                  daughter2_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000400;
                }
                while (input.getBytesUntilLimit() > 0) {
                  daughter2_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 96: {
                if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                  barcode_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000800;
                }
                barcode_.add(input.readSInt32());
                break;
              }
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                  barcode_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000800;
                }
                while (input.getBytesUntilLimit() > 0) {
                  barcode_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 104: {
                if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                  x_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00001000;
                }
                x_.add(input.readSInt32());
                break;
              }
              case 106: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                  x_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00001000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  x_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 112: {
                if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                  y_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00002000;
                }
                y_.add(input.readSInt32());
                break;
              }
              case 114: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                  y_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00002000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  y_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 120: {
                if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                  z_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00004000;
                }
                z_.add(input.readSInt32());
                break;
              }
              case 122: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                  z_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00004000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  z_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 128: {
                if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                  t_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00008000;
                }
                t_.add(input.readUInt32());
                break;
              }
              case 130: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                  t_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00008000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  t_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 136: {
                if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                  weight_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00010000;
                }
                weight_.add(input.readUInt64());
                break;
              }
              case 138: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                  weight_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00010000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  weight_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 144: {
                if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00020000;
                }
                charge_.add(input.readSInt32());
                break;
              }
              case 146: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00020000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  charge_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 152: {
                if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00040000;
                }
                pT_.add(input.readUInt64());
                break;
              }
              case 154: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00040000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pT_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 160: {
                if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00080000;
                }
                eta_.add(input.readSInt64());
                break;
              }
              case 162: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00080000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  eta_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 168: {
                if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00100000;
                }
                phi_.add(input.readSInt64());
                break;
              }
              case 170: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00100000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  phi_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            id_ = java.util.Collections.unmodifiableList(id_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            pdgId_ = java.util.Collections.unmodifiableList(pdgId_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            status_ = java.util.Collections.unmodifiableList(status_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = java.util.Collections.unmodifiableList(mass_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            px_ = java.util.Collections.unmodifiableList(px_);
          }
          if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
            py_ = java.util.Collections.unmodifiableList(py_);
          }
          if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
            pz_ = java.util.Collections.unmodifiableList(pz_);
          }
          if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
            mother1_ = java.util.Collections.unmodifiableList(mother1_);
          }
          if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
            mother2_ = java.util.Collections.unmodifiableList(mother2_);
          }
          if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
            daughter1_ = java.util.Collections.unmodifiableList(daughter1_);
          }
          if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
            daughter2_ = java.util.Collections.unmodifiableList(daughter2_);
          }
          if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
            barcode_ = java.util.Collections.unmodifiableList(barcode_);
          }
          if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
            x_ = java.util.Collections.unmodifiableList(x_);
          }
          if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
            y_ = java.util.Collections.unmodifiableList(y_);
          }
          if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
            z_ = java.util.Collections.unmodifiableList(z_);
          }
          if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
            t_ = java.util.Collections.unmodifiableList(t_);
          }
          if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
            weight_ = java.util.Collections.unmodifiableList(weight_);
          }
          if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
          }
          if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
          }
          if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
          }
          if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Particles_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Particles_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.Particles.class, proreco.io.ProMC.ProMCEvent.Particles.Builder.class);
      }

      public static com.google.protobuf.Parser<Particles> PARSER =
          new com.google.protobuf.AbstractParser<Particles>() {
        public Particles parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Particles(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Particles> getParserForType() {
        return PARSER;
      }

      // repeated uint32 id = 1 [packed = true];
      public static final int ID_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Integer> id_;
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getIdList() {
        return id_;
      }
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      public int getIdCount() {
        return id_.size();
      }
      /**
       * <code>repeated uint32 id = 1 [packed = true];</code>
       *
       * <pre>
       * ID in the generator
       * </pre>
       */
      public int getId(int index) {
        return id_.get(index);
      }
      private int idMemoizedSerializedSize = -1;

      // repeated sint32 pdg_id = 2 [packed = true];
      public static final int PDG_ID_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Integer> pdgId_;
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPdgIdList() {
        return pdgId_;
      }
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type
       * </pre>
       */
      public int getPdgIdCount() {
        return pdgId_.size();
      }
      /**
       * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
       *
       * <pre>
       * unique integer ID specifying the particle type
       * </pre>
       */
      public int getPdgId(int index) {
        return pdgId_.get(index);
      }
      private int pdgIdMemoizedSerializedSize = -1;

      // repeated uint32 status = 3 [packed = true];
      public static final int STATUS_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Integer> status_;
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not)
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getStatusList() {
        return status_;
      }
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not)
       * </pre>
       */
      public int getStatusCount() {
        return status_.size();
      }
      /**
       * <code>repeated uint32 status = 3 [packed = true];</code>
       *
       * <pre>
       * integer specifying the particle’s status (i.e. decayed or not)
       * </pre>
       */
      public int getStatus(int index) {
        return status_.get(index);
      }
      private int statusMemoizedSerializedSize = -1;

      // repeated uint64 mass = 4 [packed = true];
      public static final int MASS_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Long> mass_;
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getMassList() {
        return mass_;
      }
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass
       * </pre>
       */
      public int getMassCount() {
        return mass_.size();
      }
      /**
       * <code>repeated uint64 mass = 4 [packed = true];</code>
       *
       * <pre>
       * mass
       * </pre>
       */
      public long getMass(int index) {
        return mass_.get(index);
      }
      private int massMemoizedSerializedSize = -1;

      // repeated sint64 Px = 5 [packed = true];
      public static final int PX_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Long> px_;
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPxList() {
        return px_;
      }
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX
       * </pre>
       */
      public int getPxCount() {
        return px_.size();
      }
      /**
       * <code>repeated sint64 Px = 5 [packed = true];</code>
       *
       * <pre>
       * pX
       * </pre>
       */
      public long getPx(int index) {
        return px_.get(index);
      }
      private int pxMemoizedSerializedSize = -1;

      // repeated sint64 Py = 6 [packed = true];
      public static final int PY_FIELD_NUMBER = 6;
      private java.util.List<java.lang.Long> py_;
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPyList() {
        return py_;
      }
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY
       * </pre>
       */
      public int getPyCount() {
        return py_.size();
      }
      /**
       * <code>repeated sint64 Py = 6 [packed = true];</code>
       *
       * <pre>
       * pY
       * </pre>
       */
      public long getPy(int index) {
        return py_.get(index);
      }
      private int pyMemoizedSerializedSize = -1;

      // repeated sint64 Pz = 7 [packed = true];
      public static final int PZ_FIELD_NUMBER = 7;
      private java.util.List<java.lang.Long> pz_;
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPzList() {
        return pz_;
      }
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      public int getPzCount() {
        return pz_.size();
      }
      /**
       * <code>repeated sint64 Pz = 7 [packed = true];</code>
       *
       * <pre>
       * pZ
       * </pre>
       */
      public long getPz(int index) {
        return pz_.get(index);
      }
      private int pzMemoizedSerializedSize = -1;

      // repeated uint32 mother1 = 8 [packed = true];
      public static final int MOTHER1_FIELD_NUMBER = 8;
      private java.util.List<java.lang.Integer> mother1_;
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMother1List() {
        return mother1_;
      }
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother
       * </pre>
       */
      public int getMother1Count() {
        return mother1_.size();
      }
      /**
       * <code>repeated uint32 mother1 = 8 [packed = true];</code>
       *
       * <pre>
       * first mother
       * </pre>
       */
      public int getMother1(int index) {
        return mother1_.get(index);
      }
      private int mother1MemoizedSerializedSize = -1;

      // repeated uint32 mother2 = 9 [packed = true];
      public static final int MOTHER2_FIELD_NUMBER = 9;
      private java.util.List<java.lang.Integer> mother2_;
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getMother2List() {
        return mother2_;
      }
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother
       * </pre>
       */
      public int getMother2Count() {
        return mother2_.size();
      }
      /**
       * <code>repeated uint32 mother2 = 9 [packed = true];</code>
       *
       * <pre>
       * second mother
       * </pre>
       */
      public int getMother2(int index) {
        return mother2_.get(index);
      }
      private int mother2MemoizedSerializedSize = -1;

      // repeated uint32 daughter1 = 10 [packed = true];
      public static final int DAUGHTER1_FIELD_NUMBER = 10;
      private java.util.List<java.lang.Integer> daughter1_;
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDaughter1List() {
        return daughter1_;
      }
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter
       * </pre>
       */
      public int getDaughter1Count() {
        return daughter1_.size();
      }
      /**
       * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
       *
       * <pre>
       * first daughter
       * </pre>
       */
      public int getDaughter1(int index) {
        return daughter1_.get(index);
      }
      private int daughter1MemoizedSerializedSize = -1;

      // repeated uint32 daughter2 = 11 [packed = true];
      public static final int DAUGHTER2_FIELD_NUMBER = 11;
      private java.util.List<java.lang.Integer> daughter2_;
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDaughter2List() {
        return daughter2_;
      }
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter
       * </pre>
       */
      public int getDaughter2Count() {
        return daughter2_.size();
      }
      /**
       * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
       *
       * <pre>
       * second daughter
       * </pre>
       */
      public int getDaughter2(int index) {
        return daughter2_.get(index);
      }
      private int daughter2MemoizedSerializedSize = -1;

      // repeated sint32 barcode = 12 [packed = true];
      public static final int BARCODE_FIELD_NUMBER = 12;
      private java.util.List<java.lang.Integer> barcode_;
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used. For Delphes: isPU  
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBarcodeList() {
        return barcode_;
      }
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used. For Delphes: isPU  
       * </pre>
       */
      public int getBarcodeCount() {
        return barcode_.size();
      }
      /**
       * <code>repeated sint32 barcode = 12 [packed = true];</code>
       *
       * <pre>
       * barcode if used. For Delphes: isPU  
       * </pre>
       */
      public int getBarcode(int index) {
        return barcode_.get(index);
      }
      private int barcodeMemoizedSerializedSize = -1;

      // repeated sint32 X = 13 [packed = true];
      public static final int X_FIELD_NUMBER = 13;
      private java.util.List<java.lang.Integer> x_;
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXList() {
        return x_;
      }
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      public int getXCount() {
        return x_.size();
      }
      /**
       * <code>repeated sint32 X = 13 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      public int getX(int index) {
        return x_.get(index);
      }
      private int xMemoizedSerializedSize = -1;

      // repeated sint32 Y = 14 [packed = true];
      public static final int Y_FIELD_NUMBER = 14;
      private java.util.List<java.lang.Integer> y_;
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getYList() {
        return y_;
      }
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      public int getYCount() {
        return y_.size();
      }
      /**
       * <code>repeated sint32 Y = 14 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      public int getY(int index) {
        return y_.get(index);
      }
      private int yMemoizedSerializedSize = -1;

      // repeated sint32 Z = 15 [packed = true];
      public static final int Z_FIELD_NUMBER = 15;
      private java.util.List<java.lang.Integer> z_;
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZList() {
        return z_;
      }
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      public int getZCount() {
        return z_.size();
      }
      /**
       * <code>repeated sint32 Z = 15 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      public int getZ(int index) {
        return z_.get(index);
      }
      private int zMemoizedSerializedSize = -1;

      // repeated uint32 T = 16 [packed = true];
      public static final int T_FIELD_NUMBER = 16;
      private java.util.List<java.lang.Integer> t_;
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTList() {
        return t_;
      }
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time
       * </pre>
       */
      public int getTCount() {
        return t_.size();
      }
      /**
       * <code>repeated uint32 T = 16 [packed = true];</code>
       *
       * <pre>
       * time
       * </pre>
       */
      public int getT(int index) {
        return t_.get(index);
      }
      private int tMemoizedSerializedSize = -1;

      // repeated uint64 weight = 17 [packed = true];
      public static final int WEIGHT_FIELD_NUMBER = 17;
      private java.util.List<java.lang.Long> weight_;
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getWeightList() {
        return weight_;
      }
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight
       * </pre>
       */
      public int getWeightCount() {
        return weight_.size();
      }
      /**
       * <code>repeated uint64 weight = 17 [packed = true];</code>
       *
       * <pre>
       * particle weight
       * </pre>
       */
      public long getWeight(int index) {
        return weight_.get(index);
      }
      private int weightMemoizedSerializedSize = -1;

      // repeated sint32 charge = 18 [packed = true];
      public static final int CHARGE_FIELD_NUMBER = 18;
      private java.util.List<java.lang.Integer> charge_;
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChargeList() {
        return charge_;
      }
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getChargeCount() {
        return charge_.size();
      }
      /**
       * <code>repeated sint32 charge = 18 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getCharge(int index) {
        return charge_.get(index);
      }
      private int chargeMemoizedSerializedSize = -1;

      // repeated uint64 PT = 19 [packed = true];
      public static final int PT_FIELD_NUMBER = 19;
      private java.util.List<java.lang.Long> pT_;
      /**
       * <code>repeated uint64 PT = 19 [packed = true];</code>
       *
       * <pre>
       * Delphes specific
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPTList() {
        return pT_;
      }
      /**
       * <code>repeated uint64 PT = 19 [packed = true];</code>
       *
       * <pre>
       * Delphes specific
       * </pre>
       */
      public int getPTCount() {
        return pT_.size();
      }
      /**
       * <code>repeated uint64 PT = 19 [packed = true];</code>
       *
       * <pre>
       * Delphes specific
       * </pre>
       */
      public long getPT(int index) {
        return pT_.get(index);
      }
      private int pTMemoizedSerializedSize = -1;

      // repeated sint64 Eta = 20 [packed = true];
      public static final int ETA_FIELD_NUMBER = 20;
      private java.util.List<java.lang.Long> eta_;
      /**
       * <code>repeated sint64 Eta = 20 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEtaList() {
        return eta_;
      }
      /**
       * <code>repeated sint64 Eta = 20 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public int getEtaCount() {
        return eta_.size();
      }
      /**
       * <code>repeated sint64 Eta = 20 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public long getEta(int index) {
        return eta_.get(index);
      }
      private int etaMemoizedSerializedSize = -1;

      // repeated sint64 Phi = 21 [packed = true];
      public static final int PHI_FIELD_NUMBER = 21;
      private java.util.List<java.lang.Long> phi_;
      /**
       * <code>repeated sint64 Phi = 21 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPhiList() {
        return phi_;
      }
      /**
       * <code>repeated sint64 Phi = 21 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public int getPhiCount() {
        return phi_.size();
      }
      /**
       * <code>repeated sint64 Phi = 21 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public long getPhi(int index) {
        return phi_.get(index);
      }
      private int phiMemoizedSerializedSize = -1;

      private void initFields() {
        id_ = java.util.Collections.emptyList();
        pdgId_ = java.util.Collections.emptyList();
        status_ = java.util.Collections.emptyList();
        mass_ = java.util.Collections.emptyList();
        px_ = java.util.Collections.emptyList();
        py_ = java.util.Collections.emptyList();
        pz_ = java.util.Collections.emptyList();
        mother1_ = java.util.Collections.emptyList();
        mother2_ = java.util.Collections.emptyList();
        daughter1_ = java.util.Collections.emptyList();
        daughter2_ = java.util.Collections.emptyList();
        barcode_ = java.util.Collections.emptyList();
        x_ = java.util.Collections.emptyList();
        y_ = java.util.Collections.emptyList();
        z_ = java.util.Collections.emptyList();
        t_ = java.util.Collections.emptyList();
        weight_ = java.util.Collections.emptyList();
        charge_ = java.util.Collections.emptyList();
        pT_ = java.util.Collections.emptyList();
        eta_ = java.util.Collections.emptyList();
        phi_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getIdList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(idMemoizedSerializedSize);
        }
        for (int i = 0; i < id_.size(); i++) {
          output.writeUInt32NoTag(id_.get(i));
        }
        if (getPdgIdList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(pdgIdMemoizedSerializedSize);
        }
        for (int i = 0; i < pdgId_.size(); i++) {
          output.writeSInt32NoTag(pdgId_.get(i));
        }
        if (getStatusList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(statusMemoizedSerializedSize);
        }
        for (int i = 0; i < status_.size(); i++) {
          output.writeUInt32NoTag(status_.get(i));
        }
        if (getMassList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(massMemoizedSerializedSize);
        }
        for (int i = 0; i < mass_.size(); i++) {
          output.writeUInt64NoTag(mass_.get(i));
        }
        if (getPxList().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(pxMemoizedSerializedSize);
        }
        for (int i = 0; i < px_.size(); i++) {
          output.writeSInt64NoTag(px_.get(i));
        }
        if (getPyList().size() > 0) {
          output.writeRawVarint32(50);
          output.writeRawVarint32(pyMemoizedSerializedSize);
        }
        for (int i = 0; i < py_.size(); i++) {
          output.writeSInt64NoTag(py_.get(i));
        }
        if (getPzList().size() > 0) {
          output.writeRawVarint32(58);
          output.writeRawVarint32(pzMemoizedSerializedSize);
        }
        for (int i = 0; i < pz_.size(); i++) {
          output.writeSInt64NoTag(pz_.get(i));
        }
        if (getMother1List().size() > 0) {
          output.writeRawVarint32(66);
          output.writeRawVarint32(mother1MemoizedSerializedSize);
        }
        for (int i = 0; i < mother1_.size(); i++) {
          output.writeUInt32NoTag(mother1_.get(i));
        }
        if (getMother2List().size() > 0) {
          output.writeRawVarint32(74);
          output.writeRawVarint32(mother2MemoizedSerializedSize);
        }
        for (int i = 0; i < mother2_.size(); i++) {
          output.writeUInt32NoTag(mother2_.get(i));
        }
        if (getDaughter1List().size() > 0) {
          output.writeRawVarint32(82);
          output.writeRawVarint32(daughter1MemoizedSerializedSize);
        }
        for (int i = 0; i < daughter1_.size(); i++) {
          output.writeUInt32NoTag(daughter1_.get(i));
        }
        if (getDaughter2List().size() > 0) {
          output.writeRawVarint32(90);
          output.writeRawVarint32(daughter2MemoizedSerializedSize);
        }
        for (int i = 0; i < daughter2_.size(); i++) {
          output.writeUInt32NoTag(daughter2_.get(i));
        }
        if (getBarcodeList().size() > 0) {
          output.writeRawVarint32(98);
          output.writeRawVarint32(barcodeMemoizedSerializedSize);
        }
        for (int i = 0; i < barcode_.size(); i++) {
          output.writeSInt32NoTag(barcode_.get(i));
        }
        if (getXList().size() > 0) {
          output.writeRawVarint32(106);
          output.writeRawVarint32(xMemoizedSerializedSize);
        }
        for (int i = 0; i < x_.size(); i++) {
          output.writeSInt32NoTag(x_.get(i));
        }
        if (getYList().size() > 0) {
          output.writeRawVarint32(114);
          output.writeRawVarint32(yMemoizedSerializedSize);
        }
        for (int i = 0; i < y_.size(); i++) {
          output.writeSInt32NoTag(y_.get(i));
        }
        if (getZList().size() > 0) {
          output.writeRawVarint32(122);
          output.writeRawVarint32(zMemoizedSerializedSize);
        }
        for (int i = 0; i < z_.size(); i++) {
          output.writeSInt32NoTag(z_.get(i));
        }
        if (getTList().size() > 0) {
          output.writeRawVarint32(130);
          output.writeRawVarint32(tMemoizedSerializedSize);
        }
        for (int i = 0; i < t_.size(); i++) {
          output.writeUInt32NoTag(t_.get(i));
        }
        if (getWeightList().size() > 0) {
          output.writeRawVarint32(138);
          output.writeRawVarint32(weightMemoizedSerializedSize);
        }
        for (int i = 0; i < weight_.size(); i++) {
          output.writeUInt64NoTag(weight_.get(i));
        }
        if (getChargeList().size() > 0) {
          output.writeRawVarint32(146);
          output.writeRawVarint32(chargeMemoizedSerializedSize);
        }
        for (int i = 0; i < charge_.size(); i++) {
          output.writeSInt32NoTag(charge_.get(i));
        }
        if (getPTList().size() > 0) {
          output.writeRawVarint32(154);
          output.writeRawVarint32(pTMemoizedSerializedSize);
        }
        for (int i = 0; i < pT_.size(); i++) {
          output.writeUInt64NoTag(pT_.get(i));
        }
        if (getEtaList().size() > 0) {
          output.writeRawVarint32(162);
          output.writeRawVarint32(etaMemoizedSerializedSize);
        }
        for (int i = 0; i < eta_.size(); i++) {
          output.writeSInt64NoTag(eta_.get(i));
        }
        if (getPhiList().size() > 0) {
          output.writeRawVarint32(170);
          output.writeRawVarint32(phiMemoizedSerializedSize);
        }
        for (int i = 0; i < phi_.size(); i++) {
          output.writeSInt64NoTag(phi_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < id_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(id_.get(i));
          }
          size += dataSize;
          if (!getIdList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          idMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < pdgId_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(pdgId_.get(i));
          }
          size += dataSize;
          if (!getPdgIdList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pdgIdMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < status_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(status_.get(i));
          }
          size += dataSize;
          if (!getStatusList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          statusMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < mass_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(mass_.get(i));
          }
          size += dataSize;
          if (!getMassList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          massMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < px_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(px_.get(i));
          }
          size += dataSize;
          if (!getPxList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pxMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < py_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(py_.get(i));
          }
          size += dataSize;
          if (!getPyList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pyMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < pz_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(pz_.get(i));
          }
          size += dataSize;
          if (!getPzList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pzMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < mother1_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(mother1_.get(i));
          }
          size += dataSize;
          if (!getMother1List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          mother1MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < mother2_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(mother2_.get(i));
          }
          size += dataSize;
          if (!getMother2List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          mother2MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < daughter1_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(daughter1_.get(i));
          }
          size += dataSize;
          if (!getDaughter1List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          daughter1MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < daughter2_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(daughter2_.get(i));
          }
          size += dataSize;
          if (!getDaughter2List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          daughter2MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < barcode_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(barcode_.get(i));
          }
          size += dataSize;
          if (!getBarcodeList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          barcodeMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < x_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(x_.get(i));
          }
          size += dataSize;
          if (!getXList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          xMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < y_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(y_.get(i));
          }
          size += dataSize;
          if (!getYList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          yMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < z_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(z_.get(i));
          }
          size += dataSize;
          if (!getZList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          zMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < t_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(t_.get(i));
          }
          size += dataSize;
          if (!getTList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          tMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < weight_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(weight_.get(i));
          }
          size += dataSize;
          if (!getWeightList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          weightMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < charge_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(charge_.get(i));
          }
          size += dataSize;
          if (!getChargeList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          chargeMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < pT_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(pT_.get(i));
          }
          size += dataSize;
          if (!getPTList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pTMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < eta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(eta_.get(i));
          }
          size += dataSize;
          if (!getEtaList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          etaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < phi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(phi_.get(i));
          }
          size += dataSize;
          if (!getPhiList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          phiMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static proreco.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Particles parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Particles parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Particles parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Particles parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Particles parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Particles parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Particles parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proreco.io.ProMC.ProMCEvent.Particles prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Particles}
       *
       * <pre>
       * generator (truth) particles
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements proreco.io.ProMC.ProMCEvent.ParticlesOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Particles_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Particles_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  proreco.io.ProMC.ProMCEvent.Particles.class, proreco.io.ProMC.ProMCEvent.Particles.Builder.class);
        }

        // Construct using proreco.io.ProMC.ProMCEvent.Particles.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          pdgId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          status_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          mass_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          px_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          py_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          pz_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          mother1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          mother2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          daughter1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          daughter2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          barcode_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          x_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          y_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          z_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
          t_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          weight_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Particles_descriptor;
        }

        public proreco.io.ProMC.ProMCEvent.Particles getDefaultInstanceForType() {
          return proreco.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
        }

        public proreco.io.ProMC.ProMCEvent.Particles build() {
          proreco.io.ProMC.ProMCEvent.Particles result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public proreco.io.ProMC.ProMCEvent.Particles buildPartial() {
          proreco.io.ProMC.ProMCEvent.Particles result = new proreco.io.ProMC.ProMCEvent.Particles(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            id_ = java.util.Collections.unmodifiableList(id_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.id_ = id_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            pdgId_ = java.util.Collections.unmodifiableList(pdgId_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.pdgId_ = pdgId_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            status_ = java.util.Collections.unmodifiableList(status_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.status_ = status_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = java.util.Collections.unmodifiableList(mass_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.mass_ = mass_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            px_ = java.util.Collections.unmodifiableList(px_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.px_ = px_;
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            py_ = java.util.Collections.unmodifiableList(py_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.py_ = py_;
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            pz_ = java.util.Collections.unmodifiableList(pz_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.pz_ = pz_;
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            mother1_ = java.util.Collections.unmodifiableList(mother1_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.mother1_ = mother1_;
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            mother2_ = java.util.Collections.unmodifiableList(mother2_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.mother2_ = mother2_;
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            daughter1_ = java.util.Collections.unmodifiableList(daughter1_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.daughter1_ = daughter1_;
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            daughter2_ = java.util.Collections.unmodifiableList(daughter2_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.daughter2_ = daughter2_;
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            barcode_ = java.util.Collections.unmodifiableList(barcode_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.barcode_ = barcode_;
          if (((bitField0_ & 0x00001000) == 0x00001000)) {
            x_ = java.util.Collections.unmodifiableList(x_);
            bitField0_ = (bitField0_ & ~0x00001000);
          }
          result.x_ = x_;
          if (((bitField0_ & 0x00002000) == 0x00002000)) {
            y_ = java.util.Collections.unmodifiableList(y_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.y_ = y_;
          if (((bitField0_ & 0x00004000) == 0x00004000)) {
            z_ = java.util.Collections.unmodifiableList(z_);
            bitField0_ = (bitField0_ & ~0x00004000);
          }
          result.z_ = z_;
          if (((bitField0_ & 0x00008000) == 0x00008000)) {
            t_ = java.util.Collections.unmodifiableList(t_);
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.t_ = t_;
          if (((bitField0_ & 0x00010000) == 0x00010000)) {
            weight_ = java.util.Collections.unmodifiableList(weight_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.weight_ = weight_;
          if (((bitField0_ & 0x00020000) == 0x00020000)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.charge_ = charge_;
          if (((bitField0_ & 0x00040000) == 0x00040000)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
            bitField0_ = (bitField0_ & ~0x00040000);
          }
          result.pT_ = pT_;
          if (((bitField0_ & 0x00080000) == 0x00080000)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
            bitField0_ = (bitField0_ & ~0x00080000);
          }
          result.eta_ = eta_;
          if (((bitField0_ & 0x00100000) == 0x00100000)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
            bitField0_ = (bitField0_ & ~0x00100000);
          }
          result.phi_ = phi_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof proreco.io.ProMC.ProMCEvent.Particles) {
            return mergeFrom((proreco.io.ProMC.ProMCEvent.Particles)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(proreco.io.ProMC.ProMCEvent.Particles other) {
          if (other == proreco.io.ProMC.ProMCEvent.Particles.getDefaultInstance()) return this;
          if (!other.id_.isEmpty()) {
            if (id_.isEmpty()) {
              id_ = other.id_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureIdIsMutable();
              id_.addAll(other.id_);
            }
            onChanged();
          }
          if (!other.pdgId_.isEmpty()) {
            if (pdgId_.isEmpty()) {
              pdgId_ = other.pdgId_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePdgIdIsMutable();
              pdgId_.addAll(other.pdgId_);
            }
            onChanged();
          }
          if (!other.status_.isEmpty()) {
            if (status_.isEmpty()) {
              status_ = other.status_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureStatusIsMutable();
              status_.addAll(other.status_);
            }
            onChanged();
          }
          if (!other.mass_.isEmpty()) {
            if (mass_.isEmpty()) {
              mass_ = other.mass_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMassIsMutable();
              mass_.addAll(other.mass_);
            }
            onChanged();
          }
          if (!other.px_.isEmpty()) {
            if (px_.isEmpty()) {
              px_ = other.px_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensurePxIsMutable();
              px_.addAll(other.px_);
            }
            onChanged();
          }
          if (!other.py_.isEmpty()) {
            if (py_.isEmpty()) {
              py_ = other.py_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensurePyIsMutable();
              py_.addAll(other.py_);
            }
            onChanged();
          }
          if (!other.pz_.isEmpty()) {
            if (pz_.isEmpty()) {
              pz_ = other.pz_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensurePzIsMutable();
              pz_.addAll(other.pz_);
            }
            onChanged();
          }
          if (!other.mother1_.isEmpty()) {
            if (mother1_.isEmpty()) {
              mother1_ = other.mother1_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureMother1IsMutable();
              mother1_.addAll(other.mother1_);
            }
            onChanged();
          }
          if (!other.mother2_.isEmpty()) {
            if (mother2_.isEmpty()) {
              mother2_ = other.mother2_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureMother2IsMutable();
              mother2_.addAll(other.mother2_);
            }
            onChanged();
          }
          if (!other.daughter1_.isEmpty()) {
            if (daughter1_.isEmpty()) {
              daughter1_ = other.daughter1_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureDaughter1IsMutable();
              daughter1_.addAll(other.daughter1_);
            }
            onChanged();
          }
          if (!other.daughter2_.isEmpty()) {
            if (daughter2_.isEmpty()) {
              daughter2_ = other.daughter2_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureDaughter2IsMutable();
              daughter2_.addAll(other.daughter2_);
            }
            onChanged();
          }
          if (!other.barcode_.isEmpty()) {
            if (barcode_.isEmpty()) {
              barcode_ = other.barcode_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureBarcodeIsMutable();
              barcode_.addAll(other.barcode_);
            }
            onChanged();
          }
          if (!other.x_.isEmpty()) {
            if (x_.isEmpty()) {
              x_ = other.x_;
              bitField0_ = (bitField0_ & ~0x00001000);
            } else {
              ensureXIsMutable();
              x_.addAll(other.x_);
            }
            onChanged();
          }
          if (!other.y_.isEmpty()) {
            if (y_.isEmpty()) {
              y_ = other.y_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureYIsMutable();
              y_.addAll(other.y_);
            }
            onChanged();
          }
          if (!other.z_.isEmpty()) {
            if (z_.isEmpty()) {
              z_ = other.z_;
              bitField0_ = (bitField0_ & ~0x00004000);
            } else {
              ensureZIsMutable();
              z_.addAll(other.z_);
            }
            onChanged();
          }
          if (!other.t_.isEmpty()) {
            if (t_.isEmpty()) {
              t_ = other.t_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureTIsMutable();
              t_.addAll(other.t_);
            }
            onChanged();
          }
          if (!other.weight_.isEmpty()) {
            if (weight_.isEmpty()) {
              weight_ = other.weight_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureWeightIsMutable();
              weight_.addAll(other.weight_);
            }
            onChanged();
          }
          if (!other.charge_.isEmpty()) {
            if (charge_.isEmpty()) {
              charge_ = other.charge_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensureChargeIsMutable();
              charge_.addAll(other.charge_);
            }
            onChanged();
          }
          if (!other.pT_.isEmpty()) {
            if (pT_.isEmpty()) {
              pT_ = other.pT_;
              bitField0_ = (bitField0_ & ~0x00040000);
            } else {
              ensurePTIsMutable();
              pT_.addAll(other.pT_);
            }
            onChanged();
          }
          if (!other.eta_.isEmpty()) {
            if (eta_.isEmpty()) {
              eta_ = other.eta_;
              bitField0_ = (bitField0_ & ~0x00080000);
            } else {
              ensureEtaIsMutable();
              eta_.addAll(other.eta_);
            }
            onChanged();
          }
          if (!other.phi_.isEmpty()) {
            if (phi_.isEmpty()) {
              phi_ = other.phi_;
              bitField0_ = (bitField0_ & ~0x00100000);
            } else {
              ensurePhiIsMutable();
              phi_.addAll(other.phi_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          proreco.io.ProMC.ProMCEvent.Particles parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (proreco.io.ProMC.ProMCEvent.Particles) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint32 id = 1 [packed = true];
        private java.util.List<java.lang.Integer> id_ = java.util.Collections.emptyList();
        private void ensureIdIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            id_ = new java.util.ArrayList<java.lang.Integer>(id_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getIdList() {
          return java.util.Collections.unmodifiableList(id_);
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public int getIdCount() {
          return id_.size();
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public int getId(int index) {
          return id_.get(index);
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder setId(
            int index, int value) {
          ensureIdIsMutable();
          id_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder addId(int value) {
          ensureIdIsMutable();
          id_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder addAllId(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureIdIsMutable();
          super.addAll(values, id_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 id = 1 [packed = true];</code>
         *
         * <pre>
         * ID in the generator
         * </pre>
         */
        public Builder clearId() {
          id_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint32 pdg_id = 2 [packed = true];
        private java.util.List<java.lang.Integer> pdgId_ = java.util.Collections.emptyList();
        private void ensurePdgIdIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            pdgId_ = new java.util.ArrayList<java.lang.Integer>(pdgId_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getPdgIdList() {
          return java.util.Collections.unmodifiableList(pdgId_);
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type
         * </pre>
         */
        public int getPdgIdCount() {
          return pdgId_.size();
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type
         * </pre>
         */
        public int getPdgId(int index) {
          return pdgId_.get(index);
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type
         * </pre>
         */
        public Builder setPdgId(
            int index, int value) {
          ensurePdgIdIsMutable();
          pdgId_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type
         * </pre>
         */
        public Builder addPdgId(int value) {
          ensurePdgIdIsMutable();
          pdgId_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type
         * </pre>
         */
        public Builder addAllPdgId(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensurePdgIdIsMutable();
          super.addAll(values, pdgId_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 pdg_id = 2 [packed = true];</code>
         *
         * <pre>
         * unique integer ID specifying the particle type
         * </pre>
         */
        public Builder clearPdgId() {
          pdgId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated uint32 status = 3 [packed = true];
        private java.util.List<java.lang.Integer> status_ = java.util.Collections.emptyList();
        private void ensureStatusIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            status_ = new java.util.ArrayList<java.lang.Integer>(status_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not)
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getStatusList() {
          return java.util.Collections.unmodifiableList(status_);
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not)
         * </pre>
         */
        public int getStatusCount() {
          return status_.size();
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not)
         * </pre>
         */
        public int getStatus(int index) {
          return status_.get(index);
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not)
         * </pre>
         */
        public Builder setStatus(
            int index, int value) {
          ensureStatusIsMutable();
          status_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not)
         * </pre>
         */
        public Builder addStatus(int value) {
          ensureStatusIsMutable();
          status_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not)
         * </pre>
         */
        public Builder addAllStatus(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureStatusIsMutable();
          super.addAll(values, status_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 status = 3 [packed = true];</code>
         *
         * <pre>
         * integer specifying the particle’s status (i.e. decayed or not)
         * </pre>
         */
        public Builder clearStatus() {
          status_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated uint64 mass = 4 [packed = true];
        private java.util.List<java.lang.Long> mass_ = java.util.Collections.emptyList();
        private void ensureMassIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = new java.util.ArrayList<java.lang.Long>(mass_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getMassList() {
          return java.util.Collections.unmodifiableList(mass_);
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass
         * </pre>
         */
        public int getMassCount() {
          return mass_.size();
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass
         * </pre>
         */
        public long getMass(int index) {
          return mass_.get(index);
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass
         * </pre>
         */
        public Builder setMass(
            int index, long value) {
          ensureMassIsMutable();
          mass_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass
         * </pre>
         */
        public Builder addMass(long value) {
          ensureMassIsMutable();
          mass_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass
         * </pre>
         */
        public Builder addAllMass(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureMassIsMutable();
          super.addAll(values, mass_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 mass = 4 [packed = true];</code>
         *
         * <pre>
         * mass
         * </pre>
         */
        public Builder clearMass() {
          mass_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // repeated sint64 Px = 5 [packed = true];
        private java.util.List<java.lang.Long> px_ = java.util.Collections.emptyList();
        private void ensurePxIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            px_ = new java.util.ArrayList<java.lang.Long>(px_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPxList() {
          return java.util.Collections.unmodifiableList(px_);
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX
         * </pre>
         */
        public int getPxCount() {
          return px_.size();
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX
         * </pre>
         */
        public long getPx(int index) {
          return px_.get(index);
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX
         * </pre>
         */
        public Builder setPx(
            int index, long value) {
          ensurePxIsMutable();
          px_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX
         * </pre>
         */
        public Builder addPx(long value) {
          ensurePxIsMutable();
          px_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX
         * </pre>
         */
        public Builder addAllPx(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePxIsMutable();
          super.addAll(values, px_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Px = 5 [packed = true];</code>
         *
         * <pre>
         * pX
         * </pre>
         */
        public Builder clearPx() {
          px_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        // repeated sint64 Py = 6 [packed = true];
        private java.util.List<java.lang.Long> py_ = java.util.Collections.emptyList();
        private void ensurePyIsMutable() {
          if (!((bitField0_ & 0x00000020) == 0x00000020)) {
            py_ = new java.util.ArrayList<java.lang.Long>(py_);
            bitField0_ |= 0x00000020;
           }
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPyList() {
          return java.util.Collections.unmodifiableList(py_);
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY
         * </pre>
         */
        public int getPyCount() {
          return py_.size();
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY
         * </pre>
         */
        public long getPy(int index) {
          return py_.get(index);
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY
         * </pre>
         */
        public Builder setPy(
            int index, long value) {
          ensurePyIsMutable();
          py_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY
         * </pre>
         */
        public Builder addPy(long value) {
          ensurePyIsMutable();
          py_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY
         * </pre>
         */
        public Builder addAllPy(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePyIsMutable();
          super.addAll(values, py_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Py = 6 [packed = true];</code>
         *
         * <pre>
         * pY
         * </pre>
         */
        public Builder clearPy() {
          py_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        // repeated sint64 Pz = 7 [packed = true];
        private java.util.List<java.lang.Long> pz_ = java.util.Collections.emptyList();
        private void ensurePzIsMutable() {
          if (!((bitField0_ & 0x00000040) == 0x00000040)) {
            pz_ = new java.util.ArrayList<java.lang.Long>(pz_);
            bitField0_ |= 0x00000040;
           }
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPzList() {
          return java.util.Collections.unmodifiableList(pz_);
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public int getPzCount() {
          return pz_.size();
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public long getPz(int index) {
          return pz_.get(index);
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder setPz(
            int index, long value) {
          ensurePzIsMutable();
          pz_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder addPz(long value) {
          ensurePzIsMutable();
          pz_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder addAllPz(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePzIsMutable();
          super.addAll(values, pz_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Pz = 7 [packed = true];</code>
         *
         * <pre>
         * pZ
         * </pre>
         */
        public Builder clearPz() {
          pz_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }

        // repeated uint32 mother1 = 8 [packed = true];
        private java.util.List<java.lang.Integer> mother1_ = java.util.Collections.emptyList();
        private void ensureMother1IsMutable() {
          if (!((bitField0_ & 0x00000080) == 0x00000080)) {
            mother1_ = new java.util.ArrayList<java.lang.Integer>(mother1_);
            bitField0_ |= 0x00000080;
           }
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getMother1List() {
          return java.util.Collections.unmodifiableList(mother1_);
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother
         * </pre>
         */
        public int getMother1Count() {
          return mother1_.size();
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother
         * </pre>
         */
        public int getMother1(int index) {
          return mother1_.get(index);
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother
         * </pre>
         */
        public Builder setMother1(
            int index, int value) {
          ensureMother1IsMutable();
          mother1_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother
         * </pre>
         */
        public Builder addMother1(int value) {
          ensureMother1IsMutable();
          mother1_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother
         * </pre>
         */
        public Builder addAllMother1(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureMother1IsMutable();
          super.addAll(values, mother1_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother1 = 8 [packed = true];</code>
         *
         * <pre>
         * first mother
         * </pre>
         */
        public Builder clearMother1() {
          mother1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
          return this;
        }

        // repeated uint32 mother2 = 9 [packed = true];
        private java.util.List<java.lang.Integer> mother2_ = java.util.Collections.emptyList();
        private void ensureMother2IsMutable() {
          if (!((bitField0_ & 0x00000100) == 0x00000100)) {
            mother2_ = new java.util.ArrayList<java.lang.Integer>(mother2_);
            bitField0_ |= 0x00000100;
           }
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getMother2List() {
          return java.util.Collections.unmodifiableList(mother2_);
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother
         * </pre>
         */
        public int getMother2Count() {
          return mother2_.size();
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother
         * </pre>
         */
        public int getMother2(int index) {
          return mother2_.get(index);
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother
         * </pre>
         */
        public Builder setMother2(
            int index, int value) {
          ensureMother2IsMutable();
          mother2_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother
         * </pre>
         */
        public Builder addMother2(int value) {
          ensureMother2IsMutable();
          mother2_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother
         * </pre>
         */
        public Builder addAllMother2(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureMother2IsMutable();
          super.addAll(values, mother2_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 mother2 = 9 [packed = true];</code>
         *
         * <pre>
         * second mother
         * </pre>
         */
        public Builder clearMother2() {
          mother2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }

        // repeated uint32 daughter1 = 10 [packed = true];
        private java.util.List<java.lang.Integer> daughter1_ = java.util.Collections.emptyList();
        private void ensureDaughter1IsMutable() {
          if (!((bitField0_ & 0x00000200) == 0x00000200)) {
            daughter1_ = new java.util.ArrayList<java.lang.Integer>(daughter1_);
            bitField0_ |= 0x00000200;
           }
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getDaughter1List() {
          return java.util.Collections.unmodifiableList(daughter1_);
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter
         * </pre>
         */
        public int getDaughter1Count() {
          return daughter1_.size();
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter
         * </pre>
         */
        public int getDaughter1(int index) {
          return daughter1_.get(index);
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter
         * </pre>
         */
        public Builder setDaughter1(
            int index, int value) {
          ensureDaughter1IsMutable();
          daughter1_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter
         * </pre>
         */
        public Builder addDaughter1(int value) {
          ensureDaughter1IsMutable();
          daughter1_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter
         * </pre>
         */
        public Builder addAllDaughter1(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureDaughter1IsMutable();
          super.addAll(values, daughter1_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter1 = 10 [packed = true];</code>
         *
         * <pre>
         * first daughter
         * </pre>
         */
        public Builder clearDaughter1() {
          daughter1_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
          return this;
        }

        // repeated uint32 daughter2 = 11 [packed = true];
        private java.util.List<java.lang.Integer> daughter2_ = java.util.Collections.emptyList();
        private void ensureDaughter2IsMutable() {
          if (!((bitField0_ & 0x00000400) == 0x00000400)) {
            daughter2_ = new java.util.ArrayList<java.lang.Integer>(daughter2_);
            bitField0_ |= 0x00000400;
           }
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getDaughter2List() {
          return java.util.Collections.unmodifiableList(daughter2_);
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter
         * </pre>
         */
        public int getDaughter2Count() {
          return daughter2_.size();
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter
         * </pre>
         */
        public int getDaughter2(int index) {
          return daughter2_.get(index);
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter
         * </pre>
         */
        public Builder setDaughter2(
            int index, int value) {
          ensureDaughter2IsMutable();
          daughter2_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter
         * </pre>
         */
        public Builder addDaughter2(int value) {
          ensureDaughter2IsMutable();
          daughter2_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter
         * </pre>
         */
        public Builder addAllDaughter2(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureDaughter2IsMutable();
          super.addAll(values, daughter2_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 daughter2 = 11 [packed = true];</code>
         *
         * <pre>
         * second daughter
         * </pre>
         */
        public Builder clearDaughter2() {
          daughter2_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
          return this;
        }

        // repeated sint32 barcode = 12 [packed = true];
        private java.util.List<java.lang.Integer> barcode_ = java.util.Collections.emptyList();
        private void ensureBarcodeIsMutable() {
          if (!((bitField0_ & 0x00000800) == 0x00000800)) {
            barcode_ = new java.util.ArrayList<java.lang.Integer>(barcode_);
            bitField0_ |= 0x00000800;
           }
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used. For Delphes: isPU  
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getBarcodeList() {
          return java.util.Collections.unmodifiableList(barcode_);
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used. For Delphes: isPU  
         * </pre>
         */
        public int getBarcodeCount() {
          return barcode_.size();
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used. For Delphes: isPU  
         * </pre>
         */
        public int getBarcode(int index) {
          return barcode_.get(index);
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used. For Delphes: isPU  
         * </pre>
         */
        public Builder setBarcode(
            int index, int value) {
          ensureBarcodeIsMutable();
          barcode_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used. For Delphes: isPU  
         * </pre>
         */
        public Builder addBarcode(int value) {
          ensureBarcodeIsMutable();
          barcode_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used. For Delphes: isPU  
         * </pre>
         */
        public Builder addAllBarcode(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureBarcodeIsMutable();
          super.addAll(values, barcode_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 barcode = 12 [packed = true];</code>
         *
         * <pre>
         * barcode if used. For Delphes: isPU  
         * </pre>
         */
        public Builder clearBarcode() {
          barcode_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
          return this;
        }

        // repeated sint32 X = 13 [packed = true];
        private java.util.List<java.lang.Integer> x_ = java.util.Collections.emptyList();
        private void ensureXIsMutable() {
          if (!((bitField0_ & 0x00001000) == 0x00001000)) {
            x_ = new java.util.ArrayList<java.lang.Integer>(x_);
            bitField0_ |= 0x00001000;
           }
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getXList() {
          return java.util.Collections.unmodifiableList(x_);
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public int getXCount() {
          return x_.size();
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public int getX(int index) {
          return x_.get(index);
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public Builder setX(
            int index, int value) {
          ensureXIsMutable();
          x_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public Builder addX(int value) {
          ensureXIsMutable();
          x_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public Builder addAllX(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureXIsMutable();
          super.addAll(values, x_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 X = 13 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public Builder clearX() {
          x_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00001000);
          onChanged();
          return this;
        }

        // repeated sint32 Y = 14 [packed = true];
        private java.util.List<java.lang.Integer> y_ = java.util.Collections.emptyList();
        private void ensureYIsMutable() {
          if (!((bitField0_ & 0x00002000) == 0x00002000)) {
            y_ = new java.util.ArrayList<java.lang.Integer>(y_);
            bitField0_ |= 0x00002000;
           }
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getYList() {
          return java.util.Collections.unmodifiableList(y_);
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public int getYCount() {
          return y_.size();
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public int getY(int index) {
          return y_.get(index);
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public Builder setY(
            int index, int value) {
          ensureYIsMutable();
          y_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public Builder addY(int value) {
          ensureYIsMutable();
          y_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public Builder addAllY(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureYIsMutable();
          super.addAll(values, y_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Y = 14 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public Builder clearY() {
          y_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
          return this;
        }

        // repeated sint32 Z = 15 [packed = true];
        private java.util.List<java.lang.Integer> z_ = java.util.Collections.emptyList();
        private void ensureZIsMutable() {
          if (!((bitField0_ & 0x00004000) == 0x00004000)) {
            z_ = new java.util.ArrayList<java.lang.Integer>(z_);
            bitField0_ |= 0x00004000;
           }
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getZList() {
          return java.util.Collections.unmodifiableList(z_);
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public int getZCount() {
          return z_.size();
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public int getZ(int index) {
          return z_.get(index);
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public Builder setZ(
            int index, int value) {
          ensureZIsMutable();
          z_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public Builder addZ(int value) {
          ensureZIsMutable();
          z_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public Builder addAllZ(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureZIsMutable();
          super.addAll(values, z_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Z = 15 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public Builder clearZ() {
          z_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
          onChanged();
          return this;
        }

        // repeated uint32 T = 16 [packed = true];
        private java.util.List<java.lang.Integer> t_ = java.util.Collections.emptyList();
        private void ensureTIsMutable() {
          if (!((bitField0_ & 0x00008000) == 0x00008000)) {
            t_ = new java.util.ArrayList<java.lang.Integer>(t_);
            bitField0_ |= 0x00008000;
           }
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getTList() {
          return java.util.Collections.unmodifiableList(t_);
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time
         * </pre>
         */
        public int getTCount() {
          return t_.size();
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time
         * </pre>
         */
        public int getT(int index) {
          return t_.get(index);
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time
         * </pre>
         */
        public Builder setT(
            int index, int value) {
          ensureTIsMutable();
          t_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time
         * </pre>
         */
        public Builder addT(int value) {
          ensureTIsMutable();
          t_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time
         * </pre>
         */
        public Builder addAllT(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureTIsMutable();
          super.addAll(values, t_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 T = 16 [packed = true];</code>
         *
         * <pre>
         * time
         * </pre>
         */
        public Builder clearT() {
          t_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
          return this;
        }

        // repeated uint64 weight = 17 [packed = true];
        private java.util.List<java.lang.Long> weight_ = java.util.Collections.emptyList();
        private void ensureWeightIsMutable() {
          if (!((bitField0_ & 0x00010000) == 0x00010000)) {
            weight_ = new java.util.ArrayList<java.lang.Long>(weight_);
            bitField0_ |= 0x00010000;
           }
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getWeightList() {
          return java.util.Collections.unmodifiableList(weight_);
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight
         * </pre>
         */
        public int getWeightCount() {
          return weight_.size();
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight
         * </pre>
         */
        public long getWeight(int index) {
          return weight_.get(index);
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight
         * </pre>
         */
        public Builder setWeight(
            int index, long value) {
          ensureWeightIsMutable();
          weight_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight
         * </pre>
         */
        public Builder addWeight(long value) {
          ensureWeightIsMutable();
          weight_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight
         * </pre>
         */
        public Builder addAllWeight(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureWeightIsMutable();
          super.addAll(values, weight_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 weight = 17 [packed = true];</code>
         *
         * <pre>
         * particle weight
         * </pre>
         */
        public Builder clearWeight() {
          weight_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
          return this;
        }

        // repeated sint32 charge = 18 [packed = true];
        private java.util.List<java.lang.Integer> charge_ = java.util.Collections.emptyList();
        private void ensureChargeIsMutable() {
          if (!((bitField0_ & 0x00020000) == 0x00020000)) {
            charge_ = new java.util.ArrayList<java.lang.Integer>(charge_);
            bitField0_ |= 0x00020000;
           }
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getChargeList() {
          return java.util.Collections.unmodifiableList(charge_);
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getChargeCount() {
          return charge_.size();
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getCharge(int index) {
          return charge_.get(index);
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder setCharge(
            int index, int value) {
          ensureChargeIsMutable();
          charge_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addCharge(int value) {
          ensureChargeIsMutable();
          charge_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addAllCharge(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureChargeIsMutable();
          super.addAll(values, charge_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 charge = 18 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder clearCharge() {
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
          return this;
        }

        // repeated uint64 PT = 19 [packed = true];
        private java.util.List<java.lang.Long> pT_ = java.util.Collections.emptyList();
        private void ensurePTIsMutable() {
          if (!((bitField0_ & 0x00040000) == 0x00040000)) {
            pT_ = new java.util.ArrayList<java.lang.Long>(pT_);
            bitField0_ |= 0x00040000;
           }
        }
        /**
         * <code>repeated uint64 PT = 19 [packed = true];</code>
         *
         * <pre>
         * Delphes specific
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPTList() {
          return java.util.Collections.unmodifiableList(pT_);
        }
        /**
         * <code>repeated uint64 PT = 19 [packed = true];</code>
         *
         * <pre>
         * Delphes specific
         * </pre>
         */
        public int getPTCount() {
          return pT_.size();
        }
        /**
         * <code>repeated uint64 PT = 19 [packed = true];</code>
         *
         * <pre>
         * Delphes specific
         * </pre>
         */
        public long getPT(int index) {
          return pT_.get(index);
        }
        /**
         * <code>repeated uint64 PT = 19 [packed = true];</code>
         *
         * <pre>
         * Delphes specific
         * </pre>
         */
        public Builder setPT(
            int index, long value) {
          ensurePTIsMutable();
          pT_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 19 [packed = true];</code>
         *
         * <pre>
         * Delphes specific
         * </pre>
         */
        public Builder addPT(long value) {
          ensurePTIsMutable();
          pT_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 19 [packed = true];</code>
         *
         * <pre>
         * Delphes specific
         * </pre>
         */
        public Builder addAllPT(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePTIsMutable();
          super.addAll(values, pT_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 19 [packed = true];</code>
         *
         * <pre>
         * Delphes specific
         * </pre>
         */
        public Builder clearPT() {
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00040000);
          onChanged();
          return this;
        }

        // repeated sint64 Eta = 20 [packed = true];
        private java.util.List<java.lang.Long> eta_ = java.util.Collections.emptyList();
        private void ensureEtaIsMutable() {
          if (!((bitField0_ & 0x00080000) == 0x00080000)) {
            eta_ = new java.util.ArrayList<java.lang.Long>(eta_);
            bitField0_ |= 0x00080000;
           }
        }
        /**
         * <code>repeated sint64 Eta = 20 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEtaList() {
          return java.util.Collections.unmodifiableList(eta_);
        }
        /**
         * <code>repeated sint64 Eta = 20 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public int getEtaCount() {
          return eta_.size();
        }
        /**
         * <code>repeated sint64 Eta = 20 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public long getEta(int index) {
          return eta_.get(index);
        }
        /**
         * <code>repeated sint64 Eta = 20 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder setEta(
            int index, long value) {
          ensureEtaIsMutable();
          eta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 20 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addEta(long value) {
          ensureEtaIsMutable();
          eta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 20 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addAllEta(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEtaIsMutable();
          super.addAll(values, eta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 20 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder clearEta() {
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
          onChanged();
          return this;
        }

        // repeated sint64 Phi = 21 [packed = true];
        private java.util.List<java.lang.Long> phi_ = java.util.Collections.emptyList();
        private void ensurePhiIsMutable() {
          if (!((bitField0_ & 0x00100000) == 0x00100000)) {
            phi_ = new java.util.ArrayList<java.lang.Long>(phi_);
            bitField0_ |= 0x00100000;
           }
        }
        /**
         * <code>repeated sint64 Phi = 21 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPhiList() {
          return java.util.Collections.unmodifiableList(phi_);
        }
        /**
         * <code>repeated sint64 Phi = 21 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public int getPhiCount() {
          return phi_.size();
        }
        /**
         * <code>repeated sint64 Phi = 21 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public long getPhi(int index) {
          return phi_.get(index);
        }
        /**
         * <code>repeated sint64 Phi = 21 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder setPhi(
            int index, long value) {
          ensurePhiIsMutable();
          phi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 21 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addPhi(long value) {
          ensurePhiIsMutable();
          phi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 21 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addAllPhi(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePhiIsMutable();
          super.addAll(values, phi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 21 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder clearPhi() {
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Particles)
      }

      static {
        defaultInstance = new Particles(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Particles)
    }

    public interface JetsOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint64 PT = 1 [packed = true];
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT 
       * </pre>
       */
      java.util.List<java.lang.Long> getPTList();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT 
       * </pre>
       */
      int getPTCount();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT 
       * </pre>
       */
      long getPT(int index);

      // repeated sint64 Eta = 2 [packed = true];
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      java.util.List<java.lang.Long> getEtaList();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      int getEtaCount();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      long getEta(int index);

      // repeated sint64 Phi = 3 [packed = true];
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      java.util.List<java.lang.Long> getPhiList();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      int getPhiCount();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      long getPhi(int index);

      // repeated uint64 Mass = 4 [packed = true];
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      java.util.List<java.lang.Long> getMassList();
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      int getMassCount();
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      long getMass(int index);

      // repeated sint32 Btag = 5 [packed = true];
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      java.util.List<java.lang.Integer> getBtagList();
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      int getBtagCount();
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      int getBtag(int index);

      // repeated sint32 Tautag = 6 [packed = true];
      /**
       * <code>repeated sint32 Tautag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag 
       * </pre>
       */
      java.util.List<java.lang.Integer> getTautagList();
      /**
       * <code>repeated sint32 Tautag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag 
       * </pre>
       */
      int getTautagCount();
      /**
       * <code>repeated sint32 Tautag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag 
       * </pre>
       */
      int getTautag(int index);

      // repeated sint32 Charge = 7 [packed = true];
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge 
       * </pre>
       */
      java.util.List<java.lang.Integer> getChargeList();
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge 
       * </pre>
       */
      int getChargeCount();
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge 
       * </pre>
       */
      int getCharge(int index);

      // repeated uint32 DeltaEta = 8 [packed = true];
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      java.util.List<java.lang.Integer> getDeltaEtaList();
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      int getDeltaEtaCount();
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      int getDeltaEta(int index);

      // repeated uint32 DeltaPhi = 9 [packed = true];
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi 
       * </pre>
       */
      java.util.List<java.lang.Integer> getDeltaPhiList();
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi 
       * </pre>
       */
      int getDeltaPhiCount();
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi 
       * </pre>
       */
      int getDeltaPhi(int index);

      // repeated sint32 HadOverEem = 10 [packed = true];
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem 
       * </pre>
       */
      java.util.List<java.lang.Integer> getHadOverEemList();
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem 
       * </pre>
       */
      int getHadOverEemCount();
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem 
       * </pre>
       */
      int getHadOverEem(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Jets}
     *
     * <pre>
     * reconstructed Jet 
     * </pre>
     */
    public static final class Jets extends
        com.google.protobuf.GeneratedMessage
        implements JetsOrBuilder {
      // Use Jets.newBuilder() to construct.
      private Jets(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Jets(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Jets defaultInstance;
      public static Jets getDefaultInstance() {
        return defaultInstance;
      }

      public Jets getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Jets(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                pT_.add(input.readUInt64());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pT_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                eta_.add(input.readSInt64());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  eta_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                phi_.add(input.readSInt64());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  phi_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  mass_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                mass_.add(input.readUInt64());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  mass_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mass_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  btag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                btag_.add(input.readSInt32());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  btag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  btag_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 48: {
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  tautag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                tautag_.add(input.readSInt32());
                break;
              }
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                  tautag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                while (input.getBytesUntilLimit() > 0) {
                  tautag_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 56: {
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000040;
                }
                charge_.add(input.readSInt32());
                break;
              }
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000040;
                }
                while (input.getBytesUntilLimit() > 0) {
                  charge_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 64: {
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                  deltaEta_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                deltaEta_.add(input.readUInt32());
                break;
              }
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                  deltaEta_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                while (input.getBytesUntilLimit() > 0) {
                  deltaEta_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 72: {
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                  deltaPhi_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                deltaPhi_.add(input.readUInt32());
                break;
              }
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                  deltaPhi_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                while (input.getBytesUntilLimit() > 0) {
                  deltaPhi_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 80: {
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                  hadOverEem_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                hadOverEem_.add(input.readSInt32());
                break;
              }
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                  hadOverEem_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                while (input.getBytesUntilLimit() > 0) {
                  hadOverEem_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = java.util.Collections.unmodifiableList(mass_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            btag_ = java.util.Collections.unmodifiableList(btag_);
          }
          if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
            tautag_ = java.util.Collections.unmodifiableList(tautag_);
          }
          if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
          }
          if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
            deltaEta_ = java.util.Collections.unmodifiableList(deltaEta_);
          }
          if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
            deltaPhi_ = java.util.Collections.unmodifiableList(deltaPhi_);
          }
          if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
            hadOverEem_ = java.util.Collections.unmodifiableList(hadOverEem_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Jets_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Jets_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.Jets.class, proreco.io.ProMC.ProMCEvent.Jets.Builder.class);
      }

      public static com.google.protobuf.Parser<Jets> PARSER =
          new com.google.protobuf.AbstractParser<Jets>() {
        public Jets parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Jets(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Jets> getParserForType() {
        return PARSER;
      }

      // repeated uint64 PT = 1 [packed = true];
      public static final int PT_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Long> pT_;
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPTList() {
        return pT_;
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT 
       * </pre>
       */
      public int getPTCount() {
        return pT_.size();
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT 
       * </pre>
       */
      public long getPT(int index) {
        return pT_.get(index);
      }
      private int pTMemoizedSerializedSize = -1;

      // repeated sint64 Eta = 2 [packed = true];
      public static final int ETA_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Long> eta_;
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEtaList() {
        return eta_;
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public int getEtaCount() {
        return eta_.size();
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public long getEta(int index) {
        return eta_.get(index);
      }
      private int etaMemoizedSerializedSize = -1;

      // repeated sint64 Phi = 3 [packed = true];
      public static final int PHI_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Long> phi_;
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPhiList() {
        return phi_;
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      public int getPhiCount() {
        return phi_.size();
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      public long getPhi(int index) {
        return phi_.get(index);
      }
      private int phiMemoizedSerializedSize = -1;

      // repeated uint64 Mass = 4 [packed = true];
      public static final int MASS_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Long> mass_;
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getMassList() {
        return mass_;
      }
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      public int getMassCount() {
        return mass_.size();
      }
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      public long getMass(int index) {
        return mass_.get(index);
      }
      private int massMemoizedSerializedSize = -1;

      // repeated sint32 Btag = 5 [packed = true];
      public static final int BTAG_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Integer> btag_;
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBtagList() {
        return btag_;
      }
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      public int getBtagCount() {
        return btag_.size();
      }
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      public int getBtag(int index) {
        return btag_.get(index);
      }
      private int btagMemoizedSerializedSize = -1;

      // repeated sint32 Tautag = 6 [packed = true];
      public static final int TAUTAG_FIELD_NUMBER = 6;
      private java.util.List<java.lang.Integer> tautag_;
      /**
       * <code>repeated sint32 Tautag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTautagList() {
        return tautag_;
      }
      /**
       * <code>repeated sint32 Tautag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag 
       * </pre>
       */
      public int getTautagCount() {
        return tautag_.size();
      }
      /**
       * <code>repeated sint32 Tautag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag 
       * </pre>
       */
      public int getTautag(int index) {
        return tautag_.get(index);
      }
      private int tautagMemoizedSerializedSize = -1;

      // repeated sint32 Charge = 7 [packed = true];
      public static final int CHARGE_FIELD_NUMBER = 7;
      private java.util.List<java.lang.Integer> charge_;
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChargeList() {
        return charge_;
      }
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge 
       * </pre>
       */
      public int getChargeCount() {
        return charge_.size();
      }
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge 
       * </pre>
       */
      public int getCharge(int index) {
        return charge_.get(index);
      }
      private int chargeMemoizedSerializedSize = -1;

      // repeated uint32 DeltaEta = 8 [packed = true];
      public static final int DELTAETA_FIELD_NUMBER = 8;
      private java.util.List<java.lang.Integer> deltaEta_;
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDeltaEtaList() {
        return deltaEta_;
      }
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      public int getDeltaEtaCount() {
        return deltaEta_.size();
      }
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      public int getDeltaEta(int index) {
        return deltaEta_.get(index);
      }
      private int deltaEtaMemoizedSerializedSize = -1;

      // repeated uint32 DeltaPhi = 9 [packed = true];
      public static final int DELTAPHI_FIELD_NUMBER = 9;
      private java.util.List<java.lang.Integer> deltaPhi_;
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDeltaPhiList() {
        return deltaPhi_;
      }
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi 
       * </pre>
       */
      public int getDeltaPhiCount() {
        return deltaPhi_.size();
      }
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi 
       * </pre>
       */
      public int getDeltaPhi(int index) {
        return deltaPhi_.get(index);
      }
      private int deltaPhiMemoizedSerializedSize = -1;

      // repeated sint32 HadOverEem = 10 [packed = true];
      public static final int HADOVEREEM_FIELD_NUMBER = 10;
      private java.util.List<java.lang.Integer> hadOverEem_;
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHadOverEemList() {
        return hadOverEem_;
      }
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem 
       * </pre>
       */
      public int getHadOverEemCount() {
        return hadOverEem_.size();
      }
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem 
       * </pre>
       */
      public int getHadOverEem(int index) {
        return hadOverEem_.get(index);
      }
      private int hadOverEemMemoizedSerializedSize = -1;

      private void initFields() {
        pT_ = java.util.Collections.emptyList();
        eta_ = java.util.Collections.emptyList();
        phi_ = java.util.Collections.emptyList();
        mass_ = java.util.Collections.emptyList();
        btag_ = java.util.Collections.emptyList();
        tautag_ = java.util.Collections.emptyList();
        charge_ = java.util.Collections.emptyList();
        deltaEta_ = java.util.Collections.emptyList();
        deltaPhi_ = java.util.Collections.emptyList();
        hadOverEem_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getPTList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(pTMemoizedSerializedSize);
        }
        for (int i = 0; i < pT_.size(); i++) {
          output.writeUInt64NoTag(pT_.get(i));
        }
        if (getEtaList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(etaMemoizedSerializedSize);
        }
        for (int i = 0; i < eta_.size(); i++) {
          output.writeSInt64NoTag(eta_.get(i));
        }
        if (getPhiList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(phiMemoizedSerializedSize);
        }
        for (int i = 0; i < phi_.size(); i++) {
          output.writeSInt64NoTag(phi_.get(i));
        }
        if (getMassList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(massMemoizedSerializedSize);
        }
        for (int i = 0; i < mass_.size(); i++) {
          output.writeUInt64NoTag(mass_.get(i));
        }
        if (getBtagList().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(btagMemoizedSerializedSize);
        }
        for (int i = 0; i < btag_.size(); i++) {
          output.writeSInt32NoTag(btag_.get(i));
        }
        if (getTautagList().size() > 0) {
          output.writeRawVarint32(50);
          output.writeRawVarint32(tautagMemoizedSerializedSize);
        }
        for (int i = 0; i < tautag_.size(); i++) {
          output.writeSInt32NoTag(tautag_.get(i));
        }
        if (getChargeList().size() > 0) {
          output.writeRawVarint32(58);
          output.writeRawVarint32(chargeMemoizedSerializedSize);
        }
        for (int i = 0; i < charge_.size(); i++) {
          output.writeSInt32NoTag(charge_.get(i));
        }
        if (getDeltaEtaList().size() > 0) {
          output.writeRawVarint32(66);
          output.writeRawVarint32(deltaEtaMemoizedSerializedSize);
        }
        for (int i = 0; i < deltaEta_.size(); i++) {
          output.writeUInt32NoTag(deltaEta_.get(i));
        }
        if (getDeltaPhiList().size() > 0) {
          output.writeRawVarint32(74);
          output.writeRawVarint32(deltaPhiMemoizedSerializedSize);
        }
        for (int i = 0; i < deltaPhi_.size(); i++) {
          output.writeUInt32NoTag(deltaPhi_.get(i));
        }
        if (getHadOverEemList().size() > 0) {
          output.writeRawVarint32(82);
          output.writeRawVarint32(hadOverEemMemoizedSerializedSize);
        }
        for (int i = 0; i < hadOverEem_.size(); i++) {
          output.writeSInt32NoTag(hadOverEem_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < pT_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(pT_.get(i));
          }
          size += dataSize;
          if (!getPTList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pTMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < eta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(eta_.get(i));
          }
          size += dataSize;
          if (!getEtaList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          etaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < phi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(phi_.get(i));
          }
          size += dataSize;
          if (!getPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          phiMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < mass_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(mass_.get(i));
          }
          size += dataSize;
          if (!getMassList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          massMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < btag_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(btag_.get(i));
          }
          size += dataSize;
          if (!getBtagList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          btagMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < tautag_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(tautag_.get(i));
          }
          size += dataSize;
          if (!getTautagList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          tautagMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < charge_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(charge_.get(i));
          }
          size += dataSize;
          if (!getChargeList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          chargeMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < deltaEta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(deltaEta_.get(i));
          }
          size += dataSize;
          if (!getDeltaEtaList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          deltaEtaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < deltaPhi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(deltaPhi_.get(i));
          }
          size += dataSize;
          if (!getDeltaPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          deltaPhiMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < hadOverEem_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(hadOverEem_.get(i));
          }
          size += dataSize;
          if (!getHadOverEemList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          hadOverEemMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static proreco.io.ProMC.ProMCEvent.Jets parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Jets parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Jets parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Jets parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Jets parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Jets parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Jets parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Jets parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Jets parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Jets parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proreco.io.ProMC.ProMCEvent.Jets prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Jets}
       *
       * <pre>
       * reconstructed Jet 
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements proreco.io.ProMC.ProMCEvent.JetsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Jets_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Jets_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  proreco.io.ProMC.ProMCEvent.Jets.class, proreco.io.ProMC.ProMCEvent.Jets.Builder.class);
        }

        // Construct using proreco.io.ProMC.ProMCEvent.Jets.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          mass_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          btag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          tautag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          deltaEta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          deltaPhi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          hadOverEem_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Jets_descriptor;
        }

        public proreco.io.ProMC.ProMCEvent.Jets getDefaultInstanceForType() {
          return proreco.io.ProMC.ProMCEvent.Jets.getDefaultInstance();
        }

        public proreco.io.ProMC.ProMCEvent.Jets build() {
          proreco.io.ProMC.ProMCEvent.Jets result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public proreco.io.ProMC.ProMCEvent.Jets buildPartial() {
          proreco.io.ProMC.ProMCEvent.Jets result = new proreco.io.ProMC.ProMCEvent.Jets(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pT_ = pT_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.eta_ = eta_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.phi_ = phi_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = java.util.Collections.unmodifiableList(mass_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.mass_ = mass_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            btag_ = java.util.Collections.unmodifiableList(btag_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.btag_ = btag_;
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            tautag_ = java.util.Collections.unmodifiableList(tautag_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.tautag_ = tautag_;
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.charge_ = charge_;
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            deltaEta_ = java.util.Collections.unmodifiableList(deltaEta_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.deltaEta_ = deltaEta_;
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            deltaPhi_ = java.util.Collections.unmodifiableList(deltaPhi_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.deltaPhi_ = deltaPhi_;
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            hadOverEem_ = java.util.Collections.unmodifiableList(hadOverEem_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.hadOverEem_ = hadOverEem_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof proreco.io.ProMC.ProMCEvent.Jets) {
            return mergeFrom((proreco.io.ProMC.ProMCEvent.Jets)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(proreco.io.ProMC.ProMCEvent.Jets other) {
          if (other == proreco.io.ProMC.ProMCEvent.Jets.getDefaultInstance()) return this;
          if (!other.pT_.isEmpty()) {
            if (pT_.isEmpty()) {
              pT_ = other.pT_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePTIsMutable();
              pT_.addAll(other.pT_);
            }
            onChanged();
          }
          if (!other.eta_.isEmpty()) {
            if (eta_.isEmpty()) {
              eta_ = other.eta_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEtaIsMutable();
              eta_.addAll(other.eta_);
            }
            onChanged();
          }
          if (!other.phi_.isEmpty()) {
            if (phi_.isEmpty()) {
              phi_ = other.phi_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePhiIsMutable();
              phi_.addAll(other.phi_);
            }
            onChanged();
          }
          if (!other.mass_.isEmpty()) {
            if (mass_.isEmpty()) {
              mass_ = other.mass_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMassIsMutable();
              mass_.addAll(other.mass_);
            }
            onChanged();
          }
          if (!other.btag_.isEmpty()) {
            if (btag_.isEmpty()) {
              btag_ = other.btag_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureBtagIsMutable();
              btag_.addAll(other.btag_);
            }
            onChanged();
          }
          if (!other.tautag_.isEmpty()) {
            if (tautag_.isEmpty()) {
              tautag_ = other.tautag_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureTautagIsMutable();
              tautag_.addAll(other.tautag_);
            }
            onChanged();
          }
          if (!other.charge_.isEmpty()) {
            if (charge_.isEmpty()) {
              charge_ = other.charge_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureChargeIsMutable();
              charge_.addAll(other.charge_);
            }
            onChanged();
          }
          if (!other.deltaEta_.isEmpty()) {
            if (deltaEta_.isEmpty()) {
              deltaEta_ = other.deltaEta_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureDeltaEtaIsMutable();
              deltaEta_.addAll(other.deltaEta_);
            }
            onChanged();
          }
          if (!other.deltaPhi_.isEmpty()) {
            if (deltaPhi_.isEmpty()) {
              deltaPhi_ = other.deltaPhi_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureDeltaPhiIsMutable();
              deltaPhi_.addAll(other.deltaPhi_);
            }
            onChanged();
          }
          if (!other.hadOverEem_.isEmpty()) {
            if (hadOverEem_.isEmpty()) {
              hadOverEem_ = other.hadOverEem_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureHadOverEemIsMutable();
              hadOverEem_.addAll(other.hadOverEem_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          proreco.io.ProMC.ProMCEvent.Jets parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (proreco.io.ProMC.ProMCEvent.Jets) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint64 PT = 1 [packed = true];
        private java.util.List<java.lang.Long> pT_ = java.util.Collections.emptyList();
        private void ensurePTIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = new java.util.ArrayList<java.lang.Long>(pT_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPTList() {
          return java.util.Collections.unmodifiableList(pT_);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT 
         * </pre>
         */
        public int getPTCount() {
          return pT_.size();
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT 
         * </pre>
         */
        public long getPT(int index) {
          return pT_.get(index);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT 
         * </pre>
         */
        public Builder setPT(
            int index, long value) {
          ensurePTIsMutable();
          pT_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT 
         * </pre>
         */
        public Builder addPT(long value) {
          ensurePTIsMutable();
          pT_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT 
         * </pre>
         */
        public Builder addAllPT(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePTIsMutable();
          super.addAll(values, pT_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT 
         * </pre>
         */
        public Builder clearPT() {
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint64 Eta = 2 [packed = true];
        private java.util.List<java.lang.Long> eta_ = java.util.Collections.emptyList();
        private void ensureEtaIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = new java.util.ArrayList<java.lang.Long>(eta_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEtaList() {
          return java.util.Collections.unmodifiableList(eta_);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public int getEtaCount() {
          return eta_.size();
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public long getEta(int index) {
          return eta_.get(index);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder setEta(
            int index, long value) {
          ensureEtaIsMutable();
          eta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addEta(long value) {
          ensureEtaIsMutable();
          eta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addAllEta(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEtaIsMutable();
          super.addAll(values, eta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder clearEta() {
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated sint64 Phi = 3 [packed = true];
        private java.util.List<java.lang.Long> phi_ = java.util.Collections.emptyList();
        private void ensurePhiIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = new java.util.ArrayList<java.lang.Long>(phi_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPhiList() {
          return java.util.Collections.unmodifiableList(phi_);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public int getPhiCount() {
          return phi_.size();
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public long getPhi(int index) {
          return phi_.get(index);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public Builder setPhi(
            int index, long value) {
          ensurePhiIsMutable();
          phi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public Builder addPhi(long value) {
          ensurePhiIsMutable();
          phi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public Builder addAllPhi(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePhiIsMutable();
          super.addAll(values, phi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public Builder clearPhi() {
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated uint64 Mass = 4 [packed = true];
        private java.util.List<java.lang.Long> mass_ = java.util.Collections.emptyList();
        private void ensureMassIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = new java.util.ArrayList<java.lang.Long>(mass_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getMassList() {
          return java.util.Collections.unmodifiableList(mass_);
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public int getMassCount() {
          return mass_.size();
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public long getMass(int index) {
          return mass_.get(index);
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public Builder setMass(
            int index, long value) {
          ensureMassIsMutable();
          mass_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public Builder addMass(long value) {
          ensureMassIsMutable();
          mass_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public Builder addAllMass(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureMassIsMutable();
          super.addAll(values, mass_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public Builder clearMass() {
          mass_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // repeated sint32 Btag = 5 [packed = true];
        private java.util.List<java.lang.Integer> btag_ = java.util.Collections.emptyList();
        private void ensureBtagIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            btag_ = new java.util.ArrayList<java.lang.Integer>(btag_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getBtagList() {
          return java.util.Collections.unmodifiableList(btag_);
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public int getBtagCount() {
          return btag_.size();
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public int getBtag(int index) {
          return btag_.get(index);
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public Builder setBtag(
            int index, int value) {
          ensureBtagIsMutable();
          btag_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public Builder addBtag(int value) {
          ensureBtagIsMutable();
          btag_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public Builder addAllBtag(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureBtagIsMutable();
          super.addAll(values, btag_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public Builder clearBtag() {
          btag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        // repeated sint32 Tautag = 6 [packed = true];
        private java.util.List<java.lang.Integer> tautag_ = java.util.Collections.emptyList();
        private void ensureTautagIsMutable() {
          if (!((bitField0_ & 0x00000020) == 0x00000020)) {
            tautag_ = new java.util.ArrayList<java.lang.Integer>(tautag_);
            bitField0_ |= 0x00000020;
           }
        }
        /**
         * <code>repeated sint32 Tautag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getTautagList() {
          return java.util.Collections.unmodifiableList(tautag_);
        }
        /**
         * <code>repeated sint32 Tautag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag 
         * </pre>
         */
        public int getTautagCount() {
          return tautag_.size();
        }
        /**
         * <code>repeated sint32 Tautag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag 
         * </pre>
         */
        public int getTautag(int index) {
          return tautag_.get(index);
        }
        /**
         * <code>repeated sint32 Tautag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag 
         * </pre>
         */
        public Builder setTautag(
            int index, int value) {
          ensureTautagIsMutable();
          tautag_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Tautag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag 
         * </pre>
         */
        public Builder addTautag(int value) {
          ensureTautagIsMutable();
          tautag_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Tautag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag 
         * </pre>
         */
        public Builder addAllTautag(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureTautagIsMutable();
          super.addAll(values, tautag_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Tautag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag 
         * </pre>
         */
        public Builder clearTautag() {
          tautag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        // repeated sint32 Charge = 7 [packed = true];
        private java.util.List<java.lang.Integer> charge_ = java.util.Collections.emptyList();
        private void ensureChargeIsMutable() {
          if (!((bitField0_ & 0x00000040) == 0x00000040)) {
            charge_ = new java.util.ArrayList<java.lang.Integer>(charge_);
            bitField0_ |= 0x00000040;
           }
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getChargeList() {
          return java.util.Collections.unmodifiableList(charge_);
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge 
         * </pre>
         */
        public int getChargeCount() {
          return charge_.size();
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge 
         * </pre>
         */
        public int getCharge(int index) {
          return charge_.get(index);
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge 
         * </pre>
         */
        public Builder setCharge(
            int index, int value) {
          ensureChargeIsMutable();
          charge_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge 
         * </pre>
         */
        public Builder addCharge(int value) {
          ensureChargeIsMutable();
          charge_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge 
         * </pre>
         */
        public Builder addAllCharge(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureChargeIsMutable();
          super.addAll(values, charge_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge 
         * </pre>
         */
        public Builder clearCharge() {
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }

        // repeated uint32 DeltaEta = 8 [packed = true];
        private java.util.List<java.lang.Integer> deltaEta_ = java.util.Collections.emptyList();
        private void ensureDeltaEtaIsMutable() {
          if (!((bitField0_ & 0x00000080) == 0x00000080)) {
            deltaEta_ = new java.util.ArrayList<java.lang.Integer>(deltaEta_);
            bitField0_ |= 0x00000080;
           }
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getDeltaEtaList() {
          return java.util.Collections.unmodifiableList(deltaEta_);
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public int getDeltaEtaCount() {
          return deltaEta_.size();
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public int getDeltaEta(int index) {
          return deltaEta_.get(index);
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder setDeltaEta(
            int index, int value) {
          ensureDeltaEtaIsMutable();
          deltaEta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder addDeltaEta(int value) {
          ensureDeltaEtaIsMutable();
          deltaEta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder addAllDeltaEta(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureDeltaEtaIsMutable();
          super.addAll(values, deltaEta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder clearDeltaEta() {
          deltaEta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
          return this;
        }

        // repeated uint32 DeltaPhi = 9 [packed = true];
        private java.util.List<java.lang.Integer> deltaPhi_ = java.util.Collections.emptyList();
        private void ensureDeltaPhiIsMutable() {
          if (!((bitField0_ & 0x00000100) == 0x00000100)) {
            deltaPhi_ = new java.util.ArrayList<java.lang.Integer>(deltaPhi_);
            bitField0_ |= 0x00000100;
           }
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getDeltaPhiList() {
          return java.util.Collections.unmodifiableList(deltaPhi_);
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi 
         * </pre>
         */
        public int getDeltaPhiCount() {
          return deltaPhi_.size();
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi 
         * </pre>
         */
        public int getDeltaPhi(int index) {
          return deltaPhi_.get(index);
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi 
         * </pre>
         */
        public Builder setDeltaPhi(
            int index, int value) {
          ensureDeltaPhiIsMutable();
          deltaPhi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi 
         * </pre>
         */
        public Builder addDeltaPhi(int value) {
          ensureDeltaPhiIsMutable();
          deltaPhi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi 
         * </pre>
         */
        public Builder addAllDeltaPhi(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureDeltaPhiIsMutable();
          super.addAll(values, deltaPhi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi 
         * </pre>
         */
        public Builder clearDeltaPhi() {
          deltaPhi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }

        // repeated sint32 HadOverEem = 10 [packed = true];
        private java.util.List<java.lang.Integer> hadOverEem_ = java.util.Collections.emptyList();
        private void ensureHadOverEemIsMutable() {
          if (!((bitField0_ & 0x00000200) == 0x00000200)) {
            hadOverEem_ = new java.util.ArrayList<java.lang.Integer>(hadOverEem_);
            bitField0_ |= 0x00000200;
           }
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getHadOverEemList() {
          return java.util.Collections.unmodifiableList(hadOverEem_);
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem 
         * </pre>
         */
        public int getHadOverEemCount() {
          return hadOverEem_.size();
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem 
         * </pre>
         */
        public int getHadOverEem(int index) {
          return hadOverEem_.get(index);
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem 
         * </pre>
         */
        public Builder setHadOverEem(
            int index, int value) {
          ensureHadOverEemIsMutable();
          hadOverEem_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem 
         * </pre>
         */
        public Builder addHadOverEem(int value) {
          ensureHadOverEemIsMutable();
          hadOverEem_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem 
         * </pre>
         */
        public Builder addAllHadOverEem(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureHadOverEemIsMutable();
          super.addAll(values, hadOverEem_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem 
         * </pre>
         */
        public Builder clearHadOverEem() {
          hadOverEem_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Jets)
      }

      static {
        defaultInstance = new Jets(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Jets)
    }

    public interface BLJetsOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint64 PT = 1 [packed = true];
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      java.util.List<java.lang.Long> getPTList();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      int getPTCount();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      long getPT(int index);

      // repeated sint64 Eta = 2 [packed = true];
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      java.util.List<java.lang.Long> getEtaList();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      int getEtaCount();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      long getEta(int index);

      // repeated sint64 Phi = 3 [packed = true];
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      java.util.List<java.lang.Long> getPhiList();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      int getPhiCount();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      long getPhi(int index);

      // repeated uint64 Mass = 4 [packed = true];
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass
       * </pre>
       */
      java.util.List<java.lang.Long> getMassList();
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass
       * </pre>
       */
      int getMassCount();
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass
       * </pre>
       */
      long getMass(int index);

      // repeated sint32 Btag = 5 [packed = true];
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag
       * </pre>
       */
      java.util.List<java.lang.Integer> getBtagList();
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag
       * </pre>
       */
      int getBtagCount();
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag
       * </pre>
       */
      int getBtag(int index);

      // repeated sint32 TauTag = 6 [packed = true];
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag
       * </pre>
       */
      java.util.List<java.lang.Integer> getTauTagList();
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag
       * </pre>
       */
      int getTauTagCount();
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag
       * </pre>
       */
      int getTauTag(int index);

      // repeated sint32 Charge = 7 [packed = true];
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      java.util.List<java.lang.Integer> getChargeList();
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getChargeCount();
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getCharge(int index);

      // repeated uint32 DeltaEta = 8 [packed = true];
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      java.util.List<java.lang.Integer> getDeltaEtaList();
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      int getDeltaEtaCount();
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      int getDeltaEta(int index);

      // repeated uint32 DeltaPhi = 9 [packed = true];
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      java.util.List<java.lang.Integer> getDeltaPhiList();
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      int getDeltaPhiCount();
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      int getDeltaPhi(int index);

      // repeated sint32 HadOverEem = 10 [packed = true];
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      java.util.List<java.lang.Integer> getHadOverEemList();
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      int getHadOverEemCount();
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      int getHadOverEem(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.BLJets}
     *
     * <pre>
     * b-tagged jets
     * </pre>
     */
    public static final class BLJets extends
        com.google.protobuf.GeneratedMessage
        implements BLJetsOrBuilder {
      // Use BLJets.newBuilder() to construct.
      private BLJets(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private BLJets(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final BLJets defaultInstance;
      public static BLJets getDefaultInstance() {
        return defaultInstance;
      }

      public BLJets getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private BLJets(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                pT_.add(input.readUInt64());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pT_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                eta_.add(input.readSInt64());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  eta_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                phi_.add(input.readSInt64());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  phi_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  mass_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                mass_.add(input.readUInt64());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  mass_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mass_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  btag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                btag_.add(input.readSInt32());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  btag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  btag_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 48: {
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  tauTag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                tauTag_.add(input.readSInt32());
                break;
              }
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                  tauTag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                while (input.getBytesUntilLimit() > 0) {
                  tauTag_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 56: {
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000040;
                }
                charge_.add(input.readSInt32());
                break;
              }
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000040;
                }
                while (input.getBytesUntilLimit() > 0) {
                  charge_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 64: {
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                  deltaEta_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                deltaEta_.add(input.readUInt32());
                break;
              }
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                  deltaEta_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                while (input.getBytesUntilLimit() > 0) {
                  deltaEta_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 72: {
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                  deltaPhi_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                deltaPhi_.add(input.readUInt32());
                break;
              }
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                  deltaPhi_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                while (input.getBytesUntilLimit() > 0) {
                  deltaPhi_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 80: {
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                  hadOverEem_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                hadOverEem_.add(input.readSInt32());
                break;
              }
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                  hadOverEem_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                while (input.getBytesUntilLimit() > 0) {
                  hadOverEem_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = java.util.Collections.unmodifiableList(mass_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            btag_ = java.util.Collections.unmodifiableList(btag_);
          }
          if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
            tauTag_ = java.util.Collections.unmodifiableList(tauTag_);
          }
          if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
          }
          if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
            deltaEta_ = java.util.Collections.unmodifiableList(deltaEta_);
          }
          if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
            deltaPhi_ = java.util.Collections.unmodifiableList(deltaPhi_);
          }
          if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
            hadOverEem_ = java.util.Collections.unmodifiableList(hadOverEem_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_BLJets_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_BLJets_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.BLJets.class, proreco.io.ProMC.ProMCEvent.BLJets.Builder.class);
      }

      public static com.google.protobuf.Parser<BLJets> PARSER =
          new com.google.protobuf.AbstractParser<BLJets>() {
        public BLJets parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new BLJets(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<BLJets> getParserForType() {
        return PARSER;
      }

      // repeated uint64 PT = 1 [packed = true];
      public static final int PT_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Long> pT_;
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPTList() {
        return pT_;
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public int getPTCount() {
        return pT_.size();
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public long getPT(int index) {
        return pT_.get(index);
      }
      private int pTMemoizedSerializedSize = -1;

      // repeated sint64 Eta = 2 [packed = true];
      public static final int ETA_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Long> eta_;
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEtaList() {
        return eta_;
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public int getEtaCount() {
        return eta_.size();
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public long getEta(int index) {
        return eta_.get(index);
      }
      private int etaMemoizedSerializedSize = -1;

      // repeated sint64 Phi = 3 [packed = true];
      public static final int PHI_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Long> phi_;
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPhiList() {
        return phi_;
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public int getPhiCount() {
        return phi_.size();
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public long getPhi(int index) {
        return phi_.get(index);
      }
      private int phiMemoizedSerializedSize = -1;

      // repeated uint64 Mass = 4 [packed = true];
      public static final int MASS_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Long> mass_;
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getMassList() {
        return mass_;
      }
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass
       * </pre>
       */
      public int getMassCount() {
        return mass_.size();
      }
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass
       * </pre>
       */
      public long getMass(int index) {
        return mass_.get(index);
      }
      private int massMemoizedSerializedSize = -1;

      // repeated sint32 Btag = 5 [packed = true];
      public static final int BTAG_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Integer> btag_;
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBtagList() {
        return btag_;
      }
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag
       * </pre>
       */
      public int getBtagCount() {
        return btag_.size();
      }
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag
       * </pre>
       */
      public int getBtag(int index) {
        return btag_.get(index);
      }
      private int btagMemoizedSerializedSize = -1;

      // repeated sint32 TauTag = 6 [packed = true];
      public static final int TAUTAG_FIELD_NUMBER = 6;
      private java.util.List<java.lang.Integer> tauTag_;
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTauTagList() {
        return tauTag_;
      }
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag
       * </pre>
       */
      public int getTauTagCount() {
        return tauTag_.size();
      }
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag
       * </pre>
       */
      public int getTauTag(int index) {
        return tauTag_.get(index);
      }
      private int tauTagMemoizedSerializedSize = -1;

      // repeated sint32 Charge = 7 [packed = true];
      public static final int CHARGE_FIELD_NUMBER = 7;
      private java.util.List<java.lang.Integer> charge_;
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChargeList() {
        return charge_;
      }
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getChargeCount() {
        return charge_.size();
      }
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getCharge(int index) {
        return charge_.get(index);
      }
      private int chargeMemoizedSerializedSize = -1;

      // repeated uint32 DeltaEta = 8 [packed = true];
      public static final int DELTAETA_FIELD_NUMBER = 8;
      private java.util.List<java.lang.Integer> deltaEta_;
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDeltaEtaList() {
        return deltaEta_;
      }
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      public int getDeltaEtaCount() {
        return deltaEta_.size();
      }
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      public int getDeltaEta(int index) {
        return deltaEta_.get(index);
      }
      private int deltaEtaMemoizedSerializedSize = -1;

      // repeated uint32 DeltaPhi = 9 [packed = true];
      public static final int DELTAPHI_FIELD_NUMBER = 9;
      private java.util.List<java.lang.Integer> deltaPhi_;
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDeltaPhiList() {
        return deltaPhi_;
      }
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      public int getDeltaPhiCount() {
        return deltaPhi_.size();
      }
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      public int getDeltaPhi(int index) {
        return deltaPhi_.get(index);
      }
      private int deltaPhiMemoizedSerializedSize = -1;

      // repeated sint32 HadOverEem = 10 [packed = true];
      public static final int HADOVEREEM_FIELD_NUMBER = 10;
      private java.util.List<java.lang.Integer> hadOverEem_;
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHadOverEemList() {
        return hadOverEem_;
      }
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      public int getHadOverEemCount() {
        return hadOverEem_.size();
      }
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      public int getHadOverEem(int index) {
        return hadOverEem_.get(index);
      }
      private int hadOverEemMemoizedSerializedSize = -1;

      private void initFields() {
        pT_ = java.util.Collections.emptyList();
        eta_ = java.util.Collections.emptyList();
        phi_ = java.util.Collections.emptyList();
        mass_ = java.util.Collections.emptyList();
        btag_ = java.util.Collections.emptyList();
        tauTag_ = java.util.Collections.emptyList();
        charge_ = java.util.Collections.emptyList();
        deltaEta_ = java.util.Collections.emptyList();
        deltaPhi_ = java.util.Collections.emptyList();
        hadOverEem_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getPTList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(pTMemoizedSerializedSize);
        }
        for (int i = 0; i < pT_.size(); i++) {
          output.writeUInt64NoTag(pT_.get(i));
        }
        if (getEtaList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(etaMemoizedSerializedSize);
        }
        for (int i = 0; i < eta_.size(); i++) {
          output.writeSInt64NoTag(eta_.get(i));
        }
        if (getPhiList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(phiMemoizedSerializedSize);
        }
        for (int i = 0; i < phi_.size(); i++) {
          output.writeSInt64NoTag(phi_.get(i));
        }
        if (getMassList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(massMemoizedSerializedSize);
        }
        for (int i = 0; i < mass_.size(); i++) {
          output.writeUInt64NoTag(mass_.get(i));
        }
        if (getBtagList().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(btagMemoizedSerializedSize);
        }
        for (int i = 0; i < btag_.size(); i++) {
          output.writeSInt32NoTag(btag_.get(i));
        }
        if (getTauTagList().size() > 0) {
          output.writeRawVarint32(50);
          output.writeRawVarint32(tauTagMemoizedSerializedSize);
        }
        for (int i = 0; i < tauTag_.size(); i++) {
          output.writeSInt32NoTag(tauTag_.get(i));
        }
        if (getChargeList().size() > 0) {
          output.writeRawVarint32(58);
          output.writeRawVarint32(chargeMemoizedSerializedSize);
        }
        for (int i = 0; i < charge_.size(); i++) {
          output.writeSInt32NoTag(charge_.get(i));
        }
        if (getDeltaEtaList().size() > 0) {
          output.writeRawVarint32(66);
          output.writeRawVarint32(deltaEtaMemoizedSerializedSize);
        }
        for (int i = 0; i < deltaEta_.size(); i++) {
          output.writeUInt32NoTag(deltaEta_.get(i));
        }
        if (getDeltaPhiList().size() > 0) {
          output.writeRawVarint32(74);
          output.writeRawVarint32(deltaPhiMemoizedSerializedSize);
        }
        for (int i = 0; i < deltaPhi_.size(); i++) {
          output.writeUInt32NoTag(deltaPhi_.get(i));
        }
        if (getHadOverEemList().size() > 0) {
          output.writeRawVarint32(82);
          output.writeRawVarint32(hadOverEemMemoizedSerializedSize);
        }
        for (int i = 0; i < hadOverEem_.size(); i++) {
          output.writeSInt32NoTag(hadOverEem_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < pT_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(pT_.get(i));
          }
          size += dataSize;
          if (!getPTList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pTMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < eta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(eta_.get(i));
          }
          size += dataSize;
          if (!getEtaList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          etaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < phi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(phi_.get(i));
          }
          size += dataSize;
          if (!getPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          phiMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < mass_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(mass_.get(i));
          }
          size += dataSize;
          if (!getMassList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          massMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < btag_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(btag_.get(i));
          }
          size += dataSize;
          if (!getBtagList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          btagMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < tauTag_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(tauTag_.get(i));
          }
          size += dataSize;
          if (!getTauTagList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          tauTagMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < charge_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(charge_.get(i));
          }
          size += dataSize;
          if (!getChargeList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          chargeMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < deltaEta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(deltaEta_.get(i));
          }
          size += dataSize;
          if (!getDeltaEtaList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          deltaEtaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < deltaPhi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(deltaPhi_.get(i));
          }
          size += dataSize;
          if (!getDeltaPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          deltaPhiMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < hadOverEem_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(hadOverEem_.get(i));
          }
          size += dataSize;
          if (!getHadOverEemList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          hadOverEemMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static proreco.io.ProMC.ProMCEvent.BLJets parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.BLJets parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.BLJets parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.BLJets parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.BLJets parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.BLJets parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.BLJets parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.BLJets parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.BLJets parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.BLJets parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proreco.io.ProMC.ProMCEvent.BLJets prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.BLJets}
       *
       * <pre>
       * b-tagged jets
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements proreco.io.ProMC.ProMCEvent.BLJetsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_BLJets_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_BLJets_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  proreco.io.ProMC.ProMCEvent.BLJets.class, proreco.io.ProMC.ProMCEvent.BLJets.Builder.class);
        }

        // Construct using proreco.io.ProMC.ProMCEvent.BLJets.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          mass_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          btag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          tauTag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          deltaEta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          deltaPhi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          hadOverEem_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_BLJets_descriptor;
        }

        public proreco.io.ProMC.ProMCEvent.BLJets getDefaultInstanceForType() {
          return proreco.io.ProMC.ProMCEvent.BLJets.getDefaultInstance();
        }

        public proreco.io.ProMC.ProMCEvent.BLJets build() {
          proreco.io.ProMC.ProMCEvent.BLJets result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public proreco.io.ProMC.ProMCEvent.BLJets buildPartial() {
          proreco.io.ProMC.ProMCEvent.BLJets result = new proreco.io.ProMC.ProMCEvent.BLJets(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pT_ = pT_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.eta_ = eta_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.phi_ = phi_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = java.util.Collections.unmodifiableList(mass_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.mass_ = mass_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            btag_ = java.util.Collections.unmodifiableList(btag_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.btag_ = btag_;
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            tauTag_ = java.util.Collections.unmodifiableList(tauTag_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.tauTag_ = tauTag_;
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.charge_ = charge_;
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            deltaEta_ = java.util.Collections.unmodifiableList(deltaEta_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.deltaEta_ = deltaEta_;
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            deltaPhi_ = java.util.Collections.unmodifiableList(deltaPhi_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.deltaPhi_ = deltaPhi_;
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            hadOverEem_ = java.util.Collections.unmodifiableList(hadOverEem_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.hadOverEem_ = hadOverEem_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof proreco.io.ProMC.ProMCEvent.BLJets) {
            return mergeFrom((proreco.io.ProMC.ProMCEvent.BLJets)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(proreco.io.ProMC.ProMCEvent.BLJets other) {
          if (other == proreco.io.ProMC.ProMCEvent.BLJets.getDefaultInstance()) return this;
          if (!other.pT_.isEmpty()) {
            if (pT_.isEmpty()) {
              pT_ = other.pT_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePTIsMutable();
              pT_.addAll(other.pT_);
            }
            onChanged();
          }
          if (!other.eta_.isEmpty()) {
            if (eta_.isEmpty()) {
              eta_ = other.eta_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEtaIsMutable();
              eta_.addAll(other.eta_);
            }
            onChanged();
          }
          if (!other.phi_.isEmpty()) {
            if (phi_.isEmpty()) {
              phi_ = other.phi_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePhiIsMutable();
              phi_.addAll(other.phi_);
            }
            onChanged();
          }
          if (!other.mass_.isEmpty()) {
            if (mass_.isEmpty()) {
              mass_ = other.mass_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMassIsMutable();
              mass_.addAll(other.mass_);
            }
            onChanged();
          }
          if (!other.btag_.isEmpty()) {
            if (btag_.isEmpty()) {
              btag_ = other.btag_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureBtagIsMutable();
              btag_.addAll(other.btag_);
            }
            onChanged();
          }
          if (!other.tauTag_.isEmpty()) {
            if (tauTag_.isEmpty()) {
              tauTag_ = other.tauTag_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureTauTagIsMutable();
              tauTag_.addAll(other.tauTag_);
            }
            onChanged();
          }
          if (!other.charge_.isEmpty()) {
            if (charge_.isEmpty()) {
              charge_ = other.charge_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureChargeIsMutable();
              charge_.addAll(other.charge_);
            }
            onChanged();
          }
          if (!other.deltaEta_.isEmpty()) {
            if (deltaEta_.isEmpty()) {
              deltaEta_ = other.deltaEta_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureDeltaEtaIsMutable();
              deltaEta_.addAll(other.deltaEta_);
            }
            onChanged();
          }
          if (!other.deltaPhi_.isEmpty()) {
            if (deltaPhi_.isEmpty()) {
              deltaPhi_ = other.deltaPhi_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureDeltaPhiIsMutable();
              deltaPhi_.addAll(other.deltaPhi_);
            }
            onChanged();
          }
          if (!other.hadOverEem_.isEmpty()) {
            if (hadOverEem_.isEmpty()) {
              hadOverEem_ = other.hadOverEem_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureHadOverEemIsMutable();
              hadOverEem_.addAll(other.hadOverEem_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          proreco.io.ProMC.ProMCEvent.BLJets parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (proreco.io.ProMC.ProMCEvent.BLJets) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint64 PT = 1 [packed = true];
        private java.util.List<java.lang.Long> pT_ = java.util.Collections.emptyList();
        private void ensurePTIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = new java.util.ArrayList<java.lang.Long>(pT_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPTList() {
          return java.util.Collections.unmodifiableList(pT_);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public int getPTCount() {
          return pT_.size();
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public long getPT(int index) {
          return pT_.get(index);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder setPT(
            int index, long value) {
          ensurePTIsMutable();
          pT_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addPT(long value) {
          ensurePTIsMutable();
          pT_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addAllPT(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePTIsMutable();
          super.addAll(values, pT_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder clearPT() {
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint64 Eta = 2 [packed = true];
        private java.util.List<java.lang.Long> eta_ = java.util.Collections.emptyList();
        private void ensureEtaIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = new java.util.ArrayList<java.lang.Long>(eta_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEtaList() {
          return java.util.Collections.unmodifiableList(eta_);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public int getEtaCount() {
          return eta_.size();
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public long getEta(int index) {
          return eta_.get(index);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder setEta(
            int index, long value) {
          ensureEtaIsMutable();
          eta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addEta(long value) {
          ensureEtaIsMutable();
          eta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addAllEta(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEtaIsMutable();
          super.addAll(values, eta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder clearEta() {
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated sint64 Phi = 3 [packed = true];
        private java.util.List<java.lang.Long> phi_ = java.util.Collections.emptyList();
        private void ensurePhiIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = new java.util.ArrayList<java.lang.Long>(phi_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPhiList() {
          return java.util.Collections.unmodifiableList(phi_);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public int getPhiCount() {
          return phi_.size();
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public long getPhi(int index) {
          return phi_.get(index);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder setPhi(
            int index, long value) {
          ensurePhiIsMutable();
          phi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addPhi(long value) {
          ensurePhiIsMutable();
          phi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addAllPhi(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePhiIsMutable();
          super.addAll(values, phi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder clearPhi() {
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated uint64 Mass = 4 [packed = true];
        private java.util.List<java.lang.Long> mass_ = java.util.Collections.emptyList();
        private void ensureMassIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = new java.util.ArrayList<java.lang.Long>(mass_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getMassList() {
          return java.util.Collections.unmodifiableList(mass_);
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass
         * </pre>
         */
        public int getMassCount() {
          return mass_.size();
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass
         * </pre>
         */
        public long getMass(int index) {
          return mass_.get(index);
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass
         * </pre>
         */
        public Builder setMass(
            int index, long value) {
          ensureMassIsMutable();
          mass_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass
         * </pre>
         */
        public Builder addMass(long value) {
          ensureMassIsMutable();
          mass_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass
         * </pre>
         */
        public Builder addAllMass(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureMassIsMutable();
          super.addAll(values, mass_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass
         * </pre>
         */
        public Builder clearMass() {
          mass_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // repeated sint32 Btag = 5 [packed = true];
        private java.util.List<java.lang.Integer> btag_ = java.util.Collections.emptyList();
        private void ensureBtagIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            btag_ = new java.util.ArrayList<java.lang.Integer>(btag_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getBtagList() {
          return java.util.Collections.unmodifiableList(btag_);
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag
         * </pre>
         */
        public int getBtagCount() {
          return btag_.size();
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag
         * </pre>
         */
        public int getBtag(int index) {
          return btag_.get(index);
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag
         * </pre>
         */
        public Builder setBtag(
            int index, int value) {
          ensureBtagIsMutable();
          btag_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag
         * </pre>
         */
        public Builder addBtag(int value) {
          ensureBtagIsMutable();
          btag_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag
         * </pre>
         */
        public Builder addAllBtag(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureBtagIsMutable();
          super.addAll(values, btag_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag
         * </pre>
         */
        public Builder clearBtag() {
          btag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        // repeated sint32 TauTag = 6 [packed = true];
        private java.util.List<java.lang.Integer> tauTag_ = java.util.Collections.emptyList();
        private void ensureTauTagIsMutable() {
          if (!((bitField0_ & 0x00000020) == 0x00000020)) {
            tauTag_ = new java.util.ArrayList<java.lang.Integer>(tauTag_);
            bitField0_ |= 0x00000020;
           }
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getTauTagList() {
          return java.util.Collections.unmodifiableList(tauTag_);
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag
         * </pre>
         */
        public int getTauTagCount() {
          return tauTag_.size();
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag
         * </pre>
         */
        public int getTauTag(int index) {
          return tauTag_.get(index);
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag
         * </pre>
         */
        public Builder setTauTag(
            int index, int value) {
          ensureTauTagIsMutable();
          tauTag_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag
         * </pre>
         */
        public Builder addTauTag(int value) {
          ensureTauTagIsMutable();
          tauTag_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag
         * </pre>
         */
        public Builder addAllTauTag(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureTauTagIsMutable();
          super.addAll(values, tauTag_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag
         * </pre>
         */
        public Builder clearTauTag() {
          tauTag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        // repeated sint32 Charge = 7 [packed = true];
        private java.util.List<java.lang.Integer> charge_ = java.util.Collections.emptyList();
        private void ensureChargeIsMutable() {
          if (!((bitField0_ & 0x00000040) == 0x00000040)) {
            charge_ = new java.util.ArrayList<java.lang.Integer>(charge_);
            bitField0_ |= 0x00000040;
           }
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getChargeList() {
          return java.util.Collections.unmodifiableList(charge_);
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getChargeCount() {
          return charge_.size();
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getCharge(int index) {
          return charge_.get(index);
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder setCharge(
            int index, int value) {
          ensureChargeIsMutable();
          charge_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addCharge(int value) {
          ensureChargeIsMutable();
          charge_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addAllCharge(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureChargeIsMutable();
          super.addAll(values, charge_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder clearCharge() {
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }

        // repeated uint32 DeltaEta = 8 [packed = true];
        private java.util.List<java.lang.Integer> deltaEta_ = java.util.Collections.emptyList();
        private void ensureDeltaEtaIsMutable() {
          if (!((bitField0_ & 0x00000080) == 0x00000080)) {
            deltaEta_ = new java.util.ArrayList<java.lang.Integer>(deltaEta_);
            bitField0_ |= 0x00000080;
           }
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getDeltaEtaList() {
          return java.util.Collections.unmodifiableList(deltaEta_);
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public int getDeltaEtaCount() {
          return deltaEta_.size();
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public int getDeltaEta(int index) {
          return deltaEta_.get(index);
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder setDeltaEta(
            int index, int value) {
          ensureDeltaEtaIsMutable();
          deltaEta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder addDeltaEta(int value) {
          ensureDeltaEtaIsMutable();
          deltaEta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder addAllDeltaEta(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureDeltaEtaIsMutable();
          super.addAll(values, deltaEta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder clearDeltaEta() {
          deltaEta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
          return this;
        }

        // repeated uint32 DeltaPhi = 9 [packed = true];
        private java.util.List<java.lang.Integer> deltaPhi_ = java.util.Collections.emptyList();
        private void ensureDeltaPhiIsMutable() {
          if (!((bitField0_ & 0x00000100) == 0x00000100)) {
            deltaPhi_ = new java.util.ArrayList<java.lang.Integer>(deltaPhi_);
            bitField0_ |= 0x00000100;
           }
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getDeltaPhiList() {
          return java.util.Collections.unmodifiableList(deltaPhi_);
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public int getDeltaPhiCount() {
          return deltaPhi_.size();
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public int getDeltaPhi(int index) {
          return deltaPhi_.get(index);
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public Builder setDeltaPhi(
            int index, int value) {
          ensureDeltaPhiIsMutable();
          deltaPhi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public Builder addDeltaPhi(int value) {
          ensureDeltaPhiIsMutable();
          deltaPhi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public Builder addAllDeltaPhi(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureDeltaPhiIsMutable();
          super.addAll(values, deltaPhi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public Builder clearDeltaPhi() {
          deltaPhi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }

        // repeated sint32 HadOverEem = 10 [packed = true];
        private java.util.List<java.lang.Integer> hadOverEem_ = java.util.Collections.emptyList();
        private void ensureHadOverEemIsMutable() {
          if (!((bitField0_ & 0x00000200) == 0x00000200)) {
            hadOverEem_ = new java.util.ArrayList<java.lang.Integer>(hadOverEem_);
            bitField0_ |= 0x00000200;
           }
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getHadOverEemList() {
          return java.util.Collections.unmodifiableList(hadOverEem_);
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public int getHadOverEemCount() {
          return hadOverEem_.size();
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public int getHadOverEem(int index) {
          return hadOverEem_.get(index);
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public Builder setHadOverEem(
            int index, int value) {
          ensureHadOverEemIsMutable();
          hadOverEem_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public Builder addHadOverEem(int value) {
          ensureHadOverEemIsMutable();
          hadOverEem_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public Builder addAllHadOverEem(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureHadOverEemIsMutable();
          super.addAll(values, hadOverEem_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public Builder clearHadOverEem() {
          hadOverEem_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.BLJets)
      }

      static {
        defaultInstance = new BLJets(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.BLJets)
    }

    public interface GenJetsOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint64 PT = 1 [packed = true];
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      java.util.List<java.lang.Long> getPTList();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      int getPTCount();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      long getPT(int index);

      // repeated sint64 Eta = 2 [packed = true];
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta 
       * </pre>
       */
      java.util.List<java.lang.Long> getEtaList();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta 
       * </pre>
       */
      int getEtaCount();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta 
       * </pre>
       */
      long getEta(int index);

      // repeated sint64 Phi = 3 [packed = true];
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      java.util.List<java.lang.Long> getPhiList();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      int getPhiCount();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      long getPhi(int index);

      // repeated uint64 Mass = 4 [packed = true];
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      java.util.List<java.lang.Long> getMassList();
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      int getMassCount();
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      long getMass(int index);

      // repeated sint32 Btag = 5 [packed = true];
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      java.util.List<java.lang.Integer> getBtagList();
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      int getBtagCount();
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      int getBtag(int index);

      // repeated sint32 TauTag = 6 [packed = true];
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag  
       * </pre>
       */
      java.util.List<java.lang.Integer> getTauTagList();
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag  
       * </pre>
       */
      int getTauTagCount();
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag  
       * </pre>
       */
      int getTauTag(int index);

      // repeated sint32 Charge = 7 [packed = true];
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      java.util.List<java.lang.Integer> getChargeList();
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getChargeCount();
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getCharge(int index);

      // repeated uint32 DeltaEta = 8 [packed = true];
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      java.util.List<java.lang.Integer> getDeltaEtaList();
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      int getDeltaEtaCount();
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      int getDeltaEta(int index);

      // repeated uint32 DeltaPhi = 9 [packed = true];
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      java.util.List<java.lang.Integer> getDeltaPhiList();
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      int getDeltaPhiCount();
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      int getDeltaPhi(int index);

      // repeated sint32 HadOverEem = 10 [packed = true];
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      java.util.List<java.lang.Integer> getHadOverEemList();
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      int getHadOverEemCount();
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      int getHadOverEem(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.GenJets}
     *
     * <pre>
     * GenJet
     * </pre>
     */
    public static final class GenJets extends
        com.google.protobuf.GeneratedMessage
        implements GenJetsOrBuilder {
      // Use GenJets.newBuilder() to construct.
      private GenJets(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private GenJets(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final GenJets defaultInstance;
      public static GenJets getDefaultInstance() {
        return defaultInstance;
      }

      public GenJets getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private GenJets(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                pT_.add(input.readUInt64());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pT_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                eta_.add(input.readSInt64());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  eta_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                phi_.add(input.readSInt64());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  phi_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  mass_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                mass_.add(input.readUInt64());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  mass_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mass_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  btag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                btag_.add(input.readSInt32());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  btag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  btag_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 48: {
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  tauTag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                tauTag_.add(input.readSInt32());
                break;
              }
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                  tauTag_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                while (input.getBytesUntilLimit() > 0) {
                  tauTag_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 56: {
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000040;
                }
                charge_.add(input.readSInt32());
                break;
              }
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000040;
                }
                while (input.getBytesUntilLimit() > 0) {
                  charge_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 64: {
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                  deltaEta_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                deltaEta_.add(input.readUInt32());
                break;
              }
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                  deltaEta_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                while (input.getBytesUntilLimit() > 0) {
                  deltaEta_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 72: {
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                  deltaPhi_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                deltaPhi_.add(input.readUInt32());
                break;
              }
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                  deltaPhi_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                while (input.getBytesUntilLimit() > 0) {
                  deltaPhi_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 80: {
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                  hadOverEem_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                hadOverEem_.add(input.readSInt32());
                break;
              }
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                  hadOverEem_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                while (input.getBytesUntilLimit() > 0) {
                  hadOverEem_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = java.util.Collections.unmodifiableList(mass_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            btag_ = java.util.Collections.unmodifiableList(btag_);
          }
          if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
            tauTag_ = java.util.Collections.unmodifiableList(tauTag_);
          }
          if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
          }
          if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
            deltaEta_ = java.util.Collections.unmodifiableList(deltaEta_);
          }
          if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
            deltaPhi_ = java.util.Collections.unmodifiableList(deltaPhi_);
          }
          if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
            hadOverEem_ = java.util.Collections.unmodifiableList(hadOverEem_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_GenJets_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_GenJets_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.GenJets.class, proreco.io.ProMC.ProMCEvent.GenJets.Builder.class);
      }

      public static com.google.protobuf.Parser<GenJets> PARSER =
          new com.google.protobuf.AbstractParser<GenJets>() {
        public GenJets parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new GenJets(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<GenJets> getParserForType() {
        return PARSER;
      }

      // repeated uint64 PT = 1 [packed = true];
      public static final int PT_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Long> pT_;
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPTList() {
        return pT_;
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public int getPTCount() {
        return pT_.size();
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public long getPT(int index) {
        return pT_.get(index);
      }
      private int pTMemoizedSerializedSize = -1;

      // repeated sint64 Eta = 2 [packed = true];
      public static final int ETA_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Long> eta_;
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEtaList() {
        return eta_;
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta 
       * </pre>
       */
      public int getEtaCount() {
        return eta_.size();
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta 
       * </pre>
       */
      public long getEta(int index) {
        return eta_.get(index);
      }
      private int etaMemoizedSerializedSize = -1;

      // repeated sint64 Phi = 3 [packed = true];
      public static final int PHI_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Long> phi_;
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPhiList() {
        return phi_;
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      public int getPhiCount() {
        return phi_.size();
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi 
       * </pre>
       */
      public long getPhi(int index) {
        return phi_.get(index);
      }
      private int phiMemoizedSerializedSize = -1;

      // repeated uint64 Mass = 4 [packed = true];
      public static final int MASS_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Long> mass_;
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getMassList() {
        return mass_;
      }
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      public int getMassCount() {
        return mass_.size();
      }
      /**
       * <code>repeated uint64 Mass = 4 [packed = true];</code>
       *
       * <pre>
       * Mass 
       * </pre>
       */
      public long getMass(int index) {
        return mass_.get(index);
      }
      private int massMemoizedSerializedSize = -1;

      // repeated sint32 Btag = 5 [packed = true];
      public static final int BTAG_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Integer> btag_;
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getBtagList() {
        return btag_;
      }
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      public int getBtagCount() {
        return btag_.size();
      }
      /**
       * <code>repeated sint32 Btag = 5 [packed = true];</code>
       *
       * <pre>
       * BTag 
       * </pre>
       */
      public int getBtag(int index) {
        return btag_.get(index);
      }
      private int btagMemoizedSerializedSize = -1;

      // repeated sint32 TauTag = 6 [packed = true];
      public static final int TAUTAG_FIELD_NUMBER = 6;
      private java.util.List<java.lang.Integer> tauTag_;
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag  
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTauTagList() {
        return tauTag_;
      }
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag  
       * </pre>
       */
      public int getTauTagCount() {
        return tauTag_.size();
      }
      /**
       * <code>repeated sint32 TauTag = 6 [packed = true];</code>
       *
       * <pre>
       * TauTag  
       * </pre>
       */
      public int getTauTag(int index) {
        return tauTag_.get(index);
      }
      private int tauTagMemoizedSerializedSize = -1;

      // repeated sint32 Charge = 7 [packed = true];
      public static final int CHARGE_FIELD_NUMBER = 7;
      private java.util.List<java.lang.Integer> charge_;
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChargeList() {
        return charge_;
      }
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getChargeCount() {
        return charge_.size();
      }
      /**
       * <code>repeated sint32 Charge = 7 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getCharge(int index) {
        return charge_.get(index);
      }
      private int chargeMemoizedSerializedSize = -1;

      // repeated uint32 DeltaEta = 8 [packed = true];
      public static final int DELTAETA_FIELD_NUMBER = 8;
      private java.util.List<java.lang.Integer> deltaEta_;
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDeltaEtaList() {
        return deltaEta_;
      }
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      public int getDeltaEtaCount() {
        return deltaEta_.size();
      }
      /**
       * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
       *
       * <pre>
       * Delta Eta
       * </pre>
       */
      public int getDeltaEta(int index) {
        return deltaEta_.get(index);
      }
      private int deltaEtaMemoizedSerializedSize = -1;

      // repeated uint32 DeltaPhi = 9 [packed = true];
      public static final int DELTAPHI_FIELD_NUMBER = 9;
      private java.util.List<java.lang.Integer> deltaPhi_;
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDeltaPhiList() {
        return deltaPhi_;
      }
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      public int getDeltaPhiCount() {
        return deltaPhi_.size();
      }
      /**
       * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
       *
       * <pre>
       * Delta Phi
       * </pre>
       */
      public int getDeltaPhi(int index) {
        return deltaPhi_.get(index);
      }
      private int deltaPhiMemoizedSerializedSize = -1;

      // repeated sint32 HadOverEem = 10 [packed = true];
      public static final int HADOVEREEM_FIELD_NUMBER = 10;
      private java.util.List<java.lang.Integer> hadOverEem_;
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getHadOverEemList() {
        return hadOverEem_;
      }
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      public int getHadOverEemCount() {
        return hadOverEem_.size();
      }
      /**
       * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
       *
       * <pre>
       * Ehad/Eem
       * </pre>
       */
      public int getHadOverEem(int index) {
        return hadOverEem_.get(index);
      }
      private int hadOverEemMemoizedSerializedSize = -1;

      private void initFields() {
        pT_ = java.util.Collections.emptyList();
        eta_ = java.util.Collections.emptyList();
        phi_ = java.util.Collections.emptyList();
        mass_ = java.util.Collections.emptyList();
        btag_ = java.util.Collections.emptyList();
        tauTag_ = java.util.Collections.emptyList();
        charge_ = java.util.Collections.emptyList();
        deltaEta_ = java.util.Collections.emptyList();
        deltaPhi_ = java.util.Collections.emptyList();
        hadOverEem_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getPTList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(pTMemoizedSerializedSize);
        }
        for (int i = 0; i < pT_.size(); i++) {
          output.writeUInt64NoTag(pT_.get(i));
        }
        if (getEtaList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(etaMemoizedSerializedSize);
        }
        for (int i = 0; i < eta_.size(); i++) {
          output.writeSInt64NoTag(eta_.get(i));
        }
        if (getPhiList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(phiMemoizedSerializedSize);
        }
        for (int i = 0; i < phi_.size(); i++) {
          output.writeSInt64NoTag(phi_.get(i));
        }
        if (getMassList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(massMemoizedSerializedSize);
        }
        for (int i = 0; i < mass_.size(); i++) {
          output.writeUInt64NoTag(mass_.get(i));
        }
        if (getBtagList().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(btagMemoizedSerializedSize);
        }
        for (int i = 0; i < btag_.size(); i++) {
          output.writeSInt32NoTag(btag_.get(i));
        }
        if (getTauTagList().size() > 0) {
          output.writeRawVarint32(50);
          output.writeRawVarint32(tauTagMemoizedSerializedSize);
        }
        for (int i = 0; i < tauTag_.size(); i++) {
          output.writeSInt32NoTag(tauTag_.get(i));
        }
        if (getChargeList().size() > 0) {
          output.writeRawVarint32(58);
          output.writeRawVarint32(chargeMemoizedSerializedSize);
        }
        for (int i = 0; i < charge_.size(); i++) {
          output.writeSInt32NoTag(charge_.get(i));
        }
        if (getDeltaEtaList().size() > 0) {
          output.writeRawVarint32(66);
          output.writeRawVarint32(deltaEtaMemoizedSerializedSize);
        }
        for (int i = 0; i < deltaEta_.size(); i++) {
          output.writeUInt32NoTag(deltaEta_.get(i));
        }
        if (getDeltaPhiList().size() > 0) {
          output.writeRawVarint32(74);
          output.writeRawVarint32(deltaPhiMemoizedSerializedSize);
        }
        for (int i = 0; i < deltaPhi_.size(); i++) {
          output.writeUInt32NoTag(deltaPhi_.get(i));
        }
        if (getHadOverEemList().size() > 0) {
          output.writeRawVarint32(82);
          output.writeRawVarint32(hadOverEemMemoizedSerializedSize);
        }
        for (int i = 0; i < hadOverEem_.size(); i++) {
          output.writeSInt32NoTag(hadOverEem_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < pT_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(pT_.get(i));
          }
          size += dataSize;
          if (!getPTList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pTMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < eta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(eta_.get(i));
          }
          size += dataSize;
          if (!getEtaList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          etaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < phi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(phi_.get(i));
          }
          size += dataSize;
          if (!getPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          phiMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < mass_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(mass_.get(i));
          }
          size += dataSize;
          if (!getMassList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          massMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < btag_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(btag_.get(i));
          }
          size += dataSize;
          if (!getBtagList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          btagMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < tauTag_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(tauTag_.get(i));
          }
          size += dataSize;
          if (!getTauTagList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          tauTagMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < charge_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(charge_.get(i));
          }
          size += dataSize;
          if (!getChargeList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          chargeMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < deltaEta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(deltaEta_.get(i));
          }
          size += dataSize;
          if (!getDeltaEtaList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          deltaEtaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < deltaPhi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(deltaPhi_.get(i));
          }
          size += dataSize;
          if (!getDeltaPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          deltaPhiMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < hadOverEem_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(hadOverEem_.get(i));
          }
          size += dataSize;
          if (!getHadOverEemList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          hadOverEemMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static proreco.io.ProMC.ProMCEvent.GenJets parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.GenJets parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.GenJets parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.GenJets parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.GenJets parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.GenJets parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.GenJets parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.GenJets parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.GenJets parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.GenJets parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proreco.io.ProMC.ProMCEvent.GenJets prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.GenJets}
       *
       * <pre>
       * GenJet
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements proreco.io.ProMC.ProMCEvent.GenJetsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_GenJets_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_GenJets_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  proreco.io.ProMC.ProMCEvent.GenJets.class, proreco.io.ProMC.ProMCEvent.GenJets.Builder.class);
        }

        // Construct using proreco.io.ProMC.ProMCEvent.GenJets.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          mass_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          btag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          tauTag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          deltaEta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          deltaPhi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          hadOverEem_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_GenJets_descriptor;
        }

        public proreco.io.ProMC.ProMCEvent.GenJets getDefaultInstanceForType() {
          return proreco.io.ProMC.ProMCEvent.GenJets.getDefaultInstance();
        }

        public proreco.io.ProMC.ProMCEvent.GenJets build() {
          proreco.io.ProMC.ProMCEvent.GenJets result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public proreco.io.ProMC.ProMCEvent.GenJets buildPartial() {
          proreco.io.ProMC.ProMCEvent.GenJets result = new proreco.io.ProMC.ProMCEvent.GenJets(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pT_ = pT_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.eta_ = eta_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.phi_ = phi_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = java.util.Collections.unmodifiableList(mass_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.mass_ = mass_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            btag_ = java.util.Collections.unmodifiableList(btag_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.btag_ = btag_;
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            tauTag_ = java.util.Collections.unmodifiableList(tauTag_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.tauTag_ = tauTag_;
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.charge_ = charge_;
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            deltaEta_ = java.util.Collections.unmodifiableList(deltaEta_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.deltaEta_ = deltaEta_;
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            deltaPhi_ = java.util.Collections.unmodifiableList(deltaPhi_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.deltaPhi_ = deltaPhi_;
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            hadOverEem_ = java.util.Collections.unmodifiableList(hadOverEem_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.hadOverEem_ = hadOverEem_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof proreco.io.ProMC.ProMCEvent.GenJets) {
            return mergeFrom((proreco.io.ProMC.ProMCEvent.GenJets)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(proreco.io.ProMC.ProMCEvent.GenJets other) {
          if (other == proreco.io.ProMC.ProMCEvent.GenJets.getDefaultInstance()) return this;
          if (!other.pT_.isEmpty()) {
            if (pT_.isEmpty()) {
              pT_ = other.pT_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePTIsMutable();
              pT_.addAll(other.pT_);
            }
            onChanged();
          }
          if (!other.eta_.isEmpty()) {
            if (eta_.isEmpty()) {
              eta_ = other.eta_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEtaIsMutable();
              eta_.addAll(other.eta_);
            }
            onChanged();
          }
          if (!other.phi_.isEmpty()) {
            if (phi_.isEmpty()) {
              phi_ = other.phi_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePhiIsMutable();
              phi_.addAll(other.phi_);
            }
            onChanged();
          }
          if (!other.mass_.isEmpty()) {
            if (mass_.isEmpty()) {
              mass_ = other.mass_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMassIsMutable();
              mass_.addAll(other.mass_);
            }
            onChanged();
          }
          if (!other.btag_.isEmpty()) {
            if (btag_.isEmpty()) {
              btag_ = other.btag_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureBtagIsMutable();
              btag_.addAll(other.btag_);
            }
            onChanged();
          }
          if (!other.tauTag_.isEmpty()) {
            if (tauTag_.isEmpty()) {
              tauTag_ = other.tauTag_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureTauTagIsMutable();
              tauTag_.addAll(other.tauTag_);
            }
            onChanged();
          }
          if (!other.charge_.isEmpty()) {
            if (charge_.isEmpty()) {
              charge_ = other.charge_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureChargeIsMutable();
              charge_.addAll(other.charge_);
            }
            onChanged();
          }
          if (!other.deltaEta_.isEmpty()) {
            if (deltaEta_.isEmpty()) {
              deltaEta_ = other.deltaEta_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureDeltaEtaIsMutable();
              deltaEta_.addAll(other.deltaEta_);
            }
            onChanged();
          }
          if (!other.deltaPhi_.isEmpty()) {
            if (deltaPhi_.isEmpty()) {
              deltaPhi_ = other.deltaPhi_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureDeltaPhiIsMutable();
              deltaPhi_.addAll(other.deltaPhi_);
            }
            onChanged();
          }
          if (!other.hadOverEem_.isEmpty()) {
            if (hadOverEem_.isEmpty()) {
              hadOverEem_ = other.hadOverEem_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureHadOverEemIsMutable();
              hadOverEem_.addAll(other.hadOverEem_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          proreco.io.ProMC.ProMCEvent.GenJets parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (proreco.io.ProMC.ProMCEvent.GenJets) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint64 PT = 1 [packed = true];
        private java.util.List<java.lang.Long> pT_ = java.util.Collections.emptyList();
        private void ensurePTIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = new java.util.ArrayList<java.lang.Long>(pT_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPTList() {
          return java.util.Collections.unmodifiableList(pT_);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public int getPTCount() {
          return pT_.size();
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public long getPT(int index) {
          return pT_.get(index);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder setPT(
            int index, long value) {
          ensurePTIsMutable();
          pT_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addPT(long value) {
          ensurePTIsMutable();
          pT_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addAllPT(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePTIsMutable();
          super.addAll(values, pT_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder clearPT() {
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint64 Eta = 2 [packed = true];
        private java.util.List<java.lang.Long> eta_ = java.util.Collections.emptyList();
        private void ensureEtaIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = new java.util.ArrayList<java.lang.Long>(eta_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEtaList() {
          return java.util.Collections.unmodifiableList(eta_);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta 
         * </pre>
         */
        public int getEtaCount() {
          return eta_.size();
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta 
         * </pre>
         */
        public long getEta(int index) {
          return eta_.get(index);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta 
         * </pre>
         */
        public Builder setEta(
            int index, long value) {
          ensureEtaIsMutable();
          eta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta 
         * </pre>
         */
        public Builder addEta(long value) {
          ensureEtaIsMutable();
          eta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta 
         * </pre>
         */
        public Builder addAllEta(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEtaIsMutable();
          super.addAll(values, eta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta 
         * </pre>
         */
        public Builder clearEta() {
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated sint64 Phi = 3 [packed = true];
        private java.util.List<java.lang.Long> phi_ = java.util.Collections.emptyList();
        private void ensurePhiIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = new java.util.ArrayList<java.lang.Long>(phi_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPhiList() {
          return java.util.Collections.unmodifiableList(phi_);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public int getPhiCount() {
          return phi_.size();
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public long getPhi(int index) {
          return phi_.get(index);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public Builder setPhi(
            int index, long value) {
          ensurePhiIsMutable();
          phi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public Builder addPhi(long value) {
          ensurePhiIsMutable();
          phi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public Builder addAllPhi(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePhiIsMutable();
          super.addAll(values, phi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi 
         * </pre>
         */
        public Builder clearPhi() {
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated uint64 Mass = 4 [packed = true];
        private java.util.List<java.lang.Long> mass_ = java.util.Collections.emptyList();
        private void ensureMassIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            mass_ = new java.util.ArrayList<java.lang.Long>(mass_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getMassList() {
          return java.util.Collections.unmodifiableList(mass_);
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public int getMassCount() {
          return mass_.size();
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public long getMass(int index) {
          return mass_.get(index);
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public Builder setMass(
            int index, long value) {
          ensureMassIsMutable();
          mass_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public Builder addMass(long value) {
          ensureMassIsMutable();
          mass_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public Builder addAllMass(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureMassIsMutable();
          super.addAll(values, mass_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 Mass = 4 [packed = true];</code>
         *
         * <pre>
         * Mass 
         * </pre>
         */
        public Builder clearMass() {
          mass_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // repeated sint32 Btag = 5 [packed = true];
        private java.util.List<java.lang.Integer> btag_ = java.util.Collections.emptyList();
        private void ensureBtagIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            btag_ = new java.util.ArrayList<java.lang.Integer>(btag_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getBtagList() {
          return java.util.Collections.unmodifiableList(btag_);
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public int getBtagCount() {
          return btag_.size();
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public int getBtag(int index) {
          return btag_.get(index);
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public Builder setBtag(
            int index, int value) {
          ensureBtagIsMutable();
          btag_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public Builder addBtag(int value) {
          ensureBtagIsMutable();
          btag_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public Builder addAllBtag(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureBtagIsMutable();
          super.addAll(values, btag_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Btag = 5 [packed = true];</code>
         *
         * <pre>
         * BTag 
         * </pre>
         */
        public Builder clearBtag() {
          btag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        // repeated sint32 TauTag = 6 [packed = true];
        private java.util.List<java.lang.Integer> tauTag_ = java.util.Collections.emptyList();
        private void ensureTauTagIsMutable() {
          if (!((bitField0_ & 0x00000020) == 0x00000020)) {
            tauTag_ = new java.util.ArrayList<java.lang.Integer>(tauTag_);
            bitField0_ |= 0x00000020;
           }
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag  
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getTauTagList() {
          return java.util.Collections.unmodifiableList(tauTag_);
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag  
         * </pre>
         */
        public int getTauTagCount() {
          return tauTag_.size();
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag  
         * </pre>
         */
        public int getTauTag(int index) {
          return tauTag_.get(index);
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag  
         * </pre>
         */
        public Builder setTauTag(
            int index, int value) {
          ensureTauTagIsMutable();
          tauTag_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag  
         * </pre>
         */
        public Builder addTauTag(int value) {
          ensureTauTagIsMutable();
          tauTag_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag  
         * </pre>
         */
        public Builder addAllTauTag(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureTauTagIsMutable();
          super.addAll(values, tauTag_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 TauTag = 6 [packed = true];</code>
         *
         * <pre>
         * TauTag  
         * </pre>
         */
        public Builder clearTauTag() {
          tauTag_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        // repeated sint32 Charge = 7 [packed = true];
        private java.util.List<java.lang.Integer> charge_ = java.util.Collections.emptyList();
        private void ensureChargeIsMutable() {
          if (!((bitField0_ & 0x00000040) == 0x00000040)) {
            charge_ = new java.util.ArrayList<java.lang.Integer>(charge_);
            bitField0_ |= 0x00000040;
           }
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getChargeList() {
          return java.util.Collections.unmodifiableList(charge_);
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getChargeCount() {
          return charge_.size();
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getCharge(int index) {
          return charge_.get(index);
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder setCharge(
            int index, int value) {
          ensureChargeIsMutable();
          charge_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addCharge(int value) {
          ensureChargeIsMutable();
          charge_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addAllCharge(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureChargeIsMutable();
          super.addAll(values, charge_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 7 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder clearCharge() {
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }

        // repeated uint32 DeltaEta = 8 [packed = true];
        private java.util.List<java.lang.Integer> deltaEta_ = java.util.Collections.emptyList();
        private void ensureDeltaEtaIsMutable() {
          if (!((bitField0_ & 0x00000080) == 0x00000080)) {
            deltaEta_ = new java.util.ArrayList<java.lang.Integer>(deltaEta_);
            bitField0_ |= 0x00000080;
           }
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getDeltaEtaList() {
          return java.util.Collections.unmodifiableList(deltaEta_);
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public int getDeltaEtaCount() {
          return deltaEta_.size();
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public int getDeltaEta(int index) {
          return deltaEta_.get(index);
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder setDeltaEta(
            int index, int value) {
          ensureDeltaEtaIsMutable();
          deltaEta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder addDeltaEta(int value) {
          ensureDeltaEtaIsMutable();
          deltaEta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder addAllDeltaEta(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureDeltaEtaIsMutable();
          super.addAll(values, deltaEta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaEta = 8 [packed = true];</code>
         *
         * <pre>
         * Delta Eta
         * </pre>
         */
        public Builder clearDeltaEta() {
          deltaEta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
          return this;
        }

        // repeated uint32 DeltaPhi = 9 [packed = true];
        private java.util.List<java.lang.Integer> deltaPhi_ = java.util.Collections.emptyList();
        private void ensureDeltaPhiIsMutable() {
          if (!((bitField0_ & 0x00000100) == 0x00000100)) {
            deltaPhi_ = new java.util.ArrayList<java.lang.Integer>(deltaPhi_);
            bitField0_ |= 0x00000100;
           }
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getDeltaPhiList() {
          return java.util.Collections.unmodifiableList(deltaPhi_);
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public int getDeltaPhiCount() {
          return deltaPhi_.size();
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public int getDeltaPhi(int index) {
          return deltaPhi_.get(index);
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public Builder setDeltaPhi(
            int index, int value) {
          ensureDeltaPhiIsMutable();
          deltaPhi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public Builder addDeltaPhi(int value) {
          ensureDeltaPhiIsMutable();
          deltaPhi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public Builder addAllDeltaPhi(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureDeltaPhiIsMutable();
          super.addAll(values, deltaPhi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 DeltaPhi = 9 [packed = true];</code>
         *
         * <pre>
         * Delta Phi
         * </pre>
         */
        public Builder clearDeltaPhi() {
          deltaPhi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }

        // repeated sint32 HadOverEem = 10 [packed = true];
        private java.util.List<java.lang.Integer> hadOverEem_ = java.util.Collections.emptyList();
        private void ensureHadOverEemIsMutable() {
          if (!((bitField0_ & 0x00000200) == 0x00000200)) {
            hadOverEem_ = new java.util.ArrayList<java.lang.Integer>(hadOverEem_);
            bitField0_ |= 0x00000200;
           }
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getHadOverEemList() {
          return java.util.Collections.unmodifiableList(hadOverEem_);
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public int getHadOverEemCount() {
          return hadOverEem_.size();
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public int getHadOverEem(int index) {
          return hadOverEem_.get(index);
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public Builder setHadOverEem(
            int index, int value) {
          ensureHadOverEemIsMutable();
          hadOverEem_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public Builder addHadOverEem(int value) {
          ensureHadOverEemIsMutable();
          hadOverEem_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public Builder addAllHadOverEem(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureHadOverEemIsMutable();
          super.addAll(values, hadOverEem_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 HadOverEem = 10 [packed = true];</code>
         *
         * <pre>
         * Ehad/Eem
         * </pre>
         */
        public Builder clearHadOverEem() {
          hadOverEem_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.GenJets)
      }

      static {
        defaultInstance = new GenJets(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.GenJets)
    }

    public interface ElectronsOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint64 PT = 1 [packed = true];
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      java.util.List<java.lang.Long> getPTList();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      int getPTCount();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      long getPT(int index);

      // repeated sint64 Eta = 2 [packed = true];
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      java.util.List<java.lang.Long> getEtaList();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      int getEtaCount();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      long getEta(int index);

      // repeated sint64 Phi = 3 [packed = true];
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      java.util.List<java.lang.Long> getPhiList();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      int getPhiCount();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      long getPhi(int index);

      // repeated sint32 Charge = 4 [packed = true];
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      java.util.List<java.lang.Integer> getChargeList();
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getChargeCount();
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getCharge(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Electrons}
     *
     * <pre>
     * Electrons 
     * </pre>
     */
    public static final class Electrons extends
        com.google.protobuf.GeneratedMessage
        implements ElectronsOrBuilder {
      // Use Electrons.newBuilder() to construct.
      private Electrons(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Electrons(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Electrons defaultInstance;
      public static Electrons getDefaultInstance() {
        return defaultInstance;
      }

      public Electrons getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Electrons(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                pT_.add(input.readUInt64());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pT_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                eta_.add(input.readSInt64());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  eta_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                phi_.add(input.readSInt64());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  phi_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                charge_.add(input.readSInt32());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  charge_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Electrons_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Electrons_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.Electrons.class, proreco.io.ProMC.ProMCEvent.Electrons.Builder.class);
      }

      public static com.google.protobuf.Parser<Electrons> PARSER =
          new com.google.protobuf.AbstractParser<Electrons>() {
        public Electrons parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Electrons(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Electrons> getParserForType() {
        return PARSER;
      }

      // repeated uint64 PT = 1 [packed = true];
      public static final int PT_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Long> pT_;
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPTList() {
        return pT_;
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public int getPTCount() {
        return pT_.size();
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public long getPT(int index) {
        return pT_.get(index);
      }
      private int pTMemoizedSerializedSize = -1;

      // repeated sint64 Eta = 2 [packed = true];
      public static final int ETA_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Long> eta_;
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEtaList() {
        return eta_;
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public int getEtaCount() {
        return eta_.size();
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public long getEta(int index) {
        return eta_.get(index);
      }
      private int etaMemoizedSerializedSize = -1;

      // repeated sint64 Phi = 3 [packed = true];
      public static final int PHI_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Long> phi_;
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPhiList() {
        return phi_;
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public int getPhiCount() {
        return phi_.size();
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public long getPhi(int index) {
        return phi_.get(index);
      }
      private int phiMemoizedSerializedSize = -1;

      // repeated sint32 Charge = 4 [packed = true];
      public static final int CHARGE_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Integer> charge_;
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChargeList() {
        return charge_;
      }
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getChargeCount() {
        return charge_.size();
      }
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getCharge(int index) {
        return charge_.get(index);
      }
      private int chargeMemoizedSerializedSize = -1;

      private void initFields() {
        pT_ = java.util.Collections.emptyList();
        eta_ = java.util.Collections.emptyList();
        phi_ = java.util.Collections.emptyList();
        charge_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getPTList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(pTMemoizedSerializedSize);
        }
        for (int i = 0; i < pT_.size(); i++) {
          output.writeUInt64NoTag(pT_.get(i));
        }
        if (getEtaList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(etaMemoizedSerializedSize);
        }
        for (int i = 0; i < eta_.size(); i++) {
          output.writeSInt64NoTag(eta_.get(i));
        }
        if (getPhiList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(phiMemoizedSerializedSize);
        }
        for (int i = 0; i < phi_.size(); i++) {
          output.writeSInt64NoTag(phi_.get(i));
        }
        if (getChargeList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(chargeMemoizedSerializedSize);
        }
        for (int i = 0; i < charge_.size(); i++) {
          output.writeSInt32NoTag(charge_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < pT_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(pT_.get(i));
          }
          size += dataSize;
          if (!getPTList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pTMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < eta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(eta_.get(i));
          }
          size += dataSize;
          if (!getEtaList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          etaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < phi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(phi_.get(i));
          }
          size += dataSize;
          if (!getPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          phiMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < charge_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(charge_.get(i));
          }
          size += dataSize;
          if (!getChargeList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          chargeMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static proreco.io.ProMC.ProMCEvent.Electrons parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Electrons parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Electrons parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Electrons parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Electrons parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Electrons parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Electrons parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Electrons parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Electrons parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Electrons parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proreco.io.ProMC.ProMCEvent.Electrons prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Electrons}
       *
       * <pre>
       * Electrons 
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements proreco.io.ProMC.ProMCEvent.ElectronsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Electrons_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Electrons_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  proreco.io.ProMC.ProMCEvent.Electrons.class, proreco.io.ProMC.ProMCEvent.Electrons.Builder.class);
        }

        // Construct using proreco.io.ProMC.ProMCEvent.Electrons.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Electrons_descriptor;
        }

        public proreco.io.ProMC.ProMCEvent.Electrons getDefaultInstanceForType() {
          return proreco.io.ProMC.ProMCEvent.Electrons.getDefaultInstance();
        }

        public proreco.io.ProMC.ProMCEvent.Electrons build() {
          proreco.io.ProMC.ProMCEvent.Electrons result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public proreco.io.ProMC.ProMCEvent.Electrons buildPartial() {
          proreco.io.ProMC.ProMCEvent.Electrons result = new proreco.io.ProMC.ProMCEvent.Electrons(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pT_ = pT_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.eta_ = eta_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.phi_ = phi_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.charge_ = charge_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof proreco.io.ProMC.ProMCEvent.Electrons) {
            return mergeFrom((proreco.io.ProMC.ProMCEvent.Electrons)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(proreco.io.ProMC.ProMCEvent.Electrons other) {
          if (other == proreco.io.ProMC.ProMCEvent.Electrons.getDefaultInstance()) return this;
          if (!other.pT_.isEmpty()) {
            if (pT_.isEmpty()) {
              pT_ = other.pT_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePTIsMutable();
              pT_.addAll(other.pT_);
            }
            onChanged();
          }
          if (!other.eta_.isEmpty()) {
            if (eta_.isEmpty()) {
              eta_ = other.eta_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEtaIsMutable();
              eta_.addAll(other.eta_);
            }
            onChanged();
          }
          if (!other.phi_.isEmpty()) {
            if (phi_.isEmpty()) {
              phi_ = other.phi_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePhiIsMutable();
              phi_.addAll(other.phi_);
            }
            onChanged();
          }
          if (!other.charge_.isEmpty()) {
            if (charge_.isEmpty()) {
              charge_ = other.charge_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureChargeIsMutable();
              charge_.addAll(other.charge_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          proreco.io.ProMC.ProMCEvent.Electrons parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (proreco.io.ProMC.ProMCEvent.Electrons) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint64 PT = 1 [packed = true];
        private java.util.List<java.lang.Long> pT_ = java.util.Collections.emptyList();
        private void ensurePTIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = new java.util.ArrayList<java.lang.Long>(pT_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPTList() {
          return java.util.Collections.unmodifiableList(pT_);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public int getPTCount() {
          return pT_.size();
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public long getPT(int index) {
          return pT_.get(index);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder setPT(
            int index, long value) {
          ensurePTIsMutable();
          pT_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addPT(long value) {
          ensurePTIsMutable();
          pT_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addAllPT(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePTIsMutable();
          super.addAll(values, pT_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder clearPT() {
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint64 Eta = 2 [packed = true];
        private java.util.List<java.lang.Long> eta_ = java.util.Collections.emptyList();
        private void ensureEtaIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = new java.util.ArrayList<java.lang.Long>(eta_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEtaList() {
          return java.util.Collections.unmodifiableList(eta_);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public int getEtaCount() {
          return eta_.size();
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public long getEta(int index) {
          return eta_.get(index);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder setEta(
            int index, long value) {
          ensureEtaIsMutable();
          eta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addEta(long value) {
          ensureEtaIsMutable();
          eta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addAllEta(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEtaIsMutable();
          super.addAll(values, eta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder clearEta() {
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated sint64 Phi = 3 [packed = true];
        private java.util.List<java.lang.Long> phi_ = java.util.Collections.emptyList();
        private void ensurePhiIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = new java.util.ArrayList<java.lang.Long>(phi_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPhiList() {
          return java.util.Collections.unmodifiableList(phi_);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public int getPhiCount() {
          return phi_.size();
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public long getPhi(int index) {
          return phi_.get(index);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder setPhi(
            int index, long value) {
          ensurePhiIsMutable();
          phi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addPhi(long value) {
          ensurePhiIsMutable();
          phi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addAllPhi(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePhiIsMutable();
          super.addAll(values, phi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder clearPhi() {
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated sint32 Charge = 4 [packed = true];
        private java.util.List<java.lang.Integer> charge_ = java.util.Collections.emptyList();
        private void ensureChargeIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            charge_ = new java.util.ArrayList<java.lang.Integer>(charge_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getChargeList() {
          return java.util.Collections.unmodifiableList(charge_);
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getChargeCount() {
          return charge_.size();
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getCharge(int index) {
          return charge_.get(index);
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder setCharge(
            int index, int value) {
          ensureChargeIsMutable();
          charge_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addCharge(int value) {
          ensureChargeIsMutable();
          charge_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addAllCharge(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureChargeIsMutable();
          super.addAll(values, charge_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder clearCharge() {
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Electrons)
      }

      static {
        defaultInstance = new Electrons(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Electrons)
    }

    public interface MuonsOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint64 PT = 1 [packed = true];
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      java.util.List<java.lang.Long> getPTList();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      int getPTCount();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      long getPT(int index);

      // repeated sint64 Eta = 2 [packed = true];
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      java.util.List<java.lang.Long> getEtaList();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      int getEtaCount();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      long getEta(int index);

      // repeated sint64 Phi = 3 [packed = true];
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      java.util.List<java.lang.Long> getPhiList();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      int getPhiCount();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      long getPhi(int index);

      // repeated sint32 Charge = 4 [packed = true];
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      java.util.List<java.lang.Integer> getChargeList();
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getChargeCount();
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getCharge(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Muons}
     *
     * <pre>
     * Reconstructed Muons 
     * </pre>
     */
    public static final class Muons extends
        com.google.protobuf.GeneratedMessage
        implements MuonsOrBuilder {
      // Use Muons.newBuilder() to construct.
      private Muons(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Muons(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Muons defaultInstance;
      public static Muons getDefaultInstance() {
        return defaultInstance;
      }

      public Muons getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Muons(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                pT_.add(input.readUInt64());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pT_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                eta_.add(input.readSInt64());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  eta_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                phi_.add(input.readSInt64());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  phi_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                charge_.add(input.readSInt32());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  charge_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Muons_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Muons_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.Muons.class, proreco.io.ProMC.ProMCEvent.Muons.Builder.class);
      }

      public static com.google.protobuf.Parser<Muons> PARSER =
          new com.google.protobuf.AbstractParser<Muons>() {
        public Muons parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Muons(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Muons> getParserForType() {
        return PARSER;
      }

      // repeated uint64 PT = 1 [packed = true];
      public static final int PT_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Long> pT_;
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPTList() {
        return pT_;
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public int getPTCount() {
        return pT_.size();
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public long getPT(int index) {
        return pT_.get(index);
      }
      private int pTMemoizedSerializedSize = -1;

      // repeated sint64 Eta = 2 [packed = true];
      public static final int ETA_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Long> eta_;
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEtaList() {
        return eta_;
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public int getEtaCount() {
        return eta_.size();
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public long getEta(int index) {
        return eta_.get(index);
      }
      private int etaMemoizedSerializedSize = -1;

      // repeated sint64 Phi = 3 [packed = true];
      public static final int PHI_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Long> phi_;
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPhiList() {
        return phi_;
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public int getPhiCount() {
        return phi_.size();
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public long getPhi(int index) {
        return phi_.get(index);
      }
      private int phiMemoizedSerializedSize = -1;

      // repeated sint32 Charge = 4 [packed = true];
      public static final int CHARGE_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Integer> charge_;
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChargeList() {
        return charge_;
      }
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getChargeCount() {
        return charge_.size();
      }
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getCharge(int index) {
        return charge_.get(index);
      }
      private int chargeMemoizedSerializedSize = -1;

      private void initFields() {
        pT_ = java.util.Collections.emptyList();
        eta_ = java.util.Collections.emptyList();
        phi_ = java.util.Collections.emptyList();
        charge_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getPTList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(pTMemoizedSerializedSize);
        }
        for (int i = 0; i < pT_.size(); i++) {
          output.writeUInt64NoTag(pT_.get(i));
        }
        if (getEtaList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(etaMemoizedSerializedSize);
        }
        for (int i = 0; i < eta_.size(); i++) {
          output.writeSInt64NoTag(eta_.get(i));
        }
        if (getPhiList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(phiMemoizedSerializedSize);
        }
        for (int i = 0; i < phi_.size(); i++) {
          output.writeSInt64NoTag(phi_.get(i));
        }
        if (getChargeList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(chargeMemoizedSerializedSize);
        }
        for (int i = 0; i < charge_.size(); i++) {
          output.writeSInt32NoTag(charge_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < pT_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(pT_.get(i));
          }
          size += dataSize;
          if (!getPTList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pTMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < eta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(eta_.get(i));
          }
          size += dataSize;
          if (!getEtaList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          etaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < phi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(phi_.get(i));
          }
          size += dataSize;
          if (!getPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          phiMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < charge_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(charge_.get(i));
          }
          size += dataSize;
          if (!getChargeList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          chargeMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static proreco.io.ProMC.ProMCEvent.Muons parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Muons parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Muons parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Muons parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Muons parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Muons parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Muons parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Muons parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Muons parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Muons parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proreco.io.ProMC.ProMCEvent.Muons prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Muons}
       *
       * <pre>
       * Reconstructed Muons 
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements proreco.io.ProMC.ProMCEvent.MuonsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Muons_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Muons_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  proreco.io.ProMC.ProMCEvent.Muons.class, proreco.io.ProMC.ProMCEvent.Muons.Builder.class);
        }

        // Construct using proreco.io.ProMC.ProMCEvent.Muons.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Muons_descriptor;
        }

        public proreco.io.ProMC.ProMCEvent.Muons getDefaultInstanceForType() {
          return proreco.io.ProMC.ProMCEvent.Muons.getDefaultInstance();
        }

        public proreco.io.ProMC.ProMCEvent.Muons build() {
          proreco.io.ProMC.ProMCEvent.Muons result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public proreco.io.ProMC.ProMCEvent.Muons buildPartial() {
          proreco.io.ProMC.ProMCEvent.Muons result = new proreco.io.ProMC.ProMCEvent.Muons(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pT_ = pT_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.eta_ = eta_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.phi_ = phi_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.charge_ = charge_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof proreco.io.ProMC.ProMCEvent.Muons) {
            return mergeFrom((proreco.io.ProMC.ProMCEvent.Muons)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(proreco.io.ProMC.ProMCEvent.Muons other) {
          if (other == proreco.io.ProMC.ProMCEvent.Muons.getDefaultInstance()) return this;
          if (!other.pT_.isEmpty()) {
            if (pT_.isEmpty()) {
              pT_ = other.pT_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePTIsMutable();
              pT_.addAll(other.pT_);
            }
            onChanged();
          }
          if (!other.eta_.isEmpty()) {
            if (eta_.isEmpty()) {
              eta_ = other.eta_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEtaIsMutable();
              eta_.addAll(other.eta_);
            }
            onChanged();
          }
          if (!other.phi_.isEmpty()) {
            if (phi_.isEmpty()) {
              phi_ = other.phi_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePhiIsMutable();
              phi_.addAll(other.phi_);
            }
            onChanged();
          }
          if (!other.charge_.isEmpty()) {
            if (charge_.isEmpty()) {
              charge_ = other.charge_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureChargeIsMutable();
              charge_.addAll(other.charge_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          proreco.io.ProMC.ProMCEvent.Muons parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (proreco.io.ProMC.ProMCEvent.Muons) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint64 PT = 1 [packed = true];
        private java.util.List<java.lang.Long> pT_ = java.util.Collections.emptyList();
        private void ensurePTIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = new java.util.ArrayList<java.lang.Long>(pT_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPTList() {
          return java.util.Collections.unmodifiableList(pT_);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public int getPTCount() {
          return pT_.size();
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public long getPT(int index) {
          return pT_.get(index);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder setPT(
            int index, long value) {
          ensurePTIsMutable();
          pT_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addPT(long value) {
          ensurePTIsMutable();
          pT_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addAllPT(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePTIsMutable();
          super.addAll(values, pT_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder clearPT() {
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint64 Eta = 2 [packed = true];
        private java.util.List<java.lang.Long> eta_ = java.util.Collections.emptyList();
        private void ensureEtaIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = new java.util.ArrayList<java.lang.Long>(eta_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEtaList() {
          return java.util.Collections.unmodifiableList(eta_);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public int getEtaCount() {
          return eta_.size();
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public long getEta(int index) {
          return eta_.get(index);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder setEta(
            int index, long value) {
          ensureEtaIsMutable();
          eta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addEta(long value) {
          ensureEtaIsMutable();
          eta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addAllEta(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEtaIsMutable();
          super.addAll(values, eta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder clearEta() {
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated sint64 Phi = 3 [packed = true];
        private java.util.List<java.lang.Long> phi_ = java.util.Collections.emptyList();
        private void ensurePhiIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = new java.util.ArrayList<java.lang.Long>(phi_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPhiList() {
          return java.util.Collections.unmodifiableList(phi_);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public int getPhiCount() {
          return phi_.size();
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public long getPhi(int index) {
          return phi_.get(index);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder setPhi(
            int index, long value) {
          ensurePhiIsMutable();
          phi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addPhi(long value) {
          ensurePhiIsMutable();
          phi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addAllPhi(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePhiIsMutable();
          super.addAll(values, phi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder clearPhi() {
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated sint32 Charge = 4 [packed = true];
        private java.util.List<java.lang.Integer> charge_ = java.util.Collections.emptyList();
        private void ensureChargeIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            charge_ = new java.util.ArrayList<java.lang.Integer>(charge_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getChargeList() {
          return java.util.Collections.unmodifiableList(charge_);
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getChargeCount() {
          return charge_.size();
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getCharge(int index) {
          return charge_.get(index);
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder setCharge(
            int index, int value) {
          ensureChargeIsMutable();
          charge_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addCharge(int value) {
          ensureChargeIsMutable();
          charge_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addAllCharge(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureChargeIsMutable();
          super.addAll(values, charge_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder clearCharge() {
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Muons)
      }

      static {
        defaultInstance = new Muons(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Muons)
    }

    public interface TracksOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint64 PT = 1 [packed = true];
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      java.util.List<java.lang.Long> getPTList();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      int getPTCount();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      long getPT(int index);

      // repeated sint64 Eta = 2 [packed = true];
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      java.util.List<java.lang.Long> getEtaList();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      int getEtaCount();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      long getEta(int index);

      // repeated sint64 Phi = 3 [packed = true];
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      java.util.List<java.lang.Long> getPhiList();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      int getPhiCount();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      long getPhi(int index);

      // repeated sint32 Charge = 4 [packed = true];
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      java.util.List<java.lang.Integer> getChargeList();
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getChargeCount();
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      int getCharge(int index);

      // repeated sint32 X = 5 [packed = true];
      /**
       * <code>repeated sint32 X = 5 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      java.util.List<java.lang.Integer> getXList();
      /**
       * <code>repeated sint32 X = 5 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      int getXCount();
      /**
       * <code>repeated sint32 X = 5 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      int getX(int index);

      // repeated sint32 Y = 6 [packed = true];
      /**
       * <code>repeated sint32 Y = 6 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      java.util.List<java.lang.Integer> getYList();
      /**
       * <code>repeated sint32 Y = 6 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      int getYCount();
      /**
       * <code>repeated sint32 Y = 6 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      int getY(int index);

      // repeated sint32 Z = 7 [packed = true];
      /**
       * <code>repeated sint32 Z = 7 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      java.util.List<java.lang.Integer> getZList();
      /**
       * <code>repeated sint32 Z = 7 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      int getZCount();
      /**
       * <code>repeated sint32 Z = 7 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      int getZ(int index);

      // repeated sint32 XOuter = 8 [packed = true];
      /**
       * <code>repeated sint32 XOuter = 8 [packed = true];</code>
       *
       * <pre>
       * XOuter
       * </pre>
       */
      java.util.List<java.lang.Integer> getXOuterList();
      /**
       * <code>repeated sint32 XOuter = 8 [packed = true];</code>
       *
       * <pre>
       * XOuter
       * </pre>
       */
      int getXOuterCount();
      /**
       * <code>repeated sint32 XOuter = 8 [packed = true];</code>
       *
       * <pre>
       * XOuter
       * </pre>
       */
      int getXOuter(int index);

      // repeated sint32 YOuter = 9 [packed = true];
      /**
       * <code>repeated sint32 YOuter = 9 [packed = true];</code>
       *
       * <pre>
       * YOuter
       * </pre>
       */
      java.util.List<java.lang.Integer> getYOuterList();
      /**
       * <code>repeated sint32 YOuter = 9 [packed = true];</code>
       *
       * <pre>
       * YOuter
       * </pre>
       */
      int getYOuterCount();
      /**
       * <code>repeated sint32 YOuter = 9 [packed = true];</code>
       *
       * <pre>
       * YOuter
       * </pre>
       */
      int getYOuter(int index);

      // repeated sint32 ZOuter = 10 [packed = true];
      /**
       * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
       *
       * <pre>
       * ZOuter
       * </pre>
       */
      java.util.List<java.lang.Integer> getZOuterList();
      /**
       * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
       *
       * <pre>
       * ZOuter
       * </pre>
       */
      int getZOuterCount();
      /**
       * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
       *
       * <pre>
       * ZOuter
       * </pre>
       */
      int getZOuter(int index);

      // repeated sint32 EtaOuter = 11 [packed = true];
      /**
       * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
       *
       * <pre>
       * EtaOuter
       * </pre>
       */
      java.util.List<java.lang.Integer> getEtaOuterList();
      /**
       * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
       *
       * <pre>
       * EtaOuter
       * </pre>
       */
      int getEtaOuterCount();
      /**
       * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
       *
       * <pre>
       * EtaOuter
       * </pre>
       */
      int getEtaOuter(int index);

      // repeated sint32 PhiOuter = 12 [packed = true];
      /**
       * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
       *
       * <pre>
       * PhiOuter
       * </pre>
       */
      java.util.List<java.lang.Integer> getPhiOuterList();
      /**
       * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
       *
       * <pre>
       * PhiOuter
       * </pre>
       */
      int getPhiOuterCount();
      /**
       * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
       *
       * <pre>
       * PhiOuter
       * </pre>
       */
      int getPhiOuter(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Tracks}
     *
     * <pre>
     * Charged Tracks 
     * </pre>
     */
    public static final class Tracks extends
        com.google.protobuf.GeneratedMessage
        implements TracksOrBuilder {
      // Use Tracks.newBuilder() to construct.
      private Tracks(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Tracks(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Tracks defaultInstance;
      public static Tracks getDefaultInstance() {
        return defaultInstance;
      }

      public Tracks getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Tracks(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                pT_.add(input.readUInt64());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pT_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                eta_.add(input.readSInt64());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  eta_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                phi_.add(input.readSInt64());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  phi_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                charge_.add(input.readSInt32());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  charge_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  charge_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  x_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                x_.add(input.readSInt32());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  x_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  x_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 48: {
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  y_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                y_.add(input.readSInt32());
                break;
              }
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                  y_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000020;
                }
                while (input.getBytesUntilLimit() > 0) {
                  y_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 56: {
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  z_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000040;
                }
                z_.add(input.readSInt32());
                break;
              }
              case 58: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                  z_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000040;
                }
                while (input.getBytesUntilLimit() > 0) {
                  z_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 64: {
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                  xOuter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                xOuter_.add(input.readSInt32());
                break;
              }
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                  xOuter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000080;
                }
                while (input.getBytesUntilLimit() > 0) {
                  xOuter_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 72: {
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                  yOuter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                yOuter_.add(input.readSInt32());
                break;
              }
              case 74: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                  yOuter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000100;
                }
                while (input.getBytesUntilLimit() > 0) {
                  yOuter_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 80: {
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                  zOuter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                zOuter_.add(input.readSInt32());
                break;
              }
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                  zOuter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000200;
                }
                while (input.getBytesUntilLimit() > 0) {
                  zOuter_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 88: {
                if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                  etaOuter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000400;
                }
                etaOuter_.add(input.readSInt32());
                break;
              }
              case 90: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                  etaOuter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000400;
                }
                while (input.getBytesUntilLimit() > 0) {
                  etaOuter_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 96: {
                if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                  phiOuter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000800;
                }
                phiOuter_.add(input.readSInt32());
                break;
              }
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                  phiOuter_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000800;
                }
                while (input.getBytesUntilLimit() > 0) {
                  phiOuter_.add(input.readSInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            x_ = java.util.Collections.unmodifiableList(x_);
          }
          if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
            y_ = java.util.Collections.unmodifiableList(y_);
          }
          if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
            z_ = java.util.Collections.unmodifiableList(z_);
          }
          if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
            xOuter_ = java.util.Collections.unmodifiableList(xOuter_);
          }
          if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
            yOuter_ = java.util.Collections.unmodifiableList(yOuter_);
          }
          if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
            zOuter_ = java.util.Collections.unmodifiableList(zOuter_);
          }
          if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
            etaOuter_ = java.util.Collections.unmodifiableList(etaOuter_);
          }
          if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
            phiOuter_ = java.util.Collections.unmodifiableList(phiOuter_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Tracks_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Tracks_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.Tracks.class, proreco.io.ProMC.ProMCEvent.Tracks.Builder.class);
      }

      public static com.google.protobuf.Parser<Tracks> PARSER =
          new com.google.protobuf.AbstractParser<Tracks>() {
        public Tracks parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Tracks(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Tracks> getParserForType() {
        return PARSER;
      }

      // repeated uint64 PT = 1 [packed = true];
      public static final int PT_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Long> pT_;
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPTList() {
        return pT_;
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public int getPTCount() {
        return pT_.size();
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public long getPT(int index) {
        return pT_.get(index);
      }
      private int pTMemoizedSerializedSize = -1;

      // repeated sint64 Eta = 2 [packed = true];
      public static final int ETA_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Long> eta_;
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEtaList() {
        return eta_;
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public int getEtaCount() {
        return eta_.size();
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public long getEta(int index) {
        return eta_.get(index);
      }
      private int etaMemoizedSerializedSize = -1;

      // repeated sint64 Phi = 3 [packed = true];
      public static final int PHI_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Long> phi_;
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPhiList() {
        return phi_;
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public int getPhiCount() {
        return phi_.size();
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public long getPhi(int index) {
        return phi_.get(index);
      }
      private int phiMemoizedSerializedSize = -1;

      // repeated sint32 Charge = 4 [packed = true];
      public static final int CHARGE_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Integer> charge_;
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChargeList() {
        return charge_;
      }
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getChargeCount() {
        return charge_.size();
      }
      /**
       * <code>repeated sint32 Charge = 4 [packed = true];</code>
       *
       * <pre>
       * Charge
       * </pre>
       */
      public int getCharge(int index) {
        return charge_.get(index);
      }
      private int chargeMemoizedSerializedSize = -1;

      // repeated sint32 X = 5 [packed = true];
      public static final int X_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Integer> x_;
      /**
       * <code>repeated sint32 X = 5 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXList() {
        return x_;
      }
      /**
       * <code>repeated sint32 X = 5 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      public int getXCount() {
        return x_.size();
      }
      /**
       * <code>repeated sint32 X = 5 [packed = true];</code>
       *
       * <pre>
       * vertex X position
       * </pre>
       */
      public int getX(int index) {
        return x_.get(index);
      }
      private int xMemoizedSerializedSize = -1;

      // repeated sint32 Y = 6 [packed = true];
      public static final int Y_FIELD_NUMBER = 6;
      private java.util.List<java.lang.Integer> y_;
      /**
       * <code>repeated sint32 Y = 6 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getYList() {
        return y_;
      }
      /**
       * <code>repeated sint32 Y = 6 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      public int getYCount() {
        return y_.size();
      }
      /**
       * <code>repeated sint32 Y = 6 [packed = true];</code>
       *
       * <pre>
       * vertex Y position
       * </pre>
       */
      public int getY(int index) {
        return y_.get(index);
      }
      private int yMemoizedSerializedSize = -1;

      // repeated sint32 Z = 7 [packed = true];
      public static final int Z_FIELD_NUMBER = 7;
      private java.util.List<java.lang.Integer> z_;
      /**
       * <code>repeated sint32 Z = 7 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZList() {
        return z_;
      }
      /**
       * <code>repeated sint32 Z = 7 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      public int getZCount() {
        return z_.size();
      }
      /**
       * <code>repeated sint32 Z = 7 [packed = true];</code>
       *
       * <pre>
       * vertex Z position
       * </pre>
       */
      public int getZ(int index) {
        return z_.get(index);
      }
      private int zMemoizedSerializedSize = -1;

      // repeated sint32 XOuter = 8 [packed = true];
      public static final int XOUTER_FIELD_NUMBER = 8;
      private java.util.List<java.lang.Integer> xOuter_;
      /**
       * <code>repeated sint32 XOuter = 8 [packed = true];</code>
       *
       * <pre>
       * XOuter
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getXOuterList() {
        return xOuter_;
      }
      /**
       * <code>repeated sint32 XOuter = 8 [packed = true];</code>
       *
       * <pre>
       * XOuter
       * </pre>
       */
      public int getXOuterCount() {
        return xOuter_.size();
      }
      /**
       * <code>repeated sint32 XOuter = 8 [packed = true];</code>
       *
       * <pre>
       * XOuter
       * </pre>
       */
      public int getXOuter(int index) {
        return xOuter_.get(index);
      }
      private int xOuterMemoizedSerializedSize = -1;

      // repeated sint32 YOuter = 9 [packed = true];
      public static final int YOUTER_FIELD_NUMBER = 9;
      private java.util.List<java.lang.Integer> yOuter_;
      /**
       * <code>repeated sint32 YOuter = 9 [packed = true];</code>
       *
       * <pre>
       * YOuter
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getYOuterList() {
        return yOuter_;
      }
      /**
       * <code>repeated sint32 YOuter = 9 [packed = true];</code>
       *
       * <pre>
       * YOuter
       * </pre>
       */
      public int getYOuterCount() {
        return yOuter_.size();
      }
      /**
       * <code>repeated sint32 YOuter = 9 [packed = true];</code>
       *
       * <pre>
       * YOuter
       * </pre>
       */
      public int getYOuter(int index) {
        return yOuter_.get(index);
      }
      private int yOuterMemoizedSerializedSize = -1;

      // repeated sint32 ZOuter = 10 [packed = true];
      public static final int ZOUTER_FIELD_NUMBER = 10;
      private java.util.List<java.lang.Integer> zOuter_;
      /**
       * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
       *
       * <pre>
       * ZOuter
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getZOuterList() {
        return zOuter_;
      }
      /**
       * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
       *
       * <pre>
       * ZOuter
       * </pre>
       */
      public int getZOuterCount() {
        return zOuter_.size();
      }
      /**
       * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
       *
       * <pre>
       * ZOuter
       * </pre>
       */
      public int getZOuter(int index) {
        return zOuter_.get(index);
      }
      private int zOuterMemoizedSerializedSize = -1;

      // repeated sint32 EtaOuter = 11 [packed = true];
      public static final int ETAOUTER_FIELD_NUMBER = 11;
      private java.util.List<java.lang.Integer> etaOuter_;
      /**
       * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
       *
       * <pre>
       * EtaOuter
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getEtaOuterList() {
        return etaOuter_;
      }
      /**
       * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
       *
       * <pre>
       * EtaOuter
       * </pre>
       */
      public int getEtaOuterCount() {
        return etaOuter_.size();
      }
      /**
       * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
       *
       * <pre>
       * EtaOuter
       * </pre>
       */
      public int getEtaOuter(int index) {
        return etaOuter_.get(index);
      }
      private int etaOuterMemoizedSerializedSize = -1;

      // repeated sint32 PhiOuter = 12 [packed = true];
      public static final int PHIOUTER_FIELD_NUMBER = 12;
      private java.util.List<java.lang.Integer> phiOuter_;
      /**
       * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
       *
       * <pre>
       * PhiOuter
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPhiOuterList() {
        return phiOuter_;
      }
      /**
       * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
       *
       * <pre>
       * PhiOuter
       * </pre>
       */
      public int getPhiOuterCount() {
        return phiOuter_.size();
      }
      /**
       * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
       *
       * <pre>
       * PhiOuter
       * </pre>
       */
      public int getPhiOuter(int index) {
        return phiOuter_.get(index);
      }
      private int phiOuterMemoizedSerializedSize = -1;

      private void initFields() {
        pT_ = java.util.Collections.emptyList();
        eta_ = java.util.Collections.emptyList();
        phi_ = java.util.Collections.emptyList();
        charge_ = java.util.Collections.emptyList();
        x_ = java.util.Collections.emptyList();
        y_ = java.util.Collections.emptyList();
        z_ = java.util.Collections.emptyList();
        xOuter_ = java.util.Collections.emptyList();
        yOuter_ = java.util.Collections.emptyList();
        zOuter_ = java.util.Collections.emptyList();
        etaOuter_ = java.util.Collections.emptyList();
        phiOuter_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getPTList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(pTMemoizedSerializedSize);
        }
        for (int i = 0; i < pT_.size(); i++) {
          output.writeUInt64NoTag(pT_.get(i));
        }
        if (getEtaList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(etaMemoizedSerializedSize);
        }
        for (int i = 0; i < eta_.size(); i++) {
          output.writeSInt64NoTag(eta_.get(i));
        }
        if (getPhiList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(phiMemoizedSerializedSize);
        }
        for (int i = 0; i < phi_.size(); i++) {
          output.writeSInt64NoTag(phi_.get(i));
        }
        if (getChargeList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(chargeMemoizedSerializedSize);
        }
        for (int i = 0; i < charge_.size(); i++) {
          output.writeSInt32NoTag(charge_.get(i));
        }
        if (getXList().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(xMemoizedSerializedSize);
        }
        for (int i = 0; i < x_.size(); i++) {
          output.writeSInt32NoTag(x_.get(i));
        }
        if (getYList().size() > 0) {
          output.writeRawVarint32(50);
          output.writeRawVarint32(yMemoizedSerializedSize);
        }
        for (int i = 0; i < y_.size(); i++) {
          output.writeSInt32NoTag(y_.get(i));
        }
        if (getZList().size() > 0) {
          output.writeRawVarint32(58);
          output.writeRawVarint32(zMemoizedSerializedSize);
        }
        for (int i = 0; i < z_.size(); i++) {
          output.writeSInt32NoTag(z_.get(i));
        }
        if (getXOuterList().size() > 0) {
          output.writeRawVarint32(66);
          output.writeRawVarint32(xOuterMemoizedSerializedSize);
        }
        for (int i = 0; i < xOuter_.size(); i++) {
          output.writeSInt32NoTag(xOuter_.get(i));
        }
        if (getYOuterList().size() > 0) {
          output.writeRawVarint32(74);
          output.writeRawVarint32(yOuterMemoizedSerializedSize);
        }
        for (int i = 0; i < yOuter_.size(); i++) {
          output.writeSInt32NoTag(yOuter_.get(i));
        }
        if (getZOuterList().size() > 0) {
          output.writeRawVarint32(82);
          output.writeRawVarint32(zOuterMemoizedSerializedSize);
        }
        for (int i = 0; i < zOuter_.size(); i++) {
          output.writeSInt32NoTag(zOuter_.get(i));
        }
        if (getEtaOuterList().size() > 0) {
          output.writeRawVarint32(90);
          output.writeRawVarint32(etaOuterMemoizedSerializedSize);
        }
        for (int i = 0; i < etaOuter_.size(); i++) {
          output.writeSInt32NoTag(etaOuter_.get(i));
        }
        if (getPhiOuterList().size() > 0) {
          output.writeRawVarint32(98);
          output.writeRawVarint32(phiOuterMemoizedSerializedSize);
        }
        for (int i = 0; i < phiOuter_.size(); i++) {
          output.writeSInt32NoTag(phiOuter_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < pT_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(pT_.get(i));
          }
          size += dataSize;
          if (!getPTList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pTMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < eta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(eta_.get(i));
          }
          size += dataSize;
          if (!getEtaList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          etaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < phi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(phi_.get(i));
          }
          size += dataSize;
          if (!getPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          phiMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < charge_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(charge_.get(i));
          }
          size += dataSize;
          if (!getChargeList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          chargeMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < x_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(x_.get(i));
          }
          size += dataSize;
          if (!getXList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          xMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < y_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(y_.get(i));
          }
          size += dataSize;
          if (!getYList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          yMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < z_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(z_.get(i));
          }
          size += dataSize;
          if (!getZList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          zMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < xOuter_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(xOuter_.get(i));
          }
          size += dataSize;
          if (!getXOuterList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          xOuterMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < yOuter_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(yOuter_.get(i));
          }
          size += dataSize;
          if (!getYOuterList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          yOuterMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < zOuter_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(zOuter_.get(i));
          }
          size += dataSize;
          if (!getZOuterList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          zOuterMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < etaOuter_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(etaOuter_.get(i));
          }
          size += dataSize;
          if (!getEtaOuterList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          etaOuterMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < phiOuter_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt32SizeNoTag(phiOuter_.get(i));
          }
          size += dataSize;
          if (!getPhiOuterList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          phiOuterMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static proreco.io.ProMC.ProMCEvent.Tracks parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Tracks parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Tracks parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Tracks parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Tracks parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Tracks parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Tracks parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Tracks parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Tracks parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Tracks parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proreco.io.ProMC.ProMCEvent.Tracks prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Tracks}
       *
       * <pre>
       * Charged Tracks 
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements proreco.io.ProMC.ProMCEvent.TracksOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Tracks_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Tracks_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  proreco.io.ProMC.ProMCEvent.Tracks.class, proreco.io.ProMC.ProMCEvent.Tracks.Builder.class);
        }

        // Construct using proreco.io.ProMC.ProMCEvent.Tracks.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          x_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          y_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          z_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          xOuter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          yOuter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          zOuter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          etaOuter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          phiOuter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Tracks_descriptor;
        }

        public proreco.io.ProMC.ProMCEvent.Tracks getDefaultInstanceForType() {
          return proreco.io.ProMC.ProMCEvent.Tracks.getDefaultInstance();
        }

        public proreco.io.ProMC.ProMCEvent.Tracks build() {
          proreco.io.ProMC.ProMCEvent.Tracks result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public proreco.io.ProMC.ProMCEvent.Tracks buildPartial() {
          proreco.io.ProMC.ProMCEvent.Tracks result = new proreco.io.ProMC.ProMCEvent.Tracks(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pT_ = pT_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.eta_ = eta_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.phi_ = phi_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            charge_ = java.util.Collections.unmodifiableList(charge_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.charge_ = charge_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            x_ = java.util.Collections.unmodifiableList(x_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.x_ = x_;
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            y_ = java.util.Collections.unmodifiableList(y_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.y_ = y_;
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            z_ = java.util.Collections.unmodifiableList(z_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.z_ = z_;
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            xOuter_ = java.util.Collections.unmodifiableList(xOuter_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.xOuter_ = xOuter_;
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            yOuter_ = java.util.Collections.unmodifiableList(yOuter_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.yOuter_ = yOuter_;
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            zOuter_ = java.util.Collections.unmodifiableList(zOuter_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.zOuter_ = zOuter_;
          if (((bitField0_ & 0x00000400) == 0x00000400)) {
            etaOuter_ = java.util.Collections.unmodifiableList(etaOuter_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.etaOuter_ = etaOuter_;
          if (((bitField0_ & 0x00000800) == 0x00000800)) {
            phiOuter_ = java.util.Collections.unmodifiableList(phiOuter_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.phiOuter_ = phiOuter_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof proreco.io.ProMC.ProMCEvent.Tracks) {
            return mergeFrom((proreco.io.ProMC.ProMCEvent.Tracks)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(proreco.io.ProMC.ProMCEvent.Tracks other) {
          if (other == proreco.io.ProMC.ProMCEvent.Tracks.getDefaultInstance()) return this;
          if (!other.pT_.isEmpty()) {
            if (pT_.isEmpty()) {
              pT_ = other.pT_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePTIsMutable();
              pT_.addAll(other.pT_);
            }
            onChanged();
          }
          if (!other.eta_.isEmpty()) {
            if (eta_.isEmpty()) {
              eta_ = other.eta_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEtaIsMutable();
              eta_.addAll(other.eta_);
            }
            onChanged();
          }
          if (!other.phi_.isEmpty()) {
            if (phi_.isEmpty()) {
              phi_ = other.phi_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePhiIsMutable();
              phi_.addAll(other.phi_);
            }
            onChanged();
          }
          if (!other.charge_.isEmpty()) {
            if (charge_.isEmpty()) {
              charge_ = other.charge_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureChargeIsMutable();
              charge_.addAll(other.charge_);
            }
            onChanged();
          }
          if (!other.x_.isEmpty()) {
            if (x_.isEmpty()) {
              x_ = other.x_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureXIsMutable();
              x_.addAll(other.x_);
            }
            onChanged();
          }
          if (!other.y_.isEmpty()) {
            if (y_.isEmpty()) {
              y_ = other.y_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureYIsMutable();
              y_.addAll(other.y_);
            }
            onChanged();
          }
          if (!other.z_.isEmpty()) {
            if (z_.isEmpty()) {
              z_ = other.z_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureZIsMutable();
              z_.addAll(other.z_);
            }
            onChanged();
          }
          if (!other.xOuter_.isEmpty()) {
            if (xOuter_.isEmpty()) {
              xOuter_ = other.xOuter_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureXOuterIsMutable();
              xOuter_.addAll(other.xOuter_);
            }
            onChanged();
          }
          if (!other.yOuter_.isEmpty()) {
            if (yOuter_.isEmpty()) {
              yOuter_ = other.yOuter_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureYOuterIsMutable();
              yOuter_.addAll(other.yOuter_);
            }
            onChanged();
          }
          if (!other.zOuter_.isEmpty()) {
            if (zOuter_.isEmpty()) {
              zOuter_ = other.zOuter_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureZOuterIsMutable();
              zOuter_.addAll(other.zOuter_);
            }
            onChanged();
          }
          if (!other.etaOuter_.isEmpty()) {
            if (etaOuter_.isEmpty()) {
              etaOuter_ = other.etaOuter_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureEtaOuterIsMutable();
              etaOuter_.addAll(other.etaOuter_);
            }
            onChanged();
          }
          if (!other.phiOuter_.isEmpty()) {
            if (phiOuter_.isEmpty()) {
              phiOuter_ = other.phiOuter_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensurePhiOuterIsMutable();
              phiOuter_.addAll(other.phiOuter_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          proreco.io.ProMC.ProMCEvent.Tracks parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (proreco.io.ProMC.ProMCEvent.Tracks) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint64 PT = 1 [packed = true];
        private java.util.List<java.lang.Long> pT_ = java.util.Collections.emptyList();
        private void ensurePTIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = new java.util.ArrayList<java.lang.Long>(pT_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPTList() {
          return java.util.Collections.unmodifiableList(pT_);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public int getPTCount() {
          return pT_.size();
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public long getPT(int index) {
          return pT_.get(index);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder setPT(
            int index, long value) {
          ensurePTIsMutable();
          pT_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addPT(long value) {
          ensurePTIsMutable();
          pT_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addAllPT(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePTIsMutable();
          super.addAll(values, pT_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder clearPT() {
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint64 Eta = 2 [packed = true];
        private java.util.List<java.lang.Long> eta_ = java.util.Collections.emptyList();
        private void ensureEtaIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = new java.util.ArrayList<java.lang.Long>(eta_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEtaList() {
          return java.util.Collections.unmodifiableList(eta_);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public int getEtaCount() {
          return eta_.size();
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public long getEta(int index) {
          return eta_.get(index);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder setEta(
            int index, long value) {
          ensureEtaIsMutable();
          eta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addEta(long value) {
          ensureEtaIsMutable();
          eta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addAllEta(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEtaIsMutable();
          super.addAll(values, eta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder clearEta() {
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated sint64 Phi = 3 [packed = true];
        private java.util.List<java.lang.Long> phi_ = java.util.Collections.emptyList();
        private void ensurePhiIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = new java.util.ArrayList<java.lang.Long>(phi_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPhiList() {
          return java.util.Collections.unmodifiableList(phi_);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public int getPhiCount() {
          return phi_.size();
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public long getPhi(int index) {
          return phi_.get(index);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder setPhi(
            int index, long value) {
          ensurePhiIsMutable();
          phi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addPhi(long value) {
          ensurePhiIsMutable();
          phi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addAllPhi(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePhiIsMutable();
          super.addAll(values, phi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder clearPhi() {
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated sint32 Charge = 4 [packed = true];
        private java.util.List<java.lang.Integer> charge_ = java.util.Collections.emptyList();
        private void ensureChargeIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            charge_ = new java.util.ArrayList<java.lang.Integer>(charge_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getChargeList() {
          return java.util.Collections.unmodifiableList(charge_);
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getChargeCount() {
          return charge_.size();
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public int getCharge(int index) {
          return charge_.get(index);
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder setCharge(
            int index, int value) {
          ensureChargeIsMutable();
          charge_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addCharge(int value) {
          ensureChargeIsMutable();
          charge_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder addAllCharge(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureChargeIsMutable();
          super.addAll(values, charge_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Charge = 4 [packed = true];</code>
         *
         * <pre>
         * Charge
         * </pre>
         */
        public Builder clearCharge() {
          charge_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // repeated sint32 X = 5 [packed = true];
        private java.util.List<java.lang.Integer> x_ = java.util.Collections.emptyList();
        private void ensureXIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            x_ = new java.util.ArrayList<java.lang.Integer>(x_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated sint32 X = 5 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getXList() {
          return java.util.Collections.unmodifiableList(x_);
        }
        /**
         * <code>repeated sint32 X = 5 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public int getXCount() {
          return x_.size();
        }
        /**
         * <code>repeated sint32 X = 5 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public int getX(int index) {
          return x_.get(index);
        }
        /**
         * <code>repeated sint32 X = 5 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public Builder setX(
            int index, int value) {
          ensureXIsMutable();
          x_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 X = 5 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public Builder addX(int value) {
          ensureXIsMutable();
          x_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 X = 5 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public Builder addAllX(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureXIsMutable();
          super.addAll(values, x_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 X = 5 [packed = true];</code>
         *
         * <pre>
         * vertex X position
         * </pre>
         */
        public Builder clearX() {
          x_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        // repeated sint32 Y = 6 [packed = true];
        private java.util.List<java.lang.Integer> y_ = java.util.Collections.emptyList();
        private void ensureYIsMutable() {
          if (!((bitField0_ & 0x00000020) == 0x00000020)) {
            y_ = new java.util.ArrayList<java.lang.Integer>(y_);
            bitField0_ |= 0x00000020;
           }
        }
        /**
         * <code>repeated sint32 Y = 6 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getYList() {
          return java.util.Collections.unmodifiableList(y_);
        }
        /**
         * <code>repeated sint32 Y = 6 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public int getYCount() {
          return y_.size();
        }
        /**
         * <code>repeated sint32 Y = 6 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public int getY(int index) {
          return y_.get(index);
        }
        /**
         * <code>repeated sint32 Y = 6 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public Builder setY(
            int index, int value) {
          ensureYIsMutable();
          y_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Y = 6 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public Builder addY(int value) {
          ensureYIsMutable();
          y_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Y = 6 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public Builder addAllY(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureYIsMutable();
          super.addAll(values, y_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Y = 6 [packed = true];</code>
         *
         * <pre>
         * vertex Y position
         * </pre>
         */
        public Builder clearY() {
          y_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        // repeated sint32 Z = 7 [packed = true];
        private java.util.List<java.lang.Integer> z_ = java.util.Collections.emptyList();
        private void ensureZIsMutable() {
          if (!((bitField0_ & 0x00000040) == 0x00000040)) {
            z_ = new java.util.ArrayList<java.lang.Integer>(z_);
            bitField0_ |= 0x00000040;
           }
        }
        /**
         * <code>repeated sint32 Z = 7 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getZList() {
          return java.util.Collections.unmodifiableList(z_);
        }
        /**
         * <code>repeated sint32 Z = 7 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public int getZCount() {
          return z_.size();
        }
        /**
         * <code>repeated sint32 Z = 7 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public int getZ(int index) {
          return z_.get(index);
        }
        /**
         * <code>repeated sint32 Z = 7 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public Builder setZ(
            int index, int value) {
          ensureZIsMutable();
          z_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Z = 7 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public Builder addZ(int value) {
          ensureZIsMutable();
          z_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Z = 7 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public Builder addAllZ(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureZIsMutable();
          super.addAll(values, z_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 Z = 7 [packed = true];</code>
         *
         * <pre>
         * vertex Z position
         * </pre>
         */
        public Builder clearZ() {
          z_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }

        // repeated sint32 XOuter = 8 [packed = true];
        private java.util.List<java.lang.Integer> xOuter_ = java.util.Collections.emptyList();
        private void ensureXOuterIsMutable() {
          if (!((bitField0_ & 0x00000080) == 0x00000080)) {
            xOuter_ = new java.util.ArrayList<java.lang.Integer>(xOuter_);
            bitField0_ |= 0x00000080;
           }
        }
        /**
         * <code>repeated sint32 XOuter = 8 [packed = true];</code>
         *
         * <pre>
         * XOuter
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getXOuterList() {
          return java.util.Collections.unmodifiableList(xOuter_);
        }
        /**
         * <code>repeated sint32 XOuter = 8 [packed = true];</code>
         *
         * <pre>
         * XOuter
         * </pre>
         */
        public int getXOuterCount() {
          return xOuter_.size();
        }
        /**
         * <code>repeated sint32 XOuter = 8 [packed = true];</code>
         *
         * <pre>
         * XOuter
         * </pre>
         */
        public int getXOuter(int index) {
          return xOuter_.get(index);
        }
        /**
         * <code>repeated sint32 XOuter = 8 [packed = true];</code>
         *
         * <pre>
         * XOuter
         * </pre>
         */
        public Builder setXOuter(
            int index, int value) {
          ensureXOuterIsMutable();
          xOuter_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 XOuter = 8 [packed = true];</code>
         *
         * <pre>
         * XOuter
         * </pre>
         */
        public Builder addXOuter(int value) {
          ensureXOuterIsMutable();
          xOuter_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 XOuter = 8 [packed = true];</code>
         *
         * <pre>
         * XOuter
         * </pre>
         */
        public Builder addAllXOuter(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureXOuterIsMutable();
          super.addAll(values, xOuter_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 XOuter = 8 [packed = true];</code>
         *
         * <pre>
         * XOuter
         * </pre>
         */
        public Builder clearXOuter() {
          xOuter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
          return this;
        }

        // repeated sint32 YOuter = 9 [packed = true];
        private java.util.List<java.lang.Integer> yOuter_ = java.util.Collections.emptyList();
        private void ensureYOuterIsMutable() {
          if (!((bitField0_ & 0x00000100) == 0x00000100)) {
            yOuter_ = new java.util.ArrayList<java.lang.Integer>(yOuter_);
            bitField0_ |= 0x00000100;
           }
        }
        /**
         * <code>repeated sint32 YOuter = 9 [packed = true];</code>
         *
         * <pre>
         * YOuter
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getYOuterList() {
          return java.util.Collections.unmodifiableList(yOuter_);
        }
        /**
         * <code>repeated sint32 YOuter = 9 [packed = true];</code>
         *
         * <pre>
         * YOuter
         * </pre>
         */
        public int getYOuterCount() {
          return yOuter_.size();
        }
        /**
         * <code>repeated sint32 YOuter = 9 [packed = true];</code>
         *
         * <pre>
         * YOuter
         * </pre>
         */
        public int getYOuter(int index) {
          return yOuter_.get(index);
        }
        /**
         * <code>repeated sint32 YOuter = 9 [packed = true];</code>
         *
         * <pre>
         * YOuter
         * </pre>
         */
        public Builder setYOuter(
            int index, int value) {
          ensureYOuterIsMutable();
          yOuter_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 YOuter = 9 [packed = true];</code>
         *
         * <pre>
         * YOuter
         * </pre>
         */
        public Builder addYOuter(int value) {
          ensureYOuterIsMutable();
          yOuter_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 YOuter = 9 [packed = true];</code>
         *
         * <pre>
         * YOuter
         * </pre>
         */
        public Builder addAllYOuter(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureYOuterIsMutable();
          super.addAll(values, yOuter_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 YOuter = 9 [packed = true];</code>
         *
         * <pre>
         * YOuter
         * </pre>
         */
        public Builder clearYOuter() {
          yOuter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }

        // repeated sint32 ZOuter = 10 [packed = true];
        private java.util.List<java.lang.Integer> zOuter_ = java.util.Collections.emptyList();
        private void ensureZOuterIsMutable() {
          if (!((bitField0_ & 0x00000200) == 0x00000200)) {
            zOuter_ = new java.util.ArrayList<java.lang.Integer>(zOuter_);
            bitField0_ |= 0x00000200;
           }
        }
        /**
         * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
         *
         * <pre>
         * ZOuter
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getZOuterList() {
          return java.util.Collections.unmodifiableList(zOuter_);
        }
        /**
         * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
         *
         * <pre>
         * ZOuter
         * </pre>
         */
        public int getZOuterCount() {
          return zOuter_.size();
        }
        /**
         * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
         *
         * <pre>
         * ZOuter
         * </pre>
         */
        public int getZOuter(int index) {
          return zOuter_.get(index);
        }
        /**
         * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
         *
         * <pre>
         * ZOuter
         * </pre>
         */
        public Builder setZOuter(
            int index, int value) {
          ensureZOuterIsMutable();
          zOuter_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
         *
         * <pre>
         * ZOuter
         * </pre>
         */
        public Builder addZOuter(int value) {
          ensureZOuterIsMutable();
          zOuter_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
         *
         * <pre>
         * ZOuter
         * </pre>
         */
        public Builder addAllZOuter(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureZOuterIsMutable();
          super.addAll(values, zOuter_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 ZOuter = 10 [packed = true];</code>
         *
         * <pre>
         * ZOuter
         * </pre>
         */
        public Builder clearZOuter() {
          zOuter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
          return this;
        }

        // repeated sint32 EtaOuter = 11 [packed = true];
        private java.util.List<java.lang.Integer> etaOuter_ = java.util.Collections.emptyList();
        private void ensureEtaOuterIsMutable() {
          if (!((bitField0_ & 0x00000400) == 0x00000400)) {
            etaOuter_ = new java.util.ArrayList<java.lang.Integer>(etaOuter_);
            bitField0_ |= 0x00000400;
           }
        }
        /**
         * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
         *
         * <pre>
         * EtaOuter
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getEtaOuterList() {
          return java.util.Collections.unmodifiableList(etaOuter_);
        }
        /**
         * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
         *
         * <pre>
         * EtaOuter
         * </pre>
         */
        public int getEtaOuterCount() {
          return etaOuter_.size();
        }
        /**
         * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
         *
         * <pre>
         * EtaOuter
         * </pre>
         */
        public int getEtaOuter(int index) {
          return etaOuter_.get(index);
        }
        /**
         * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
         *
         * <pre>
         * EtaOuter
         * </pre>
         */
        public Builder setEtaOuter(
            int index, int value) {
          ensureEtaOuterIsMutable();
          etaOuter_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
         *
         * <pre>
         * EtaOuter
         * </pre>
         */
        public Builder addEtaOuter(int value) {
          ensureEtaOuterIsMutable();
          etaOuter_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
         *
         * <pre>
         * EtaOuter
         * </pre>
         */
        public Builder addAllEtaOuter(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureEtaOuterIsMutable();
          super.addAll(values, etaOuter_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 EtaOuter = 11 [packed = true];</code>
         *
         * <pre>
         * EtaOuter
         * </pre>
         */
        public Builder clearEtaOuter() {
          etaOuter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
          return this;
        }

        // repeated sint32 PhiOuter = 12 [packed = true];
        private java.util.List<java.lang.Integer> phiOuter_ = java.util.Collections.emptyList();
        private void ensurePhiOuterIsMutable() {
          if (!((bitField0_ & 0x00000800) == 0x00000800)) {
            phiOuter_ = new java.util.ArrayList<java.lang.Integer>(phiOuter_);
            bitField0_ |= 0x00000800;
           }
        }
        /**
         * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
         *
         * <pre>
         * PhiOuter
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getPhiOuterList() {
          return java.util.Collections.unmodifiableList(phiOuter_);
        }
        /**
         * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
         *
         * <pre>
         * PhiOuter
         * </pre>
         */
        public int getPhiOuterCount() {
          return phiOuter_.size();
        }
        /**
         * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
         *
         * <pre>
         * PhiOuter
         * </pre>
         */
        public int getPhiOuter(int index) {
          return phiOuter_.get(index);
        }
        /**
         * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
         *
         * <pre>
         * PhiOuter
         * </pre>
         */
        public Builder setPhiOuter(
            int index, int value) {
          ensurePhiOuterIsMutable();
          phiOuter_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
         *
         * <pre>
         * PhiOuter
         * </pre>
         */
        public Builder addPhiOuter(int value) {
          ensurePhiOuterIsMutable();
          phiOuter_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
         *
         * <pre>
         * PhiOuter
         * </pre>
         */
        public Builder addAllPhiOuter(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensurePhiOuterIsMutable();
          super.addAll(values, phiOuter_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint32 PhiOuter = 12 [packed = true];</code>
         *
         * <pre>
         * PhiOuter
         * </pre>
         */
        public Builder clearPhiOuter() {
          phiOuter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Tracks)
      }

      static {
        defaultInstance = new Tracks(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Tracks)
    }

    public interface PhotonsOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint64 PT = 1 [packed = true];
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      java.util.List<java.lang.Long> getPTList();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      int getPTCount();
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      long getPT(int index);

      // repeated sint64 Eta = 2 [packed = true];
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      java.util.List<java.lang.Long> getEtaList();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      int getEtaCount();
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      long getEta(int index);

      // repeated sint64 Phi = 3 [packed = true];
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      java.util.List<java.lang.Long> getPhiList();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      int getPhiCount();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      long getPhi(int index);

      // repeated sint64 Energy = 4 [packed = true];
      /**
       * <code>repeated sint64 Energy = 4 [packed = true];</code>
       *
       * <pre>
       * Energy 
       * </pre>
       */
      java.util.List<java.lang.Long> getEnergyList();
      /**
       * <code>repeated sint64 Energy = 4 [packed = true];</code>
       *
       * <pre>
       * Energy 
       * </pre>
       */
      int getEnergyCount();
      /**
       * <code>repeated sint64 Energy = 4 [packed = true];</code>
       *
       * <pre>
       * Energy 
       * </pre>
       */
      long getEnergy(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.Photons}
     *
     * <pre>
     * reconstructed photons
     * </pre>
     */
    public static final class Photons extends
        com.google.protobuf.GeneratedMessage
        implements PhotonsOrBuilder {
      // Use Photons.newBuilder() to construct.
      private Photons(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Photons(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Photons defaultInstance;
      public static Photons getDefaultInstance() {
        return defaultInstance;
      }

      public Photons getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Photons(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                pT_.add(input.readUInt64());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  pT_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  pT_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                eta_.add(input.readSInt64());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  eta_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  eta_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                phi_.add(input.readSInt64());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  phi_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  energy_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                energy_.add(input.readSInt64());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  energy_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  energy_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            energy_ = java.util.Collections.unmodifiableList(energy_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Photons_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_Photons_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.Photons.class, proreco.io.ProMC.ProMCEvent.Photons.Builder.class);
      }

      public static com.google.protobuf.Parser<Photons> PARSER =
          new com.google.protobuf.AbstractParser<Photons>() {
        public Photons parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Photons(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Photons> getParserForType() {
        return PARSER;
      }

      // repeated uint64 PT = 1 [packed = true];
      public static final int PT_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Long> pT_;
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPTList() {
        return pT_;
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public int getPTCount() {
        return pT_.size();
      }
      /**
       * <code>repeated uint64 PT = 1 [packed = true];</code>
       *
       * <pre>
       * PT
       * </pre>
       */
      public long getPT(int index) {
        return pT_.get(index);
      }
      private int pTMemoizedSerializedSize = -1;

      // repeated sint64 Eta = 2 [packed = true];
      public static final int ETA_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Long> eta_;
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEtaList() {
        return eta_;
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public int getEtaCount() {
        return eta_.size();
      }
      /**
       * <code>repeated sint64 Eta = 2 [packed = true];</code>
       *
       * <pre>
       * Eta
       * </pre>
       */
      public long getEta(int index) {
        return eta_.get(index);
      }
      private int etaMemoizedSerializedSize = -1;

      // repeated sint64 Phi = 3 [packed = true];
      public static final int PHI_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Long> phi_;
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPhiList() {
        return phi_;
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public int getPhiCount() {
        return phi_.size();
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public long getPhi(int index) {
        return phi_.get(index);
      }
      private int phiMemoizedSerializedSize = -1;

      // repeated sint64 Energy = 4 [packed = true];
      public static final int ENERGY_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Long> energy_;
      /**
       * <code>repeated sint64 Energy = 4 [packed = true];</code>
       *
       * <pre>
       * Energy 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getEnergyList() {
        return energy_;
      }
      /**
       * <code>repeated sint64 Energy = 4 [packed = true];</code>
       *
       * <pre>
       * Energy 
       * </pre>
       */
      public int getEnergyCount() {
        return energy_.size();
      }
      /**
       * <code>repeated sint64 Energy = 4 [packed = true];</code>
       *
       * <pre>
       * Energy 
       * </pre>
       */
      public long getEnergy(int index) {
        return energy_.get(index);
      }
      private int energyMemoizedSerializedSize = -1;

      private void initFields() {
        pT_ = java.util.Collections.emptyList();
        eta_ = java.util.Collections.emptyList();
        phi_ = java.util.Collections.emptyList();
        energy_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getPTList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(pTMemoizedSerializedSize);
        }
        for (int i = 0; i < pT_.size(); i++) {
          output.writeUInt64NoTag(pT_.get(i));
        }
        if (getEtaList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(etaMemoizedSerializedSize);
        }
        for (int i = 0; i < eta_.size(); i++) {
          output.writeSInt64NoTag(eta_.get(i));
        }
        if (getPhiList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(phiMemoizedSerializedSize);
        }
        for (int i = 0; i < phi_.size(); i++) {
          output.writeSInt64NoTag(phi_.get(i));
        }
        if (getEnergyList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(energyMemoizedSerializedSize);
        }
        for (int i = 0; i < energy_.size(); i++) {
          output.writeSInt64NoTag(energy_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < pT_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(pT_.get(i));
          }
          size += dataSize;
          if (!getPTList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          pTMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < eta_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(eta_.get(i));
          }
          size += dataSize;
          if (!getEtaList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          etaMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < phi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(phi_.get(i));
          }
          size += dataSize;
          if (!getPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          phiMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < energy_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(energy_.get(i));
          }
          size += dataSize;
          if (!getEnergyList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          energyMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static proreco.io.ProMC.ProMCEvent.Photons parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Photons parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Photons parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.Photons parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Photons parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Photons parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Photons parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Photons parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.Photons parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.Photons parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proreco.io.ProMC.ProMCEvent.Photons prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.Photons}
       *
       * <pre>
       * reconstructed photons
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements proreco.io.ProMC.ProMCEvent.PhotonsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Photons_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Photons_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  proreco.io.ProMC.ProMCEvent.Photons.class, proreco.io.ProMC.ProMCEvent.Photons.Builder.class);
        }

        // Construct using proreco.io.ProMC.ProMCEvent.Photons.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          energy_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_Photons_descriptor;
        }

        public proreco.io.ProMC.ProMCEvent.Photons getDefaultInstanceForType() {
          return proreco.io.ProMC.ProMCEvent.Photons.getDefaultInstance();
        }

        public proreco.io.ProMC.ProMCEvent.Photons build() {
          proreco.io.ProMC.ProMCEvent.Photons result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public proreco.io.ProMC.ProMCEvent.Photons buildPartial() {
          proreco.io.ProMC.ProMCEvent.Photons result = new proreco.io.ProMC.ProMCEvent.Photons(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = java.util.Collections.unmodifiableList(pT_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pT_ = pT_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = java.util.Collections.unmodifiableList(eta_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.eta_ = eta_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.phi_ = phi_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            energy_ = java.util.Collections.unmodifiableList(energy_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.energy_ = energy_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof proreco.io.ProMC.ProMCEvent.Photons) {
            return mergeFrom((proreco.io.ProMC.ProMCEvent.Photons)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(proreco.io.ProMC.ProMCEvent.Photons other) {
          if (other == proreco.io.ProMC.ProMCEvent.Photons.getDefaultInstance()) return this;
          if (!other.pT_.isEmpty()) {
            if (pT_.isEmpty()) {
              pT_ = other.pT_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePTIsMutable();
              pT_.addAll(other.pT_);
            }
            onChanged();
          }
          if (!other.eta_.isEmpty()) {
            if (eta_.isEmpty()) {
              eta_ = other.eta_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEtaIsMutable();
              eta_.addAll(other.eta_);
            }
            onChanged();
          }
          if (!other.phi_.isEmpty()) {
            if (phi_.isEmpty()) {
              phi_ = other.phi_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensurePhiIsMutable();
              phi_.addAll(other.phi_);
            }
            onChanged();
          }
          if (!other.energy_.isEmpty()) {
            if (energy_.isEmpty()) {
              energy_ = other.energy_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureEnergyIsMutable();
              energy_.addAll(other.energy_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          proreco.io.ProMC.ProMCEvent.Photons parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (proreco.io.ProMC.ProMCEvent.Photons) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint64 PT = 1 [packed = true];
        private java.util.List<java.lang.Long> pT_ = java.util.Collections.emptyList();
        private void ensurePTIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            pT_ = new java.util.ArrayList<java.lang.Long>(pT_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPTList() {
          return java.util.Collections.unmodifiableList(pT_);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public int getPTCount() {
          return pT_.size();
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public long getPT(int index) {
          return pT_.get(index);
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder setPT(
            int index, long value) {
          ensurePTIsMutable();
          pT_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addPT(long value) {
          ensurePTIsMutable();
          pT_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder addAllPT(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePTIsMutable();
          super.addAll(values, pT_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 PT = 1 [packed = true];</code>
         *
         * <pre>
         * PT
         * </pre>
         */
        public Builder clearPT() {
          pT_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint64 Eta = 2 [packed = true];
        private java.util.List<java.lang.Long> eta_ = java.util.Collections.emptyList();
        private void ensureEtaIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            eta_ = new java.util.ArrayList<java.lang.Long>(eta_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEtaList() {
          return java.util.Collections.unmodifiableList(eta_);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public int getEtaCount() {
          return eta_.size();
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public long getEta(int index) {
          return eta_.get(index);
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder setEta(
            int index, long value) {
          ensureEtaIsMutable();
          eta_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addEta(long value) {
          ensureEtaIsMutable();
          eta_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder addAllEta(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEtaIsMutable();
          super.addAll(values, eta_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Eta = 2 [packed = true];</code>
         *
         * <pre>
         * Eta
         * </pre>
         */
        public Builder clearEta() {
          eta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated sint64 Phi = 3 [packed = true];
        private java.util.List<java.lang.Long> phi_ = java.util.Collections.emptyList();
        private void ensurePhiIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            phi_ = new java.util.ArrayList<java.lang.Long>(phi_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPhiList() {
          return java.util.Collections.unmodifiableList(phi_);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public int getPhiCount() {
          return phi_.size();
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public long getPhi(int index) {
          return phi_.get(index);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder setPhi(
            int index, long value) {
          ensurePhiIsMutable();
          phi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addPhi(long value) {
          ensurePhiIsMutable();
          phi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addAllPhi(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePhiIsMutable();
          super.addAll(values, phi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder clearPhi() {
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated sint64 Energy = 4 [packed = true];
        private java.util.List<java.lang.Long> energy_ = java.util.Collections.emptyList();
        private void ensureEnergyIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            energy_ = new java.util.ArrayList<java.lang.Long>(energy_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated sint64 Energy = 4 [packed = true];</code>
         *
         * <pre>
         * Energy 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getEnergyList() {
          return java.util.Collections.unmodifiableList(energy_);
        }
        /**
         * <code>repeated sint64 Energy = 4 [packed = true];</code>
         *
         * <pre>
         * Energy 
         * </pre>
         */
        public int getEnergyCount() {
          return energy_.size();
        }
        /**
         * <code>repeated sint64 Energy = 4 [packed = true];</code>
         *
         * <pre>
         * Energy 
         * </pre>
         */
        public long getEnergy(int index) {
          return energy_.get(index);
        }
        /**
         * <code>repeated sint64 Energy = 4 [packed = true];</code>
         *
         * <pre>
         * Energy 
         * </pre>
         */
        public Builder setEnergy(
            int index, long value) {
          ensureEnergyIsMutable();
          energy_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Energy = 4 [packed = true];</code>
         *
         * <pre>
         * Energy 
         * </pre>
         */
        public Builder addEnergy(long value) {
          ensureEnergyIsMutable();
          energy_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Energy = 4 [packed = true];</code>
         *
         * <pre>
         * Energy 
         * </pre>
         */
        public Builder addAllEnergy(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureEnergyIsMutable();
          super.addAll(values, energy_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Energy = 4 [packed = true];</code>
         *
         * <pre>
         * Energy 
         * </pre>
         */
        public Builder clearEnergy() {
          energy_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.Photons)
      }

      static {
        defaultInstance = new Photons(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.Photons)
    }

    public interface MissingETOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // repeated uint64 MET = 1 [packed = true];
      /**
       * <code>repeated uint64 MET = 1 [packed = true];</code>
       *
       * <pre>
       * MET 
       * </pre>
       */
      java.util.List<java.lang.Long> getMETList();
      /**
       * <code>repeated uint64 MET = 1 [packed = true];</code>
       *
       * <pre>
       * MET 
       * </pre>
       */
      int getMETCount();
      /**
       * <code>repeated uint64 MET = 1 [packed = true];</code>
       *
       * <pre>
       * MET 
       * </pre>
       */
      long getMET(int index);

      // repeated sint64 Phi = 3 [packed = true];
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      java.util.List<java.lang.Long> getPhiList();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      int getPhiCount();
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      long getPhi(int index);
    }
    /**
     * Protobuf type {@code promc.ProMCEvent.MissingET}
     *
     * <pre>
     * missing ET 
     * </pre>
     */
    public static final class MissingET extends
        com.google.protobuf.GeneratedMessage
        implements MissingETOrBuilder {
      // Use MissingET.newBuilder() to construct.
      private MissingET(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private MissingET(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final MissingET defaultInstance;
      public static MissingET getDefaultInstance() {
        return defaultInstance;
      }

      public MissingET getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private MissingET(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  mET_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                mET_.add(input.readUInt64());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  mET_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  mET_.add(input.readUInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                phi_.add(input.readSInt64());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  phi_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  phi_.add(input.readSInt64());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            mET_ = java.util.Collections.unmodifiableList(mET_);
          }
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_MissingET_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_MissingET_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.MissingET.class, proreco.io.ProMC.ProMCEvent.MissingET.Builder.class);
      }

      public static com.google.protobuf.Parser<MissingET> PARSER =
          new com.google.protobuf.AbstractParser<MissingET>() {
        public MissingET parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new MissingET(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<MissingET> getParserForType() {
        return PARSER;
      }

      // repeated uint64 MET = 1 [packed = true];
      public static final int MET_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Long> mET_;
      /**
       * <code>repeated uint64 MET = 1 [packed = true];</code>
       *
       * <pre>
       * MET 
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getMETList() {
        return mET_;
      }
      /**
       * <code>repeated uint64 MET = 1 [packed = true];</code>
       *
       * <pre>
       * MET 
       * </pre>
       */
      public int getMETCount() {
        return mET_.size();
      }
      /**
       * <code>repeated uint64 MET = 1 [packed = true];</code>
       *
       * <pre>
       * MET 
       * </pre>
       */
      public long getMET(int index) {
        return mET_.get(index);
      }
      private int mETMemoizedSerializedSize = -1;

      // repeated sint64 Phi = 3 [packed = true];
      public static final int PHI_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Long> phi_;
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPhiList() {
        return phi_;
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public int getPhiCount() {
        return phi_.size();
      }
      /**
       * <code>repeated sint64 Phi = 3 [packed = true];</code>
       *
       * <pre>
       * Phi
       * </pre>
       */
      public long getPhi(int index) {
        return phi_.get(index);
      }
      private int phiMemoizedSerializedSize = -1;

      private void initFields() {
        mET_ = java.util.Collections.emptyList();
        phi_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getMETList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(mETMemoizedSerializedSize);
        }
        for (int i = 0; i < mET_.size(); i++) {
          output.writeUInt64NoTag(mET_.get(i));
        }
        if (getPhiList().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(phiMemoizedSerializedSize);
        }
        for (int i = 0; i < phi_.size(); i++) {
          output.writeSInt64NoTag(phi_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < mET_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt64SizeNoTag(mET_.get(i));
          }
          size += dataSize;
          if (!getMETList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          mETMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < phi_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeSInt64SizeNoTag(phi_.get(i));
          }
          size += dataSize;
          if (!getPhiList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          phiMemoizedSerializedSize = dataSize;
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static proreco.io.ProMC.ProMCEvent.MissingET parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.MissingET parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.MissingET parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static proreco.io.ProMC.ProMCEvent.MissingET parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.MissingET parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.MissingET parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.MissingET parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.MissingET parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static proreco.io.ProMC.ProMCEvent.MissingET parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static proreco.io.ProMC.ProMCEvent.MissingET parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proreco.io.ProMC.ProMCEvent.MissingET prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code promc.ProMCEvent.MissingET}
       *
       * <pre>
       * missing ET 
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements proreco.io.ProMC.ProMCEvent.MissingETOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_MissingET_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_MissingET_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  proreco.io.ProMC.ProMCEvent.MissingET.class, proreco.io.ProMC.ProMCEvent.MissingET.Builder.class);
        }

        // Construct using proreco.io.ProMC.ProMCEvent.MissingET.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          mET_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proreco.io.ProMC.internal_static_promc_ProMCEvent_MissingET_descriptor;
        }

        public proreco.io.ProMC.ProMCEvent.MissingET getDefaultInstanceForType() {
          return proreco.io.ProMC.ProMCEvent.MissingET.getDefaultInstance();
        }

        public proreco.io.ProMC.ProMCEvent.MissingET build() {
          proreco.io.ProMC.ProMCEvent.MissingET result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public proreco.io.ProMC.ProMCEvent.MissingET buildPartial() {
          proreco.io.ProMC.ProMCEvent.MissingET result = new proreco.io.ProMC.ProMCEvent.MissingET(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            mET_ = java.util.Collections.unmodifiableList(mET_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.mET_ = mET_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            phi_ = java.util.Collections.unmodifiableList(phi_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.phi_ = phi_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof proreco.io.ProMC.ProMCEvent.MissingET) {
            return mergeFrom((proreco.io.ProMC.ProMCEvent.MissingET)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(proreco.io.ProMC.ProMCEvent.MissingET other) {
          if (other == proreco.io.ProMC.ProMCEvent.MissingET.getDefaultInstance()) return this;
          if (!other.mET_.isEmpty()) {
            if (mET_.isEmpty()) {
              mET_ = other.mET_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMETIsMutable();
              mET_.addAll(other.mET_);
            }
            onChanged();
          }
          if (!other.phi_.isEmpty()) {
            if (phi_.isEmpty()) {
              phi_ = other.phi_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePhiIsMutable();
              phi_.addAll(other.phi_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          proreco.io.ProMC.ProMCEvent.MissingET parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (proreco.io.ProMC.ProMCEvent.MissingET) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint64 MET = 1 [packed = true];
        private java.util.List<java.lang.Long> mET_ = java.util.Collections.emptyList();
        private void ensureMETIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            mET_ = new java.util.ArrayList<java.lang.Long>(mET_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint64 MET = 1 [packed = true];</code>
         *
         * <pre>
         * MET 
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getMETList() {
          return java.util.Collections.unmodifiableList(mET_);
        }
        /**
         * <code>repeated uint64 MET = 1 [packed = true];</code>
         *
         * <pre>
         * MET 
         * </pre>
         */
        public int getMETCount() {
          return mET_.size();
        }
        /**
         * <code>repeated uint64 MET = 1 [packed = true];</code>
         *
         * <pre>
         * MET 
         * </pre>
         */
        public long getMET(int index) {
          return mET_.get(index);
        }
        /**
         * <code>repeated uint64 MET = 1 [packed = true];</code>
         *
         * <pre>
         * MET 
         * </pre>
         */
        public Builder setMET(
            int index, long value) {
          ensureMETIsMutable();
          mET_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 MET = 1 [packed = true];</code>
         *
         * <pre>
         * MET 
         * </pre>
         */
        public Builder addMET(long value) {
          ensureMETIsMutable();
          mET_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 MET = 1 [packed = true];</code>
         *
         * <pre>
         * MET 
         * </pre>
         */
        public Builder addAllMET(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureMETIsMutable();
          super.addAll(values, mET_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint64 MET = 1 [packed = true];</code>
         *
         * <pre>
         * MET 
         * </pre>
         */
        public Builder clearMET() {
          mET_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }

        // repeated sint64 Phi = 3 [packed = true];
        private java.util.List<java.lang.Long> phi_ = java.util.Collections.emptyList();
        private void ensurePhiIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            phi_ = new java.util.ArrayList<java.lang.Long>(phi_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public java.util.List<java.lang.Long>
            getPhiList() {
          return java.util.Collections.unmodifiableList(phi_);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public int getPhiCount() {
          return phi_.size();
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public long getPhi(int index) {
          return phi_.get(index);
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder setPhi(
            int index, long value) {
          ensurePhiIsMutable();
          phi_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addPhi(long value) {
          ensurePhiIsMutable();
          phi_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder addAllPhi(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensurePhiIsMutable();
          super.addAll(values, phi_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated sint64 Phi = 3 [packed = true];</code>
         *
         * <pre>
         * Phi
         * </pre>
         */
        public Builder clearPhi() {
          phi_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:promc.ProMCEvent.MissingET)
      }

      static {
        defaultInstance = new MissingET(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:promc.ProMCEvent.MissingET)
    }

    private int bitField0_;
    // optional .promc.ProMCEvent.Event event = 1;
    public static final int EVENT_FIELD_NUMBER = 1;
    private proreco.io.ProMC.ProMCEvent.Event event_;
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * information on event 
     * </pre>
     */
    public boolean hasEvent() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * information on event 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.Event getEvent() {
      return event_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Event event = 1;</code>
     *
     * <pre>
     * information on event 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.EventOrBuilder getEventOrBuilder() {
      return event_;
    }

    // optional .promc.ProMCEvent.Particles particles = 2;
    public static final int PARTICLES_FIELD_NUMBER = 2;
    private proreco.io.ProMC.ProMCEvent.Particles particles_;
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on particle 
     * </pre>
     */
    public boolean hasParticles() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on particle 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.Particles getParticles() {
      return particles_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
     *
     * <pre>
     * information on particle 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.ParticlesOrBuilder getParticlesOrBuilder() {
      return particles_;
    }

    // optional .promc.ProMCEvent.Jets jets = 3;
    public static final int JETS_FIELD_NUMBER = 3;
    private proreco.io.ProMC.ProMCEvent.Jets jets_;
    /**
     * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
     *
     * <pre>
     * jets 
     * </pre>
     */
    public boolean hasJets() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
     *
     * <pre>
     * jets 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.Jets getJets() {
      return jets_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
     *
     * <pre>
     * jets 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.JetsOrBuilder getJetsOrBuilder() {
      return jets_;
    }

    // optional .promc.ProMCEvent.GenJets genjets = 4;
    public static final int GENJETS_FIELD_NUMBER = 4;
    private proreco.io.ProMC.ProMCEvent.GenJets genjets_;
    /**
     * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
     *
     * <pre>
     * generator jets 
     * </pre>
     */
    public boolean hasGenjets() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
     *
     * <pre>
     * generator jets 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.GenJets getGenjets() {
      return genjets_;
    }
    /**
     * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
     *
     * <pre>
     * generator jets 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.GenJetsOrBuilder getGenjetsOrBuilder() {
      return genjets_;
    }

    // optional .promc.ProMCEvent.BLJets bjets = 5;
    public static final int BJETS_FIELD_NUMBER = 5;
    private proreco.io.ProMC.ProMCEvent.BLJets bjets_;
    /**
     * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
     *
     * <pre>
     * b-jets
     * </pre>
     */
    public boolean hasBjets() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
     *
     * <pre>
     * b-jets
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.BLJets getBjets() {
      return bjets_;
    }
    /**
     * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
     *
     * <pre>
     * b-jets
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.BLJetsOrBuilder getBjetsOrBuilder() {
      return bjets_;
    }

    // optional .promc.ProMCEvent.Electrons electrons = 6;
    public static final int ELECTRONS_FIELD_NUMBER = 6;
    private proreco.io.ProMC.ProMCEvent.Electrons electrons_;
    /**
     * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
     *
     * <pre>
     * electrons
     * </pre>
     */
    public boolean hasElectrons() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
     *
     * <pre>
     * electrons
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.Electrons getElectrons() {
      return electrons_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
     *
     * <pre>
     * electrons
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.ElectronsOrBuilder getElectronsOrBuilder() {
      return electrons_;
    }

    // optional .promc.ProMCEvent.Muons muons = 7;
    public static final int MUONS_FIELD_NUMBER = 7;
    private proreco.io.ProMC.ProMCEvent.Muons muons_;
    /**
     * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
     *
     * <pre>
     * muons 
     * </pre>
     */
    public boolean hasMuons() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
     *
     * <pre>
     * muons 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.Muons getMuons() {
      return muons_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
     *
     * <pre>
     * muons 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.MuonsOrBuilder getMuonsOrBuilder() {
      return muons_;
    }

    // optional .promc.ProMCEvent.Tracks tracks = 8;
    public static final int TRACKS_FIELD_NUMBER = 8;
    private proreco.io.ProMC.ProMCEvent.Tracks tracks_;
    /**
     * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
     *
     * <pre>
     * tracks 
     * </pre>
     */
    public boolean hasTracks() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
     *
     * <pre>
     * tracks 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.Tracks getTracks() {
      return tracks_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
     *
     * <pre>
     * tracks 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.TracksOrBuilder getTracksOrBuilder() {
      return tracks_;
    }

    // optional .promc.ProMCEvent.Photons photons = 9;
    public static final int PHOTONS_FIELD_NUMBER = 9;
    private proreco.io.ProMC.ProMCEvent.Photons photons_;
    /**
     * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
     *
     * <pre>
     * photons 
     * </pre>
     */
    public boolean hasPhotons() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
     *
     * <pre>
     * photons 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.Photons getPhotons() {
      return photons_;
    }
    /**
     * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
     *
     * <pre>
     * photons 
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.PhotonsOrBuilder getPhotonsOrBuilder() {
      return photons_;
    }

    // optional .promc.ProMCEvent.MissingET missingET = 10;
    public static final int MISSINGET_FIELD_NUMBER = 10;
    private proreco.io.ProMC.ProMCEvent.MissingET missingET_;
    /**
     * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
     *
     * <pre>
     * missing ET
     * </pre>
     */
    public boolean hasMissingET() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
     *
     * <pre>
     * missing ET
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.MissingET getMissingET() {
      return missingET_;
    }
    /**
     * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
     *
     * <pre>
     * missing ET
     * </pre>
     */
    public proreco.io.ProMC.ProMCEvent.MissingETOrBuilder getMissingETOrBuilder() {
      return missingET_;
    }

    private void initFields() {
      event_ = proreco.io.ProMC.ProMCEvent.Event.getDefaultInstance();
      particles_ = proreco.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
      jets_ = proreco.io.ProMC.ProMCEvent.Jets.getDefaultInstance();
      genjets_ = proreco.io.ProMC.ProMCEvent.GenJets.getDefaultInstance();
      bjets_ = proreco.io.ProMC.ProMCEvent.BLJets.getDefaultInstance();
      electrons_ = proreco.io.ProMC.ProMCEvent.Electrons.getDefaultInstance();
      muons_ = proreco.io.ProMC.ProMCEvent.Muons.getDefaultInstance();
      tracks_ = proreco.io.ProMC.ProMCEvent.Tracks.getDefaultInstance();
      photons_ = proreco.io.ProMC.ProMCEvent.Photons.getDefaultInstance();
      missingET_ = proreco.io.ProMC.ProMCEvent.MissingET.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, event_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, particles_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, jets_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, genjets_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, bjets_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, electrons_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, muons_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, tracks_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, photons_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, missingET_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, event_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, particles_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, jets_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, genjets_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, bjets_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, electrons_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, muons_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, tracks_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, photons_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, missingET_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static proreco.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proreco.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proreco.io.ProMC.ProMCEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proreco.io.ProMC.ProMCEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proreco.io.ProMC.ProMCEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static proreco.io.ProMC.ProMCEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static proreco.io.ProMC.ProMCEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static proreco.io.ProMC.ProMCEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static proreco.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static proreco.io.ProMC.ProMCEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(proreco.io.ProMC.ProMCEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code promc.ProMCEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements proreco.io.ProMC.ProMCEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proreco.io.ProMC.ProMCEvent.class, proreco.io.ProMC.ProMCEvent.Builder.class);
      }

      // Construct using proreco.io.ProMC.ProMCEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getEventFieldBuilder();
          getParticlesFieldBuilder();
          getJetsFieldBuilder();
          getGenjetsFieldBuilder();
          getBjetsFieldBuilder();
          getElectronsFieldBuilder();
          getMuonsFieldBuilder();
          getTracksFieldBuilder();
          getPhotonsFieldBuilder();
          getMissingETFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (eventBuilder_ == null) {
          event_ = proreco.io.ProMC.ProMCEvent.Event.getDefaultInstance();
        } else {
          eventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (particlesBuilder_ == null) {
          particles_ = proreco.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
        } else {
          particlesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (jetsBuilder_ == null) {
          jets_ = proreco.io.ProMC.ProMCEvent.Jets.getDefaultInstance();
        } else {
          jetsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (genjetsBuilder_ == null) {
          genjets_ = proreco.io.ProMC.ProMCEvent.GenJets.getDefaultInstance();
        } else {
          genjetsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (bjetsBuilder_ == null) {
          bjets_ = proreco.io.ProMC.ProMCEvent.BLJets.getDefaultInstance();
        } else {
          bjetsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (electronsBuilder_ == null) {
          electrons_ = proreco.io.ProMC.ProMCEvent.Electrons.getDefaultInstance();
        } else {
          electronsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (muonsBuilder_ == null) {
          muons_ = proreco.io.ProMC.ProMCEvent.Muons.getDefaultInstance();
        } else {
          muonsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (tracksBuilder_ == null) {
          tracks_ = proreco.io.ProMC.ProMCEvent.Tracks.getDefaultInstance();
        } else {
          tracksBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (photonsBuilder_ == null) {
          photons_ = proreco.io.ProMC.ProMCEvent.Photons.getDefaultInstance();
        } else {
          photonsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (missingETBuilder_ == null) {
          missingET_ = proreco.io.ProMC.ProMCEvent.MissingET.getDefaultInstance();
        } else {
          missingETBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return proreco.io.ProMC.internal_static_promc_ProMCEvent_descriptor;
      }

      public proreco.io.ProMC.ProMCEvent getDefaultInstanceForType() {
        return proreco.io.ProMC.ProMCEvent.getDefaultInstance();
      }

      public proreco.io.ProMC.ProMCEvent build() {
        proreco.io.ProMC.ProMCEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public proreco.io.ProMC.ProMCEvent buildPartial() {
        proreco.io.ProMC.ProMCEvent result = new proreco.io.ProMC.ProMCEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (particlesBuilder_ == null) {
          result.particles_ = particles_;
        } else {
          result.particles_ = particlesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (jetsBuilder_ == null) {
          result.jets_ = jets_;
        } else {
          result.jets_ = jetsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (genjetsBuilder_ == null) {
          result.genjets_ = genjets_;
        } else {
          result.genjets_ = genjetsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (bjetsBuilder_ == null) {
          result.bjets_ = bjets_;
        } else {
          result.bjets_ = bjetsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (electronsBuilder_ == null) {
          result.electrons_ = electrons_;
        } else {
          result.electrons_ = electronsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (muonsBuilder_ == null) {
          result.muons_ = muons_;
        } else {
          result.muons_ = muonsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (tracksBuilder_ == null) {
          result.tracks_ = tracks_;
        } else {
          result.tracks_ = tracksBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (photonsBuilder_ == null) {
          result.photons_ = photons_;
        } else {
          result.photons_ = photonsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (missingETBuilder_ == null) {
          result.missingET_ = missingET_;
        } else {
          result.missingET_ = missingETBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof proreco.io.ProMC.ProMCEvent) {
          return mergeFrom((proreco.io.ProMC.ProMCEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(proreco.io.ProMC.ProMCEvent other) {
        if (other == proreco.io.ProMC.ProMCEvent.getDefaultInstance()) return this;
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        if (other.hasParticles()) {
          mergeParticles(other.getParticles());
        }
        if (other.hasJets()) {
          mergeJets(other.getJets());
        }
        if (other.hasGenjets()) {
          mergeGenjets(other.getGenjets());
        }
        if (other.hasBjets()) {
          mergeBjets(other.getBjets());
        }
        if (other.hasElectrons()) {
          mergeElectrons(other.getElectrons());
        }
        if (other.hasMuons()) {
          mergeMuons(other.getMuons());
        }
        if (other.hasTracks()) {
          mergeTracks(other.getTracks());
        }
        if (other.hasPhotons()) {
          mergePhotons(other.getPhotons());
        }
        if (other.hasMissingET()) {
          mergeMissingET(other.getMissingET());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        proreco.io.ProMC.ProMCEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (proreco.io.ProMC.ProMCEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .promc.ProMCEvent.Event event = 1;
      private proreco.io.ProMC.ProMCEvent.Event event_ = proreco.io.ProMC.ProMCEvent.Event.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Event, proreco.io.ProMC.ProMCEvent.Event.Builder, proreco.io.ProMC.ProMCEvent.EventOrBuilder> eventBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * information on event 
       * </pre>
       */
      public boolean hasEvent() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * information on event 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Event getEvent() {
        if (eventBuilder_ == null) {
          return event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * information on event 
       * </pre>
       */
      public Builder setEvent(proreco.io.ProMC.ProMCEvent.Event value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * information on event 
       * </pre>
       */
      public Builder setEvent(
          proreco.io.ProMC.ProMCEvent.Event.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * information on event 
       * </pre>
       */
      public Builder mergeEvent(proreco.io.ProMC.ProMCEvent.Event value) {
        if (eventBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              event_ != proreco.io.ProMC.ProMCEvent.Event.getDefaultInstance()) {
            event_ =
              proreco.io.ProMC.ProMCEvent.Event.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * information on event 
       * </pre>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = proreco.io.ProMC.ProMCEvent.Event.getDefaultInstance();
          onChanged();
        } else {
          eventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * information on event 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Event.Builder getEventBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * information on event 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.EventOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Event event = 1;</code>
       *
       * <pre>
       * information on event 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Event, proreco.io.ProMC.ProMCEvent.Event.Builder, proreco.io.ProMC.ProMCEvent.EventOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              proreco.io.ProMC.ProMCEvent.Event, proreco.io.ProMC.ProMCEvent.Event.Builder, proreco.io.ProMC.ProMCEvent.EventOrBuilder>(
                  event_,
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      // optional .promc.ProMCEvent.Particles particles = 2;
      private proreco.io.ProMC.ProMCEvent.Particles particles_ = proreco.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Particles, proreco.io.ProMC.ProMCEvent.Particles.Builder, proreco.io.ProMC.ProMCEvent.ParticlesOrBuilder> particlesBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on particle 
       * </pre>
       */
      public boolean hasParticles() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on particle 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Particles getParticles() {
        if (particlesBuilder_ == null) {
          return particles_;
        } else {
          return particlesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on particle 
       * </pre>
       */
      public Builder setParticles(proreco.io.ProMC.ProMCEvent.Particles value) {
        if (particlesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          particles_ = value;
          onChanged();
        } else {
          particlesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on particle 
       * </pre>
       */
      public Builder setParticles(
          proreco.io.ProMC.ProMCEvent.Particles.Builder builderForValue) {
        if (particlesBuilder_ == null) {
          particles_ = builderForValue.build();
          onChanged();
        } else {
          particlesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on particle 
       * </pre>
       */
      public Builder mergeParticles(proreco.io.ProMC.ProMCEvent.Particles value) {
        if (particlesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              particles_ != proreco.io.ProMC.ProMCEvent.Particles.getDefaultInstance()) {
            particles_ =
              proreco.io.ProMC.ProMCEvent.Particles.newBuilder(particles_).mergeFrom(value).buildPartial();
          } else {
            particles_ = value;
          }
          onChanged();
        } else {
          particlesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on particle 
       * </pre>
       */
      public Builder clearParticles() {
        if (particlesBuilder_ == null) {
          particles_ = proreco.io.ProMC.ProMCEvent.Particles.getDefaultInstance();
          onChanged();
        } else {
          particlesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on particle 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Particles.Builder getParticlesBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getParticlesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on particle 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.ParticlesOrBuilder getParticlesOrBuilder() {
        if (particlesBuilder_ != null) {
          return particlesBuilder_.getMessageOrBuilder();
        } else {
          return particles_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Particles particles = 2;</code>
       *
       * <pre>
       * information on particle 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Particles, proreco.io.ProMC.ProMCEvent.Particles.Builder, proreco.io.ProMC.ProMCEvent.ParticlesOrBuilder> 
          getParticlesFieldBuilder() {
        if (particlesBuilder_ == null) {
          particlesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              proreco.io.ProMC.ProMCEvent.Particles, proreco.io.ProMC.ProMCEvent.Particles.Builder, proreco.io.ProMC.ProMCEvent.ParticlesOrBuilder>(
                  particles_,
                  getParentForChildren(),
                  isClean());
          particles_ = null;
        }
        return particlesBuilder_;
      }

      // optional .promc.ProMCEvent.Jets jets = 3;
      private proreco.io.ProMC.ProMCEvent.Jets jets_ = proreco.io.ProMC.ProMCEvent.Jets.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Jets, proreco.io.ProMC.ProMCEvent.Jets.Builder, proreco.io.ProMC.ProMCEvent.JetsOrBuilder> jetsBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
       *
       * <pre>
       * jets 
       * </pre>
       */
      public boolean hasJets() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
       *
       * <pre>
       * jets 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Jets getJets() {
        if (jetsBuilder_ == null) {
          return jets_;
        } else {
          return jetsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
       *
       * <pre>
       * jets 
       * </pre>
       */
      public Builder setJets(proreco.io.ProMC.ProMCEvent.Jets value) {
        if (jetsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          jets_ = value;
          onChanged();
        } else {
          jetsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
       *
       * <pre>
       * jets 
       * </pre>
       */
      public Builder setJets(
          proreco.io.ProMC.ProMCEvent.Jets.Builder builderForValue) {
        if (jetsBuilder_ == null) {
          jets_ = builderForValue.build();
          onChanged();
        } else {
          jetsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
       *
       * <pre>
       * jets 
       * </pre>
       */
      public Builder mergeJets(proreco.io.ProMC.ProMCEvent.Jets value) {
        if (jetsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              jets_ != proreco.io.ProMC.ProMCEvent.Jets.getDefaultInstance()) {
            jets_ =
              proreco.io.ProMC.ProMCEvent.Jets.newBuilder(jets_).mergeFrom(value).buildPartial();
          } else {
            jets_ = value;
          }
          onChanged();
        } else {
          jetsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
       *
       * <pre>
       * jets 
       * </pre>
       */
      public Builder clearJets() {
        if (jetsBuilder_ == null) {
          jets_ = proreco.io.ProMC.ProMCEvent.Jets.getDefaultInstance();
          onChanged();
        } else {
          jetsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
       *
       * <pre>
       * jets 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Jets.Builder getJetsBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getJetsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
       *
       * <pre>
       * jets 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.JetsOrBuilder getJetsOrBuilder() {
        if (jetsBuilder_ != null) {
          return jetsBuilder_.getMessageOrBuilder();
        } else {
          return jets_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Jets jets = 3;</code>
       *
       * <pre>
       * jets 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Jets, proreco.io.ProMC.ProMCEvent.Jets.Builder, proreco.io.ProMC.ProMCEvent.JetsOrBuilder> 
          getJetsFieldBuilder() {
        if (jetsBuilder_ == null) {
          jetsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              proreco.io.ProMC.ProMCEvent.Jets, proreco.io.ProMC.ProMCEvent.Jets.Builder, proreco.io.ProMC.ProMCEvent.JetsOrBuilder>(
                  jets_,
                  getParentForChildren(),
                  isClean());
          jets_ = null;
        }
        return jetsBuilder_;
      }

      // optional .promc.ProMCEvent.GenJets genjets = 4;
      private proreco.io.ProMC.ProMCEvent.GenJets genjets_ = proreco.io.ProMC.ProMCEvent.GenJets.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.GenJets, proreco.io.ProMC.ProMCEvent.GenJets.Builder, proreco.io.ProMC.ProMCEvent.GenJetsOrBuilder> genjetsBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
       *
       * <pre>
       * generator jets 
       * </pre>
       */
      public boolean hasGenjets() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
       *
       * <pre>
       * generator jets 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.GenJets getGenjets() {
        if (genjetsBuilder_ == null) {
          return genjets_;
        } else {
          return genjetsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
       *
       * <pre>
       * generator jets 
       * </pre>
       */
      public Builder setGenjets(proreco.io.ProMC.ProMCEvent.GenJets value) {
        if (genjetsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          genjets_ = value;
          onChanged();
        } else {
          genjetsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
       *
       * <pre>
       * generator jets 
       * </pre>
       */
      public Builder setGenjets(
          proreco.io.ProMC.ProMCEvent.GenJets.Builder builderForValue) {
        if (genjetsBuilder_ == null) {
          genjets_ = builderForValue.build();
          onChanged();
        } else {
          genjetsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
       *
       * <pre>
       * generator jets 
       * </pre>
       */
      public Builder mergeGenjets(proreco.io.ProMC.ProMCEvent.GenJets value) {
        if (genjetsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              genjets_ != proreco.io.ProMC.ProMCEvent.GenJets.getDefaultInstance()) {
            genjets_ =
              proreco.io.ProMC.ProMCEvent.GenJets.newBuilder(genjets_).mergeFrom(value).buildPartial();
          } else {
            genjets_ = value;
          }
          onChanged();
        } else {
          genjetsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
       *
       * <pre>
       * generator jets 
       * </pre>
       */
      public Builder clearGenjets() {
        if (genjetsBuilder_ == null) {
          genjets_ = proreco.io.ProMC.ProMCEvent.GenJets.getDefaultInstance();
          onChanged();
        } else {
          genjetsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
       *
       * <pre>
       * generator jets 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.GenJets.Builder getGenjetsBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getGenjetsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
       *
       * <pre>
       * generator jets 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.GenJetsOrBuilder getGenjetsOrBuilder() {
        if (genjetsBuilder_ != null) {
          return genjetsBuilder_.getMessageOrBuilder();
        } else {
          return genjets_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.GenJets genjets = 4;</code>
       *
       * <pre>
       * generator jets 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.GenJets, proreco.io.ProMC.ProMCEvent.GenJets.Builder, proreco.io.ProMC.ProMCEvent.GenJetsOrBuilder> 
          getGenjetsFieldBuilder() {
        if (genjetsBuilder_ == null) {
          genjetsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              proreco.io.ProMC.ProMCEvent.GenJets, proreco.io.ProMC.ProMCEvent.GenJets.Builder, proreco.io.ProMC.ProMCEvent.GenJetsOrBuilder>(
                  genjets_,
                  getParentForChildren(),
                  isClean());
          genjets_ = null;
        }
        return genjetsBuilder_;
      }

      // optional .promc.ProMCEvent.BLJets bjets = 5;
      private proreco.io.ProMC.ProMCEvent.BLJets bjets_ = proreco.io.ProMC.ProMCEvent.BLJets.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.BLJets, proreco.io.ProMC.ProMCEvent.BLJets.Builder, proreco.io.ProMC.ProMCEvent.BLJetsOrBuilder> bjetsBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
       *
       * <pre>
       * b-jets
       * </pre>
       */
      public boolean hasBjets() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
       *
       * <pre>
       * b-jets
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.BLJets getBjets() {
        if (bjetsBuilder_ == null) {
          return bjets_;
        } else {
          return bjetsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
       *
       * <pre>
       * b-jets
       * </pre>
       */
      public Builder setBjets(proreco.io.ProMC.ProMCEvent.BLJets value) {
        if (bjetsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bjets_ = value;
          onChanged();
        } else {
          bjetsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
       *
       * <pre>
       * b-jets
       * </pre>
       */
      public Builder setBjets(
          proreco.io.ProMC.ProMCEvent.BLJets.Builder builderForValue) {
        if (bjetsBuilder_ == null) {
          bjets_ = builderForValue.build();
          onChanged();
        } else {
          bjetsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
       *
       * <pre>
       * b-jets
       * </pre>
       */
      public Builder mergeBjets(proreco.io.ProMC.ProMCEvent.BLJets value) {
        if (bjetsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              bjets_ != proreco.io.ProMC.ProMCEvent.BLJets.getDefaultInstance()) {
            bjets_ =
              proreco.io.ProMC.ProMCEvent.BLJets.newBuilder(bjets_).mergeFrom(value).buildPartial();
          } else {
            bjets_ = value;
          }
          onChanged();
        } else {
          bjetsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
       *
       * <pre>
       * b-jets
       * </pre>
       */
      public Builder clearBjets() {
        if (bjetsBuilder_ == null) {
          bjets_ = proreco.io.ProMC.ProMCEvent.BLJets.getDefaultInstance();
          onChanged();
        } else {
          bjetsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
       *
       * <pre>
       * b-jets
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.BLJets.Builder getBjetsBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getBjetsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
       *
       * <pre>
       * b-jets
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.BLJetsOrBuilder getBjetsOrBuilder() {
        if (bjetsBuilder_ != null) {
          return bjetsBuilder_.getMessageOrBuilder();
        } else {
          return bjets_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.BLJets bjets = 5;</code>
       *
       * <pre>
       * b-jets
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.BLJets, proreco.io.ProMC.ProMCEvent.BLJets.Builder, proreco.io.ProMC.ProMCEvent.BLJetsOrBuilder> 
          getBjetsFieldBuilder() {
        if (bjetsBuilder_ == null) {
          bjetsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              proreco.io.ProMC.ProMCEvent.BLJets, proreco.io.ProMC.ProMCEvent.BLJets.Builder, proreco.io.ProMC.ProMCEvent.BLJetsOrBuilder>(
                  bjets_,
                  getParentForChildren(),
                  isClean());
          bjets_ = null;
        }
        return bjetsBuilder_;
      }

      // optional .promc.ProMCEvent.Electrons electrons = 6;
      private proreco.io.ProMC.ProMCEvent.Electrons electrons_ = proreco.io.ProMC.ProMCEvent.Electrons.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Electrons, proreco.io.ProMC.ProMCEvent.Electrons.Builder, proreco.io.ProMC.ProMCEvent.ElectronsOrBuilder> electronsBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
       *
       * <pre>
       * electrons
       * </pre>
       */
      public boolean hasElectrons() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
       *
       * <pre>
       * electrons
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Electrons getElectrons() {
        if (electronsBuilder_ == null) {
          return electrons_;
        } else {
          return electronsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
       *
       * <pre>
       * electrons
       * </pre>
       */
      public Builder setElectrons(proreco.io.ProMC.ProMCEvent.Electrons value) {
        if (electronsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          electrons_ = value;
          onChanged();
        } else {
          electronsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
       *
       * <pre>
       * electrons
       * </pre>
       */
      public Builder setElectrons(
          proreco.io.ProMC.ProMCEvent.Electrons.Builder builderForValue) {
        if (electronsBuilder_ == null) {
          electrons_ = builderForValue.build();
          onChanged();
        } else {
          electronsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
       *
       * <pre>
       * electrons
       * </pre>
       */
      public Builder mergeElectrons(proreco.io.ProMC.ProMCEvent.Electrons value) {
        if (electronsBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              electrons_ != proreco.io.ProMC.ProMCEvent.Electrons.getDefaultInstance()) {
            electrons_ =
              proreco.io.ProMC.ProMCEvent.Electrons.newBuilder(electrons_).mergeFrom(value).buildPartial();
          } else {
            electrons_ = value;
          }
          onChanged();
        } else {
          electronsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
       *
       * <pre>
       * electrons
       * </pre>
       */
      public Builder clearElectrons() {
        if (electronsBuilder_ == null) {
          electrons_ = proreco.io.ProMC.ProMCEvent.Electrons.getDefaultInstance();
          onChanged();
        } else {
          electronsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
       *
       * <pre>
       * electrons
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Electrons.Builder getElectronsBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getElectronsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
       *
       * <pre>
       * electrons
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.ElectronsOrBuilder getElectronsOrBuilder() {
        if (electronsBuilder_ != null) {
          return electronsBuilder_.getMessageOrBuilder();
        } else {
          return electrons_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Electrons electrons = 6;</code>
       *
       * <pre>
       * electrons
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Electrons, proreco.io.ProMC.ProMCEvent.Electrons.Builder, proreco.io.ProMC.ProMCEvent.ElectronsOrBuilder> 
          getElectronsFieldBuilder() {
        if (electronsBuilder_ == null) {
          electronsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              proreco.io.ProMC.ProMCEvent.Electrons, proreco.io.ProMC.ProMCEvent.Electrons.Builder, proreco.io.ProMC.ProMCEvent.ElectronsOrBuilder>(
                  electrons_,
                  getParentForChildren(),
                  isClean());
          electrons_ = null;
        }
        return electronsBuilder_;
      }

      // optional .promc.ProMCEvent.Muons muons = 7;
      private proreco.io.ProMC.ProMCEvent.Muons muons_ = proreco.io.ProMC.ProMCEvent.Muons.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Muons, proreco.io.ProMC.ProMCEvent.Muons.Builder, proreco.io.ProMC.ProMCEvent.MuonsOrBuilder> muonsBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
       *
       * <pre>
       * muons 
       * </pre>
       */
      public boolean hasMuons() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
       *
       * <pre>
       * muons 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Muons getMuons() {
        if (muonsBuilder_ == null) {
          return muons_;
        } else {
          return muonsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
       *
       * <pre>
       * muons 
       * </pre>
       */
      public Builder setMuons(proreco.io.ProMC.ProMCEvent.Muons value) {
        if (muonsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          muons_ = value;
          onChanged();
        } else {
          muonsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
       *
       * <pre>
       * muons 
       * </pre>
       */
      public Builder setMuons(
          proreco.io.ProMC.ProMCEvent.Muons.Builder builderForValue) {
        if (muonsBuilder_ == null) {
          muons_ = builderForValue.build();
          onChanged();
        } else {
          muonsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
       *
       * <pre>
       * muons 
       * </pre>
       */
      public Builder mergeMuons(proreco.io.ProMC.ProMCEvent.Muons value) {
        if (muonsBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              muons_ != proreco.io.ProMC.ProMCEvent.Muons.getDefaultInstance()) {
            muons_ =
              proreco.io.ProMC.ProMCEvent.Muons.newBuilder(muons_).mergeFrom(value).buildPartial();
          } else {
            muons_ = value;
          }
          onChanged();
        } else {
          muonsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
       *
       * <pre>
       * muons 
       * </pre>
       */
      public Builder clearMuons() {
        if (muonsBuilder_ == null) {
          muons_ = proreco.io.ProMC.ProMCEvent.Muons.getDefaultInstance();
          onChanged();
        } else {
          muonsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
       *
       * <pre>
       * muons 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Muons.Builder getMuonsBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getMuonsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
       *
       * <pre>
       * muons 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.MuonsOrBuilder getMuonsOrBuilder() {
        if (muonsBuilder_ != null) {
          return muonsBuilder_.getMessageOrBuilder();
        } else {
          return muons_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Muons muons = 7;</code>
       *
       * <pre>
       * muons 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Muons, proreco.io.ProMC.ProMCEvent.Muons.Builder, proreco.io.ProMC.ProMCEvent.MuonsOrBuilder> 
          getMuonsFieldBuilder() {
        if (muonsBuilder_ == null) {
          muonsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              proreco.io.ProMC.ProMCEvent.Muons, proreco.io.ProMC.ProMCEvent.Muons.Builder, proreco.io.ProMC.ProMCEvent.MuonsOrBuilder>(
                  muons_,
                  getParentForChildren(),
                  isClean());
          muons_ = null;
        }
        return muonsBuilder_;
      }

      // optional .promc.ProMCEvent.Tracks tracks = 8;
      private proreco.io.ProMC.ProMCEvent.Tracks tracks_ = proreco.io.ProMC.ProMCEvent.Tracks.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Tracks, proreco.io.ProMC.ProMCEvent.Tracks.Builder, proreco.io.ProMC.ProMCEvent.TracksOrBuilder> tracksBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
       *
       * <pre>
       * tracks 
       * </pre>
       */
      public boolean hasTracks() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
       *
       * <pre>
       * tracks 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Tracks getTracks() {
        if (tracksBuilder_ == null) {
          return tracks_;
        } else {
          return tracksBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
       *
       * <pre>
       * tracks 
       * </pre>
       */
      public Builder setTracks(proreco.io.ProMC.ProMCEvent.Tracks value) {
        if (tracksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tracks_ = value;
          onChanged();
        } else {
          tracksBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
       *
       * <pre>
       * tracks 
       * </pre>
       */
      public Builder setTracks(
          proreco.io.ProMC.ProMCEvent.Tracks.Builder builderForValue) {
        if (tracksBuilder_ == null) {
          tracks_ = builderForValue.build();
          onChanged();
        } else {
          tracksBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
       *
       * <pre>
       * tracks 
       * </pre>
       */
      public Builder mergeTracks(proreco.io.ProMC.ProMCEvent.Tracks value) {
        if (tracksBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              tracks_ != proreco.io.ProMC.ProMCEvent.Tracks.getDefaultInstance()) {
            tracks_ =
              proreco.io.ProMC.ProMCEvent.Tracks.newBuilder(tracks_).mergeFrom(value).buildPartial();
          } else {
            tracks_ = value;
          }
          onChanged();
        } else {
          tracksBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
       *
       * <pre>
       * tracks 
       * </pre>
       */
      public Builder clearTracks() {
        if (tracksBuilder_ == null) {
          tracks_ = proreco.io.ProMC.ProMCEvent.Tracks.getDefaultInstance();
          onChanged();
        } else {
          tracksBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
       *
       * <pre>
       * tracks 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Tracks.Builder getTracksBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getTracksFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
       *
       * <pre>
       * tracks 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.TracksOrBuilder getTracksOrBuilder() {
        if (tracksBuilder_ != null) {
          return tracksBuilder_.getMessageOrBuilder();
        } else {
          return tracks_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Tracks tracks = 8;</code>
       *
       * <pre>
       * tracks 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Tracks, proreco.io.ProMC.ProMCEvent.Tracks.Builder, proreco.io.ProMC.ProMCEvent.TracksOrBuilder> 
          getTracksFieldBuilder() {
        if (tracksBuilder_ == null) {
          tracksBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              proreco.io.ProMC.ProMCEvent.Tracks, proreco.io.ProMC.ProMCEvent.Tracks.Builder, proreco.io.ProMC.ProMCEvent.TracksOrBuilder>(
                  tracks_,
                  getParentForChildren(),
                  isClean());
          tracks_ = null;
        }
        return tracksBuilder_;
      }

      // optional .promc.ProMCEvent.Photons photons = 9;
      private proreco.io.ProMC.ProMCEvent.Photons photons_ = proreco.io.ProMC.ProMCEvent.Photons.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Photons, proreco.io.ProMC.ProMCEvent.Photons.Builder, proreco.io.ProMC.ProMCEvent.PhotonsOrBuilder> photonsBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
       *
       * <pre>
       * photons 
       * </pre>
       */
      public boolean hasPhotons() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
       *
       * <pre>
       * photons 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Photons getPhotons() {
        if (photonsBuilder_ == null) {
          return photons_;
        } else {
          return photonsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
       *
       * <pre>
       * photons 
       * </pre>
       */
      public Builder setPhotons(proreco.io.ProMC.ProMCEvent.Photons value) {
        if (photonsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          photons_ = value;
          onChanged();
        } else {
          photonsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
       *
       * <pre>
       * photons 
       * </pre>
       */
      public Builder setPhotons(
          proreco.io.ProMC.ProMCEvent.Photons.Builder builderForValue) {
        if (photonsBuilder_ == null) {
          photons_ = builderForValue.build();
          onChanged();
        } else {
          photonsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
       *
       * <pre>
       * photons 
       * </pre>
       */
      public Builder mergePhotons(proreco.io.ProMC.ProMCEvent.Photons value) {
        if (photonsBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              photons_ != proreco.io.ProMC.ProMCEvent.Photons.getDefaultInstance()) {
            photons_ =
              proreco.io.ProMC.ProMCEvent.Photons.newBuilder(photons_).mergeFrom(value).buildPartial();
          } else {
            photons_ = value;
          }
          onChanged();
        } else {
          photonsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
       *
       * <pre>
       * photons 
       * </pre>
       */
      public Builder clearPhotons() {
        if (photonsBuilder_ == null) {
          photons_ = proreco.io.ProMC.ProMCEvent.Photons.getDefaultInstance();
          onChanged();
        } else {
          photonsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
       *
       * <pre>
       * photons 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.Photons.Builder getPhotonsBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getPhotonsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
       *
       * <pre>
       * photons 
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.PhotonsOrBuilder getPhotonsOrBuilder() {
        if (photonsBuilder_ != null) {
          return photonsBuilder_.getMessageOrBuilder();
        } else {
          return photons_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.Photons photons = 9;</code>
       *
       * <pre>
       * photons 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.Photons, proreco.io.ProMC.ProMCEvent.Photons.Builder, proreco.io.ProMC.ProMCEvent.PhotonsOrBuilder> 
          getPhotonsFieldBuilder() {
        if (photonsBuilder_ == null) {
          photonsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              proreco.io.ProMC.ProMCEvent.Photons, proreco.io.ProMC.ProMCEvent.Photons.Builder, proreco.io.ProMC.ProMCEvent.PhotonsOrBuilder>(
                  photons_,
                  getParentForChildren(),
                  isClean());
          photons_ = null;
        }
        return photonsBuilder_;
      }

      // optional .promc.ProMCEvent.MissingET missingET = 10;
      private proreco.io.ProMC.ProMCEvent.MissingET missingET_ = proreco.io.ProMC.ProMCEvent.MissingET.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.MissingET, proreco.io.ProMC.ProMCEvent.MissingET.Builder, proreco.io.ProMC.ProMCEvent.MissingETOrBuilder> missingETBuilder_;
      /**
       * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
       *
       * <pre>
       * missing ET
       * </pre>
       */
      public boolean hasMissingET() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
       *
       * <pre>
       * missing ET
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.MissingET getMissingET() {
        if (missingETBuilder_ == null) {
          return missingET_;
        } else {
          return missingETBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
       *
       * <pre>
       * missing ET
       * </pre>
       */
      public Builder setMissingET(proreco.io.ProMC.ProMCEvent.MissingET value) {
        if (missingETBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          missingET_ = value;
          onChanged();
        } else {
          missingETBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
       *
       * <pre>
       * missing ET
       * </pre>
       */
      public Builder setMissingET(
          proreco.io.ProMC.ProMCEvent.MissingET.Builder builderForValue) {
        if (missingETBuilder_ == null) {
          missingET_ = builderForValue.build();
          onChanged();
        } else {
          missingETBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
       *
       * <pre>
       * missing ET
       * </pre>
       */
      public Builder mergeMissingET(proreco.io.ProMC.ProMCEvent.MissingET value) {
        if (missingETBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              missingET_ != proreco.io.ProMC.ProMCEvent.MissingET.getDefaultInstance()) {
            missingET_ =
              proreco.io.ProMC.ProMCEvent.MissingET.newBuilder(missingET_).mergeFrom(value).buildPartial();
          } else {
            missingET_ = value;
          }
          onChanged();
        } else {
          missingETBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
       *
       * <pre>
       * missing ET
       * </pre>
       */
      public Builder clearMissingET() {
        if (missingETBuilder_ == null) {
          missingET_ = proreco.io.ProMC.ProMCEvent.MissingET.getDefaultInstance();
          onChanged();
        } else {
          missingETBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
       *
       * <pre>
       * missing ET
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.MissingET.Builder getMissingETBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getMissingETFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
       *
       * <pre>
       * missing ET
       * </pre>
       */
      public proreco.io.ProMC.ProMCEvent.MissingETOrBuilder getMissingETOrBuilder() {
        if (missingETBuilder_ != null) {
          return missingETBuilder_.getMessageOrBuilder();
        } else {
          return missingET_;
        }
      }
      /**
       * <code>optional .promc.ProMCEvent.MissingET missingET = 10;</code>
       *
       * <pre>
       * missing ET
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          proreco.io.ProMC.ProMCEvent.MissingET, proreco.io.ProMC.ProMCEvent.MissingET.Builder, proreco.io.ProMC.ProMCEvent.MissingETOrBuilder> 
          getMissingETFieldBuilder() {
        if (missingETBuilder_ == null) {
          missingETBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              proreco.io.ProMC.ProMCEvent.MissingET, proreco.io.ProMC.ProMCEvent.MissingET.Builder, proreco.io.ProMC.ProMCEvent.MissingETOrBuilder>(
                  missingET_,
                  getParentForChildren(),
                  isClean());
          missingET_ = null;
        }
        return missingETBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:promc.ProMCEvent)
    }

    static {
      defaultInstance = new ProMCEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:promc.ProMCEvent)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Event_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Event_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Particles_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Particles_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Jets_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Jets_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_BLJets_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_BLJets_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_GenJets_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_GenJets_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Electrons_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Electrons_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Muons_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Muons_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Tracks_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Tracks_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_Photons_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_Photons_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_promc_ProMCEvent_MissingET_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_promc_ProMCEvent_MissingET_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013ProMC.proto\022\005promc\"\237\021\n\nProMCEvent\022&\n\005e" +
      "vent\030\001 \001(\0132\027.promc.ProMCEvent.Event\022.\n\tp" +
      "articles\030\002 \001(\0132\033.promc.ProMCEvent.Partic" +
      "les\022$\n\004jets\030\003 \001(\0132\026.promc.ProMCEvent.Jet" +
      "s\022*\n\007genjets\030\004 \001(\0132\031.promc.ProMCEvent.Ge" +
      "nJets\022\'\n\005bjets\030\005 \001(\0132\030.promc.ProMCEvent." +
      "BLJets\022.\n\telectrons\030\006 \001(\0132\033.promc.ProMCE" +
      "vent.Electrons\022&\n\005muons\030\007 \001(\0132\027.promc.Pr" +
      "oMCEvent.Muons\022(\n\006tracks\030\010 \001(\0132\030.promc.P" +
      "roMCEvent.Tracks\022*\n\007photons\030\t \001(\0132\031.prom",
      "c.ProMCEvent.Photons\022.\n\tmissingET\030\n \001(\0132" +
      "\033.promc.ProMCEvent.MissingET\032\346\001\n\005Event\022\022" +
      "\n\006Number\030\001 \003(\005B\002\020\001\022\025\n\tProcessID\030\002 \003(\005B\002\020" +
      "\001\022\017\n\003MPI\030\003 \003(\005B\002\020\001\022\017\n\003ID1\030\004 \003(\005B\002\020\001\022\017\n\003I" +
      "D2\030\005 \003(\005B\002\020\001\022\020\n\004PDF1\030\006 \003(\002B\002\020\001\022\020\n\004PDF2\030\007" +
      " \003(\002B\002\020\001\022\n\n\002X1\030\010 \003(\002\022\n\n\002X2\030\t \003(\002\022\020\n\010Scal" +
      "ePDF\030\n \003(\002\022\020\n\010AlphaQED\030\013 \003(\002\022\r\n\005Scale\030\014 " +
      "\003(\002\022\020\n\010AlphaQCD\030\r \003(\002\032\210\003\n\tParticles\022\016\n\002i" +
      "d\030\001 \003(\rB\002\020\001\022\022\n\006pdg_id\030\002 \003(\021B\002\020\001\022\022\n\006statu" +
      "s\030\003 \003(\rB\002\020\001\022\020\n\004mass\030\004 \003(\004B\002\020\001\022\016\n\002Px\030\005 \003(",
      "\022B\002\020\001\022\016\n\002Py\030\006 \003(\022B\002\020\001\022\016\n\002Pz\030\007 \003(\022B\002\020\001\022\023\n" +
      "\007mother1\030\010 \003(\rB\002\020\001\022\023\n\007mother2\030\t \003(\rB\002\020\001\022" +
      "\025\n\tdaughter1\030\n \003(\rB\002\020\001\022\025\n\tdaughter2\030\013 \003(" +
      "\rB\002\020\001\022\023\n\007barcode\030\014 \003(\021B\002\020\001\022\r\n\001X\030\r \003(\021B\002\020" +
      "\001\022\r\n\001Y\030\016 \003(\021B\002\020\001\022\r\n\001Z\030\017 \003(\021B\002\020\001\022\r\n\001T\030\020 \003" +
      "(\rB\002\020\001\022\022\n\006weight\030\021 \003(\004B\002\020\001\022\022\n\006charge\030\022 \003" +
      "(\021B\002\020\001\022\016\n\002PT\030\023 \003(\004B\002\020\001\022\017\n\003Eta\030\024 \003(\022B\002\020\001\022" +
      "\017\n\003Phi\030\025 \003(\022B\002\020\001\032\310\001\n\004Jets\022\016\n\002PT\030\001 \003(\004B\002\020" +
      "\001\022\017\n\003Eta\030\002 \003(\022B\002\020\001\022\017\n\003Phi\030\003 \003(\022B\002\020\001\022\020\n\004M" +
      "ass\030\004 \003(\004B\002\020\001\022\020\n\004Btag\030\005 \003(\021B\002\020\001\022\022\n\006Tauta",
      "g\030\006 \003(\021B\002\020\001\022\022\n\006Charge\030\007 \003(\021B\002\020\001\022\024\n\010Delta" +
      "Eta\030\010 \003(\rB\002\020\001\022\024\n\010DeltaPhi\030\t \003(\rB\002\020\001\022\026\n\nH" +
      "adOverEem\030\n \003(\021B\002\020\001\032\312\001\n\006BLJets\022\016\n\002PT\030\001 \003" +
      "(\004B\002\020\001\022\017\n\003Eta\030\002 \003(\022B\002\020\001\022\017\n\003Phi\030\003 \003(\022B\002\020\001" +
      "\022\020\n\004Mass\030\004 \003(\004B\002\020\001\022\020\n\004Btag\030\005 \003(\021B\002\020\001\022\022\n\006" +
      "TauTag\030\006 \003(\021B\002\020\001\022\022\n\006Charge\030\007 \003(\021B\002\020\001\022\024\n\010" +
      "DeltaEta\030\010 \003(\rB\002\020\001\022\024\n\010DeltaPhi\030\t \003(\rB\002\020\001" +
      "\022\026\n\nHadOverEem\030\n \003(\021B\002\020\001\032\313\001\n\007GenJets\022\016\n\002" +
      "PT\030\001 \003(\004B\002\020\001\022\017\n\003Eta\030\002 \003(\022B\002\020\001\022\017\n\003Phi\030\003 \003" +
      "(\022B\002\020\001\022\020\n\004Mass\030\004 \003(\004B\002\020\001\022\020\n\004Btag\030\005 \003(\021B\002",
      "\020\001\022\022\n\006TauTag\030\006 \003(\021B\002\020\001\022\022\n\006Charge\030\007 \003(\021B\002" +
      "\020\001\022\024\n\010DeltaEta\030\010 \003(\rB\002\020\001\022\024\n\010DeltaPhi\030\t \003" +
      "(\rB\002\020\001\022\026\n\nHadOverEem\030\n \003(\021B\002\020\001\032Q\n\tElectr" +
      "ons\022\016\n\002PT\030\001 \003(\004B\002\020\001\022\017\n\003Eta\030\002 \003(\022B\002\020\001\022\017\n\003" +
      "Phi\030\003 \003(\022B\002\020\001\022\022\n\006Charge\030\004 \003(\021B\002\020\001\032M\n\005Muo" +
      "ns\022\016\n\002PT\030\001 \003(\004B\002\020\001\022\017\n\003Eta\030\002 \003(\022B\002\020\001\022\017\n\003P" +
      "hi\030\003 \003(\022B\002\020\001\022\022\n\006Charge\030\004 \003(\021B\002\020\001\032\343\001\n\006Tra" +
      "cks\022\016\n\002PT\030\001 \003(\004B\002\020\001\022\017\n\003Eta\030\002 \003(\022B\002\020\001\022\017\n\003" +
      "Phi\030\003 \003(\022B\002\020\001\022\022\n\006Charge\030\004 \003(\021B\002\020\001\022\r\n\001X\030\005" +
      " \003(\021B\002\020\001\022\r\n\001Y\030\006 \003(\021B\002\020\001\022\r\n\001Z\030\007 \003(\021B\002\020\001\022\022",
      "\n\006XOuter\030\010 \003(\021B\002\020\001\022\022\n\006YOuter\030\t \003(\021B\002\020\001\022\022" +
      "\n\006ZOuter\030\n \003(\021B\002\020\001\022\024\n\010EtaOuter\030\013 \003(\021B\002\020\001" +
      "\022\024\n\010PhiOuter\030\014 \003(\021B\002\020\001\032O\n\007Photons\022\016\n\002PT\030" +
      "\001 \003(\004B\002\020\001\022\017\n\003Eta\030\002 \003(\022B\002\020\001\022\017\n\003Phi\030\003 \003(\022B" +
      "\002\020\001\022\022\n\006Energy\030\004 \003(\022B\002\020\001\032-\n\tMissingET\022\017\n\003" +
      "MET\030\001 \003(\004B\002\020\001\022\017\n\003Phi\030\003 \003(\022B\002\020\001B\023\n\nprorec" +
      "o.ioB\005ProMC"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_promc_ProMCEvent_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_promc_ProMCEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_descriptor,
              new java.lang.String[] { "Event", "Particles", "Jets", "Genjets", "Bjets", "Electrons", "Muons", "Tracks", "Photons", "MissingET", });
          internal_static_promc_ProMCEvent_Event_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(0);
          internal_static_promc_ProMCEvent_Event_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Event_descriptor,
              new java.lang.String[] { "Number", "ProcessID", "MPI", "ID1", "ID2", "PDF1", "PDF2", "X1", "X2", "ScalePDF", "AlphaQED", "Scale", "AlphaQCD", });
          internal_static_promc_ProMCEvent_Particles_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(1);
          internal_static_promc_ProMCEvent_Particles_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Particles_descriptor,
              new java.lang.String[] { "Id", "PdgId", "Status", "Mass", "Px", "Py", "Pz", "Mother1", "Mother2", "Daughter1", "Daughter2", "Barcode", "X", "Y", "Z", "T", "Weight", "Charge", "PT", "Eta", "Phi", });
          internal_static_promc_ProMCEvent_Jets_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(2);
          internal_static_promc_ProMCEvent_Jets_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Jets_descriptor,
              new java.lang.String[] { "PT", "Eta", "Phi", "Mass", "Btag", "Tautag", "Charge", "DeltaEta", "DeltaPhi", "HadOverEem", });
          internal_static_promc_ProMCEvent_BLJets_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(3);
          internal_static_promc_ProMCEvent_BLJets_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_BLJets_descriptor,
              new java.lang.String[] { "PT", "Eta", "Phi", "Mass", "Btag", "TauTag", "Charge", "DeltaEta", "DeltaPhi", "HadOverEem", });
          internal_static_promc_ProMCEvent_GenJets_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(4);
          internal_static_promc_ProMCEvent_GenJets_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_GenJets_descriptor,
              new java.lang.String[] { "PT", "Eta", "Phi", "Mass", "Btag", "TauTag", "Charge", "DeltaEta", "DeltaPhi", "HadOverEem", });
          internal_static_promc_ProMCEvent_Electrons_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(5);
          internal_static_promc_ProMCEvent_Electrons_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Electrons_descriptor,
              new java.lang.String[] { "PT", "Eta", "Phi", "Charge", });
          internal_static_promc_ProMCEvent_Muons_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(6);
          internal_static_promc_ProMCEvent_Muons_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Muons_descriptor,
              new java.lang.String[] { "PT", "Eta", "Phi", "Charge", });
          internal_static_promc_ProMCEvent_Tracks_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(7);
          internal_static_promc_ProMCEvent_Tracks_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Tracks_descriptor,
              new java.lang.String[] { "PT", "Eta", "Phi", "Charge", "X", "Y", "Z", "XOuter", "YOuter", "ZOuter", "EtaOuter", "PhiOuter", });
          internal_static_promc_ProMCEvent_Photons_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(8);
          internal_static_promc_ProMCEvent_Photons_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_Photons_descriptor,
              new java.lang.String[] { "PT", "Eta", "Phi", "Energy", });
          internal_static_promc_ProMCEvent_MissingET_descriptor =
            internal_static_promc_ProMCEvent_descriptor.getNestedTypes().get(9);
          internal_static_promc_ProMCEvent_MissingET_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_promc_ProMCEvent_MissingET_descriptor,
              new java.lang.String[] { "MET", "Phi", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
