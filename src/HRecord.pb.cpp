// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HRecord.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HRecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace promc {

namespace {

const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_P0I_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_P0I_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_P0D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_P0D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_PXY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_PXY_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_PXYZ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_PXYZ_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_P1D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_P1D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_H1D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_H1D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_H2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_H2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_F1D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_F1D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_F2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_F2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_FND_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_FND_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_FPR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_FPR_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_PND_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_PND_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_PNI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_PNI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HRecord_2eproto() {
  protobuf_AddDesc_HRecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HRecord.proto");
  GOOGLE_CHECK(file != NULL);
  Record_descriptor_ = file->message_type(0);
  static const int Record_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, p0i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, p0d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, pxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, pxyz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, p1d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, h1d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, h2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, f1d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, f2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, fnd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, fpr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, pnd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, pni_),
  };
  Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record));
  Record_P0I_descriptor_ = Record_descriptor_->nested_type(0);
  static const int Record_P0I_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P0I, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P0I, value_),
  };
  Record_P0I_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_P0I_descriptor_,
      Record_P0I::default_instance_,
      Record_P0I_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P0I, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P0I, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_P0I));
  Record_P0D_descriptor_ = Record_descriptor_->nested_type(1);
  static const int Record_P0D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P0D, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P0D, value_),
  };
  Record_P0D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_P0D_descriptor_,
      Record_P0D::default_instance_,
      Record_P0D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P0D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P0D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_P0D));
  Record_PXY_descriptor_ = Record_descriptor_->nested_type(2);
  static const int Record_PXY_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXY, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXY, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXY, y_),
  };
  Record_PXY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_PXY_descriptor_,
      Record_PXY::default_instance_,
      Record_PXY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_PXY));
  Record_PXYZ_descriptor_ = Record_descriptor_->nested_type(3);
  static const int Record_PXYZ_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXYZ, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXYZ, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXYZ, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXYZ, z_),
  };
  Record_PXYZ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_PXYZ_descriptor_,
      Record_PXYZ::default_instance_,
      Record_PXYZ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXYZ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PXYZ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_PXYZ));
  Record_P1D_descriptor_ = Record_descriptor_->nested_type(4);
  static const int Record_P1D_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, xleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, xright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, yupper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, ylower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, xsysleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, xsysright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, ysysupper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, ysyslower_),
  };
  Record_P1D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_P1D_descriptor_,
      Record_P1D::default_instance_,
      Record_P1D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_P1D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_P1D));
  Record_H1D_descriptor_ = Record_descriptor_->nested_type(5);
  static const int Record_H1D_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, means_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, rmses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, bins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, allentries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, nentries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, underflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, overflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, rms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, isfixedbins_),
  };
  Record_H1D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_H1D_descriptor_,
      Record_H1D::default_instance_,
      Record_H1D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H1D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_H1D));
  Record_H2D_descriptor_ = Record_descriptor_->nested_type(6);
  static const int Record_H2D_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, heights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, meansx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, rmsesx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, meansy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, rmsesy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, outofrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, allentries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, nentries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, isfixedbins_),
  };
  Record_H2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_H2D_descriptor_,
      Record_H2D::default_instance_,
      Record_H2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_H2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_H2D));
  Record_F1D_descriptor_ = Record_descriptor_->nested_type(7);
  static const int Record_F1D_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F1D, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F1D, definition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F1D, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F1D, max_),
  };
  Record_F1D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_F1D_descriptor_,
      Record_F1D::default_instance_,
      Record_F1D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F1D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F1D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_F1D));
  Record_F2D_descriptor_ = Record_descriptor_->nested_type(8);
  static const int Record_F2D_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F2D, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F2D, definition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F2D, minx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F2D, maxx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F2D, miny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F2D, maxy_),
  };
  Record_F2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_F2D_descriptor_,
      Record_F2D::default_instance_,
      Record_F2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_F2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_F2D));
  Record_FND_descriptor_ = Record_descriptor_->nested_type(9);
  static const int Record_FND_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FND, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FND, definition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FND, vars_),
  };
  Record_FND_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_FND_descriptor_,
      Record_FND::default_instance_,
      Record_FND_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FND, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FND, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_FND));
  Record_FPR_descriptor_ = Record_descriptor_->nested_type(10);
  static const int Record_FPR_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FPR, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FPR, definition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FPR, divu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FPR, divv_),
  };
  Record_FPR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_FPR_descriptor_,
      Record_FPR::default_instance_,
      Record_FPR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FPR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_FPR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_FPR));
  Record_PND_descriptor_ = Record_descriptor_->nested_type(11);
  static const int Record_PND_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PND, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PND, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PND, dimension_),
  };
  Record_PND_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_PND_descriptor_,
      Record_PND::default_instance_,
      Record_PND_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PND, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PND, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_PND));
  Record_PNI_descriptor_ = Record_descriptor_->nested_type(12);
  static const int Record_PNI_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PNI, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PNI, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PNI, dimension_),
  };
  Record_PNI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_PNI_descriptor_,
      Record_PNI::default_instance_,
      Record_PNI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PNI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record_PNI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record_PNI));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HRecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_P0I_descriptor_, &Record_P0I::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_P0D_descriptor_, &Record_P0D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_PXY_descriptor_, &Record_PXY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_PXYZ_descriptor_, &Record_PXYZ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_P1D_descriptor_, &Record_P1D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_H1D_descriptor_, &Record_H1D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_H2D_descriptor_, &Record_H2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_F1D_descriptor_, &Record_F1D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_F2D_descriptor_, &Record_F2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_FND_descriptor_, &Record_FND::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_FPR_descriptor_, &Record_FPR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_PND_descriptor_, &Record_PND::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_PNI_descriptor_, &Record_PNI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HRecord_2eproto() {
  delete Record::default_instance_;
  delete Record_reflection_;
  delete Record_P0I::default_instance_;
  delete Record_P0I_reflection_;
  delete Record_P0I::_default_name_;
  delete Record_P0D::default_instance_;
  delete Record_P0D_reflection_;
  delete Record_P0D::_default_name_;
  delete Record_PXY::default_instance_;
  delete Record_PXY_reflection_;
  delete Record_PXY::_default_name_;
  delete Record_PXYZ::default_instance_;
  delete Record_PXYZ_reflection_;
  delete Record_PXYZ::_default_name_;
  delete Record_P1D::default_instance_;
  delete Record_P1D_reflection_;
  delete Record_P1D::_default_name_;
  delete Record_H1D::default_instance_;
  delete Record_H1D_reflection_;
  delete Record_H1D::_default_name_;
  delete Record_H2D::default_instance_;
  delete Record_H2D_reflection_;
  delete Record_H2D::_default_name_;
  delete Record_F1D::default_instance_;
  delete Record_F1D_reflection_;
  delete Record_F1D::_default_name_;
  delete Record_F2D::default_instance_;
  delete Record_F2D_reflection_;
  delete Record_F2D::_default_name_;
  delete Record_FND::default_instance_;
  delete Record_FND_reflection_;
  delete Record_FND::_default_name_;
  delete Record_FPR::default_instance_;
  delete Record_FPR_reflection_;
  delete Record_FPR::_default_name_;
  delete Record_PND::default_instance_;
  delete Record_PND_reflection_;
  delete Record_PND::_default_name_;
  delete Record_PNI::default_instance_;
  delete Record_PNI_reflection_;
  delete Record_PNI::_default_name_;
}

void protobuf_AddDesc_HRecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rHRecord.proto\022\005promc\"\374\016\n\006Record\022\014\n\004nam"
    "e\030\001 \001(\t\022\036\n\003p0I\030\002 \001(\0132\021.promc.Record.P0I\022"
    "\036\n\003p0D\030\003 \001(\0132\021.promc.Record.P0D\022\036\n\003pXY\030\004"
    " \001(\0132\021.promc.Record.PXY\022 \n\004pXYZ\030\005 \001(\0132\022."
    "promc.Record.PXYZ\022\036\n\003p1D\030\006 \001(\0132\021.promc.R"
    "ecord.P1D\022\036\n\003h1D\030\007 \001(\0132\021.promc.Record.H1"
    "D\022\036\n\003h2D\030\010 \001(\0132\021.promc.Record.H2D\022\036\n\003f1D"
    "\030\t \001(\0132\021.promc.Record.F1D\022\036\n\003f2D\030\n \001(\0132\021"
    ".promc.Record.F2D\022\036\n\003fND\030\013 \001(\0132\021.promc.R"
    "ecord.FND\022\036\n\003fPR\030\014 \001(\0132\021.promc.Record.FP"
    "R\022\036\n\003pND\030\r \001(\0132\021.promc.Record.PND\022\036\n\003pNI"
    "\030\016 \001(\0132\021.promc.Record.PNI\032,\n\003P0I\022\022\n\004name"
    "\030\001 \002(\t:\004none\022\021\n\005value\030\002 \003(\003B\002\020\001\032,\n\003P0D\022\022"
    "\n\004name\030\001 \002(\t:\004none\022\021\n\005value\030\002 \003(\001B\002\020\001\0327\n"
    "\003PXY\022\022\n\004name\030\001 \002(\t:\004none\022\r\n\001x\030\002 \003(\001B\002\020\001\022"
    "\r\n\001y\030\003 \003(\001B\002\020\001\032G\n\004PXYZ\022\022\n\004name\030\001 \002(\t:\004no"
    "ne\022\r\n\001x\030\002 \003(\001B\002\020\001\022\r\n\001y\030\003 \003(\001B\002\020\001\022\r\n\001z\030\004 "
    "\003(\001B\002\020\001\032\341\001\n\003P1D\022\022\n\004name\030\001 \002(\t:\004none\022\r\n\001x"
    "\030\002 \003(\001B\002\020\001\022\r\n\001y\030\003 \003(\001B\002\020\001\022\021\n\005xleft\030\004 \003(\001"
    "B\002\020\001\022\022\n\006xright\030\005 \003(\001B\002\020\001\022\022\n\006yupper\030\006 \003(\001"
    "B\002\020\001\022\022\n\006ylower\030\007 \003(\001B\002\020\001\022\024\n\010xsysleft\030\010 \003"
    "(\001B\002\020\001\022\025\n\txsysright\030\t \003(\001B\002\020\001\022\025\n\tysysupp"
    "er\030\n \003(\001B\002\020\001\022\025\n\tysyslower\030\013 \003(\001B\002\020\001\032\263\002\n\003"
    "H1D\022\022\n\004name\030\001 \002(\t:\004none\022\023\n\007heights\030\002 \003(\001"
    "B\002\020\001\022\022\n\006errors\030\003 \003(\001B\002\020\001\022\021\n\005means\030\004 \003(\001B"
    "\002\020\001\022\021\n\005rmses\030\005 \003(\001B\002\020\001\022\023\n\007entries\030\006 \003(\005B"
    "\002\020\001\022\021\n\005edges\030\007 \003(\001B\002\020\001\022\014\n\004bins\030\010 \002(\005\022\013\n\003"
    "min\030\t \002(\001\022\013\n\003max\030\n \002(\001\022\022\n\nallentries\030\013 \001"
    "(\005\022\020\n\010nentries\030\014 \001(\005\022\021\n\tunderflow\030\r \001(\001\022"
    "\020\n\010overflow\030\016 \001(\001\022\013\n\003rms\030\017 \001(\001\022\014\n\004mean\030\020"
    " \001(\001\022\023\n\013isFixedBins\030\021 \002(\010\032\217\002\n\003H2D\022\022\n\004nam"
    "e\030\001 \002(\t:\004none\022\023\n\007heights\030\002 \003(\001B\002\020\001\022\022\n\006er"
    "rors\030\003 \003(\001B\002\020\001\022\022\n\006meansX\030\004 \003(\001B\002\020\001\022\022\n\006rm"
    "sesX\030\005 \003(\001B\002\020\001\022\023\n\007entries\030\006 \003(\005B\002\020\001\022\022\n\006m"
    "eansY\030\007 \003(\001B\002\020\001\022\022\n\006rmsesY\030\010 \003(\001B\002\020\001\022\023\n\007s"
    "ummary\030\t \003(\001B\002\020\001\022\026\n\noutofrange\030\n \003(\001B\002\020\001"
    "\022\022\n\nallentries\030\013 \001(\005\022\020\n\010nentries\030\014 \001(\005\022\023"
    "\n\013isFixedBins\030\r \002(\010\032G\n\003F1D\022\022\n\004name\030\001 \002(\t"
    ":\004none\022\022\n\ndefinition\030\002 \002(\t\022\013\n\003min\030\003 \001(\001\022"
    "\013\n\003max\030\004 \001(\001\032e\n\003F2D\022\022\n\004name\030\001 \002(\t:\004none\022"
    "\022\n\ndefinition\030\002 \002(\t\022\014\n\004minX\030\003 \001(\001\022\014\n\004max"
    "X\030\004 \001(\001\022\014\n\004minY\030\005 \001(\001\022\014\n\004maxY\030\006 \001(\001\032;\n\003F"
    "ND\022\022\n\004name\030\001 \002(\t:\004none\022\022\n\ndefinition\030\002 \002"
    "(\t\022\014\n\004vars\030\003 \002(\t\032I\n\003FPR\022\022\n\004name\030\001 \002(\t:\004n"
    "one\022\022\n\ndefinition\030\002 \002(\t\022\014\n\004divU\030\003 \002(\005\022\014\n"
    "\004divV\030\004 \002(\005\032\?\n\003PND\022\022\n\004name\030\001 \002(\t:\004none\022\021"
    "\n\005value\030\002 \003(\001B\002\020\001\022\021\n\tdimension\030\003 \002(\005\032\?\n\003"
    "PNI\022\022\n\004name\030\001 \002(\t:\004none\022\021\n\005value\030\002 \003(\005B\002"
    "\020\001\022\021\n\tdimension\030\003 \002(\005B\024\n\010promc.ioB\010PBufF"
    "ile", 1963);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HRecord.proto", &protobuf_RegisterTypes);
  Record::default_instance_ = new Record();
  Record_P0I::_default_name_ =
      new ::std::string("none", 4);
  Record_P0I::default_instance_ = new Record_P0I();
  Record_P0D::_default_name_ =
      new ::std::string("none", 4);
  Record_P0D::default_instance_ = new Record_P0D();
  Record_PXY::_default_name_ =
      new ::std::string("none", 4);
  Record_PXY::default_instance_ = new Record_PXY();
  Record_PXYZ::_default_name_ =
      new ::std::string("none", 4);
  Record_PXYZ::default_instance_ = new Record_PXYZ();
  Record_P1D::_default_name_ =
      new ::std::string("none", 4);
  Record_P1D::default_instance_ = new Record_P1D();
  Record_H1D::_default_name_ =
      new ::std::string("none", 4);
  Record_H1D::default_instance_ = new Record_H1D();
  Record_H2D::_default_name_ =
      new ::std::string("none", 4);
  Record_H2D::default_instance_ = new Record_H2D();
  Record_F1D::_default_name_ =
      new ::std::string("none", 4);
  Record_F1D::default_instance_ = new Record_F1D();
  Record_F2D::_default_name_ =
      new ::std::string("none", 4);
  Record_F2D::default_instance_ = new Record_F2D();
  Record_FND::_default_name_ =
      new ::std::string("none", 4);
  Record_FND::default_instance_ = new Record_FND();
  Record_FPR::_default_name_ =
      new ::std::string("none", 4);
  Record_FPR::default_instance_ = new Record_FPR();
  Record_PND::_default_name_ =
      new ::std::string("none", 4);
  Record_PND::default_instance_ = new Record_PND();
  Record_PNI::_default_name_ =
      new ::std::string("none", 4);
  Record_PNI::default_instance_ = new Record_PNI();
  Record::default_instance_->InitAsDefaultInstance();
  Record_P0I::default_instance_->InitAsDefaultInstance();
  Record_P0D::default_instance_->InitAsDefaultInstance();
  Record_PXY::default_instance_->InitAsDefaultInstance();
  Record_PXYZ::default_instance_->InitAsDefaultInstance();
  Record_P1D::default_instance_->InitAsDefaultInstance();
  Record_H1D::default_instance_->InitAsDefaultInstance();
  Record_H2D::default_instance_->InitAsDefaultInstance();
  Record_F1D::default_instance_->InitAsDefaultInstance();
  Record_F2D::default_instance_->InitAsDefaultInstance();
  Record_FND::default_instance_->InitAsDefaultInstance();
  Record_FPR::default_instance_->InitAsDefaultInstance();
  Record_PND::default_instance_->InitAsDefaultInstance();
  Record_PNI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HRecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HRecord_2eproto {
  StaticDescriptorInitializer_HRecord_2eproto() {
    protobuf_AddDesc_HRecord_2eproto();
  }
} static_descriptor_initializer_HRecord_2eproto_;

// ===================================================================

::std::string* Record_P0I::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_P0I::kNameFieldNumber;
const int Record_P0I::kValueFieldNumber;
#endif  // !_MSC_VER

Record_P0I::Record_P0I()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_P0I::InitAsDefaultInstance() {
}

Record_P0I::Record_P0I(const Record_P0I& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_P0I::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_P0I::~Record_P0I() {
  SharedDtor();
}

void Record_P0I::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Record_P0I::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_P0I::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_P0I_descriptor_;
}

const Record_P0I& Record_P0I::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_P0I* Record_P0I::default_instance_ = NULL;

Record_P0I* Record_P0I::New() const {
  return new Record_P0I;
}

void Record_P0I::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_P0I::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated int64 value = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_P0I::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated int64 value = 2 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_P0I::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int64 value = 2 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_P0I::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int64 value = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_P0I::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_P0I* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_P0I*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_P0I::MergeFrom(const Record_P0I& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_P0I::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_P0I::CopyFrom(const Record_P0I& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_P0I::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Record_P0I::Swap(Record_P0I* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_P0I::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_P0I_descriptor_;
  metadata.reflection = Record_P0I_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_P0D::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_P0D::kNameFieldNumber;
const int Record_P0D::kValueFieldNumber;
#endif  // !_MSC_VER

Record_P0D::Record_P0D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_P0D::InitAsDefaultInstance() {
}

Record_P0D::Record_P0D(const Record_P0D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_P0D::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_P0D::~Record_P0D() {
  SharedDtor();
}

void Record_P0D::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Record_P0D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_P0D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_P0D_descriptor_;
}

const Record_P0D& Record_P0D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_P0D* Record_P0D::default_instance_ = NULL;

Record_P0D* Record_P0D::New() const {
  return new Record_P0D;
}

void Record_P0D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_P0D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated double value = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_P0D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double value = 2 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_P0D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double value = 2 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_P0D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated double value = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_P0D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_P0D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_P0D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_P0D::MergeFrom(const Record_P0D& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_P0D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_P0D::CopyFrom(const Record_P0D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_P0D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Record_P0D::Swap(Record_P0D* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_P0D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_P0D_descriptor_;
  metadata.reflection = Record_P0D_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_PXY::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_PXY::kNameFieldNumber;
const int Record_PXY::kXFieldNumber;
const int Record_PXY::kYFieldNumber;
#endif  // !_MSC_VER

Record_PXY::Record_PXY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_PXY::InitAsDefaultInstance() {
}

Record_PXY::Record_PXY(const Record_PXY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_PXY::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_PXY::~Record_PXY() {
  SharedDtor();
}

void Record_PXY::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Record_PXY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_PXY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_PXY_descriptor_;
}

const Record_PXY& Record_PXY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_PXY* Record_PXY::default_instance_ = NULL;

Record_PXY* Record_PXY::New() const {
  return new Record_PXY;
}

void Record_PXY::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  x_.Clear();
  y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_PXY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_x;
        break;
      }

      // repeated double x = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_y;
        break;
      }

      // repeated double y = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_PXY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double x = 2 [packed = true];
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->x(i), output);
  }

  // repeated double y = 3 [packed = true];
  if (this->y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_cached_byte_size_);
  }
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->y(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_PXY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double x = 2 [packed = true];
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->x(i), target);
  }

  // repeated double y = 3 [packed = true];
  if (this->y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->y(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_PXY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated double x = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->x_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double y = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->y_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_PXY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_PXY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_PXY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_PXY::MergeFrom(const Record_PXY& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_PXY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_PXY::CopyFrom(const Record_PXY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_PXY::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Record_PXY::Swap(Record_PXY* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_PXY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_PXY_descriptor_;
  metadata.reflection = Record_PXY_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_PXYZ::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_PXYZ::kNameFieldNumber;
const int Record_PXYZ::kXFieldNumber;
const int Record_PXYZ::kYFieldNumber;
const int Record_PXYZ::kZFieldNumber;
#endif  // !_MSC_VER

Record_PXYZ::Record_PXYZ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_PXYZ::InitAsDefaultInstance() {
}

Record_PXYZ::Record_PXYZ(const Record_PXYZ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_PXYZ::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_PXYZ::~Record_PXYZ() {
  SharedDtor();
}

void Record_PXYZ::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Record_PXYZ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_PXYZ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_PXYZ_descriptor_;
}

const Record_PXYZ& Record_PXYZ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_PXYZ* Record_PXYZ::default_instance_ = NULL;

Record_PXYZ* Record_PXYZ::New() const {
  return new Record_PXYZ;
}

void Record_PXYZ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  x_.Clear();
  y_.Clear();
  z_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_PXYZ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_x;
        break;
      }

      // repeated double x = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_y;
        break;
      }

      // repeated double y = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_z;
        break;
      }

      // repeated double z = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_z())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_z())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_PXYZ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double x = 2 [packed = true];
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->x(i), output);
  }

  // repeated double y = 3 [packed = true];
  if (this->y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_cached_byte_size_);
  }
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->y(i), output);
  }

  // repeated double z = 4 [packed = true];
  if (this->z_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_z_cached_byte_size_);
  }
  for (int i = 0; i < this->z_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->z(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_PXYZ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double x = 2 [packed = true];
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->x(i), target);
  }

  // repeated double y = 3 [packed = true];
  if (this->y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->y(i), target);
  }

  // repeated double z = 4 [packed = true];
  if (this->z_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _z_cached_byte_size_, target);
  }
  for (int i = 0; i < this->z_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->z(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_PXYZ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated double x = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->x_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double y = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->y_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double z = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->z_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _z_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_PXYZ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_PXYZ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_PXYZ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_PXYZ::MergeFrom(const Record_PXYZ& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_PXYZ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_PXYZ::CopyFrom(const Record_PXYZ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_PXYZ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Record_PXYZ::Swap(Record_PXYZ* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    z_.Swap(&other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_PXYZ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_PXYZ_descriptor_;
  metadata.reflection = Record_PXYZ_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_P1D::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_P1D::kNameFieldNumber;
const int Record_P1D::kXFieldNumber;
const int Record_P1D::kYFieldNumber;
const int Record_P1D::kXleftFieldNumber;
const int Record_P1D::kXrightFieldNumber;
const int Record_P1D::kYupperFieldNumber;
const int Record_P1D::kYlowerFieldNumber;
const int Record_P1D::kXsysleftFieldNumber;
const int Record_P1D::kXsysrightFieldNumber;
const int Record_P1D::kYsysupperFieldNumber;
const int Record_P1D::kYsyslowerFieldNumber;
#endif  // !_MSC_VER

Record_P1D::Record_P1D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_P1D::InitAsDefaultInstance() {
}

Record_P1D::Record_P1D(const Record_P1D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_P1D::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_P1D::~Record_P1D() {
  SharedDtor();
}

void Record_P1D::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Record_P1D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_P1D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_P1D_descriptor_;
}

const Record_P1D& Record_P1D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_P1D* Record_P1D::default_instance_ = NULL;

Record_P1D* Record_P1D::New() const {
  return new Record_P1D;
}

void Record_P1D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  x_.Clear();
  y_.Clear();
  xleft_.Clear();
  xright_.Clear();
  yupper_.Clear();
  ylower_.Clear();
  xsysleft_.Clear();
  xsysright_.Clear();
  ysysupper_.Clear();
  ysyslower_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_P1D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_x;
        break;
      }

      // repeated double x = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_y;
        break;
      }

      // repeated double y = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_xleft;
        break;
      }

      // repeated double xleft = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xleft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_xleft())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_xleft())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_xright;
        break;
      }

      // repeated double xright = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xright:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_xright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42, input, this->mutable_xright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_yupper;
        break;
      }

      // repeated double yupper = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yupper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_yupper())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_yupper())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ylower;
        break;
      }

      // repeated double ylower = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ylower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ylower())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58, input, this->mutable_ylower())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_xsysleft;
        break;
      }

      // repeated double xsysleft = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xsysleft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_xsysleft())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66, input, this->mutable_xsysleft())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_xsysright;
        break;
      }

      // repeated double xsysright = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xsysright:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_xsysright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74, input, this->mutable_xsysright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ysysupper;
        break;
      }

      // repeated double ysysupper = 10 [packed = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ysysupper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ysysupper())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 82, input, this->mutable_ysysupper())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ysyslower;
        break;
      }

      // repeated double ysyslower = 11 [packed = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ysyslower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ysyslower())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 90, input, this->mutable_ysyslower())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_P1D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double x = 2 [packed = true];
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->x(i), output);
  }

  // repeated double y = 3 [packed = true];
  if (this->y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_cached_byte_size_);
  }
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->y(i), output);
  }

  // repeated double xleft = 4 [packed = true];
  if (this->xleft_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_xleft_cached_byte_size_);
  }
  for (int i = 0; i < this->xleft_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->xleft(i), output);
  }

  // repeated double xright = 5 [packed = true];
  if (this->xright_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_xright_cached_byte_size_);
  }
  for (int i = 0; i < this->xright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->xright(i), output);
  }

  // repeated double yupper = 6 [packed = true];
  if (this->yupper_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_yupper_cached_byte_size_);
  }
  for (int i = 0; i < this->yupper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->yupper(i), output);
  }

  // repeated double ylower = 7 [packed = true];
  if (this->ylower_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ylower_cached_byte_size_);
  }
  for (int i = 0; i < this->ylower_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->ylower(i), output);
  }

  // repeated double xsysleft = 8 [packed = true];
  if (this->xsysleft_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_xsysleft_cached_byte_size_);
  }
  for (int i = 0; i < this->xsysleft_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->xsysleft(i), output);
  }

  // repeated double xsysright = 9 [packed = true];
  if (this->xsysright_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_xsysright_cached_byte_size_);
  }
  for (int i = 0; i < this->xsysright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->xsysright(i), output);
  }

  // repeated double ysysupper = 10 [packed = true];
  if (this->ysysupper_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ysysupper_cached_byte_size_);
  }
  for (int i = 0; i < this->ysysupper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->ysysupper(i), output);
  }

  // repeated double ysyslower = 11 [packed = true];
  if (this->ysyslower_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ysyslower_cached_byte_size_);
  }
  for (int i = 0; i < this->ysyslower_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->ysyslower(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_P1D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double x = 2 [packed = true];
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->x(i), target);
  }

  // repeated double y = 3 [packed = true];
  if (this->y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->y(i), target);
  }

  // repeated double xleft = 4 [packed = true];
  if (this->xleft_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _xleft_cached_byte_size_, target);
  }
  for (int i = 0; i < this->xleft_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->xleft(i), target);
  }

  // repeated double xright = 5 [packed = true];
  if (this->xright_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _xright_cached_byte_size_, target);
  }
  for (int i = 0; i < this->xright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->xright(i), target);
  }

  // repeated double yupper = 6 [packed = true];
  if (this->yupper_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _yupper_cached_byte_size_, target);
  }
  for (int i = 0; i < this->yupper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->yupper(i), target);
  }

  // repeated double ylower = 7 [packed = true];
  if (this->ylower_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ylower_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ylower_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->ylower(i), target);
  }

  // repeated double xsysleft = 8 [packed = true];
  if (this->xsysleft_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _xsysleft_cached_byte_size_, target);
  }
  for (int i = 0; i < this->xsysleft_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->xsysleft(i), target);
  }

  // repeated double xsysright = 9 [packed = true];
  if (this->xsysright_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _xsysright_cached_byte_size_, target);
  }
  for (int i = 0; i < this->xsysright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->xsysright(i), target);
  }

  // repeated double ysysupper = 10 [packed = true];
  if (this->ysysupper_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ysysupper_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ysysupper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->ysysupper(i), target);
  }

  // repeated double ysyslower = 11 [packed = true];
  if (this->ysyslower_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ysyslower_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ysyslower_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->ysyslower(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_P1D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated double x = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->x_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double y = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->y_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double xleft = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->xleft_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _xleft_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double xright = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->xright_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _xright_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double yupper = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->yupper_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _yupper_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double ylower = 7 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->ylower_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ylower_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double xsysleft = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->xsysleft_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _xsysleft_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double xsysright = 9 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->xsysright_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _xsysright_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double ysysupper = 10 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->ysysupper_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ysysupper_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double ysyslower = 11 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->ysyslower_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ysyslower_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_P1D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_P1D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_P1D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_P1D::MergeFrom(const Record_P1D& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  xleft_.MergeFrom(from.xleft_);
  xright_.MergeFrom(from.xright_);
  yupper_.MergeFrom(from.yupper_);
  ylower_.MergeFrom(from.ylower_);
  xsysleft_.MergeFrom(from.xsysleft_);
  xsysright_.MergeFrom(from.xsysright_);
  ysysupper_.MergeFrom(from.ysysupper_);
  ysyslower_.MergeFrom(from.ysyslower_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_P1D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_P1D::CopyFrom(const Record_P1D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_P1D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Record_P1D::Swap(Record_P1D* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    xleft_.Swap(&other->xleft_);
    xright_.Swap(&other->xright_);
    yupper_.Swap(&other->yupper_);
    ylower_.Swap(&other->ylower_);
    xsysleft_.Swap(&other->xsysleft_);
    xsysright_.Swap(&other->xsysright_);
    ysysupper_.Swap(&other->ysysupper_);
    ysyslower_.Swap(&other->ysyslower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_P1D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_P1D_descriptor_;
  metadata.reflection = Record_P1D_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_H1D::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_H1D::kNameFieldNumber;
const int Record_H1D::kHeightsFieldNumber;
const int Record_H1D::kErrorsFieldNumber;
const int Record_H1D::kMeansFieldNumber;
const int Record_H1D::kRmsesFieldNumber;
const int Record_H1D::kEntriesFieldNumber;
const int Record_H1D::kEdgesFieldNumber;
const int Record_H1D::kBinsFieldNumber;
const int Record_H1D::kMinFieldNumber;
const int Record_H1D::kMaxFieldNumber;
const int Record_H1D::kAllentriesFieldNumber;
const int Record_H1D::kNentriesFieldNumber;
const int Record_H1D::kUnderflowFieldNumber;
const int Record_H1D::kOverflowFieldNumber;
const int Record_H1D::kRmsFieldNumber;
const int Record_H1D::kMeanFieldNumber;
const int Record_H1D::kIsFixedBinsFieldNumber;
#endif  // !_MSC_VER

Record_H1D::Record_H1D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_H1D::InitAsDefaultInstance() {
}

Record_H1D::Record_H1D(const Record_H1D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_H1D::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  bins_ = 0;
  min_ = 0;
  max_ = 0;
  allentries_ = 0;
  nentries_ = 0;
  underflow_ = 0;
  overflow_ = 0;
  rms_ = 0;
  mean_ = 0;
  isfixedbins_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_H1D::~Record_H1D() {
  SharedDtor();
}

void Record_H1D::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Record_H1D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_H1D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_H1D_descriptor_;
}

const Record_H1D& Record_H1D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_H1D* Record_H1D::default_instance_ = NULL;

Record_H1D* Record_H1D::New() const {
  return new Record_H1D;
}

void Record_H1D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    bins_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    min_ = 0;
    max_ = 0;
    allentries_ = 0;
    nentries_ = 0;
    underflow_ = 0;
    overflow_ = 0;
    rms_ = 0;
    mean_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    isfixedbins_ = false;
  }
  heights_.Clear();
  errors_.Clear();
  means_.Clear();
  rmses_.Clear();
  entries_.Clear();
  edges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_H1D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heights;
        break;
      }

      // repeated double heights = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_errors;
        break;
      }

      // repeated double errors = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_errors())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_errors())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_means;
        break;
      }

      // repeated double means = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_means:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_means())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_means())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rmses;
        break;
      }

      // repeated double rmses = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rmses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rmses())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42, input, this->mutable_rmses())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_entries;
        break;
      }

      // repeated int32 entries = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entries())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_entries())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_edges;
        break;
      }

      // repeated double edges = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_edges())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58, input, this->mutable_edges())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bins;
        break;
      }

      // required int32 bins = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bins_)));
          set_has_bins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_min;
        break;
      }

      // required double min = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_max;
        break;
      }

      // required double max = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_allentries;
        break;
      }

      // optional int32 allentries = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allentries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allentries_)));
          set_has_allentries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nentries;
        break;
      }

      // optional int32 nentries = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nentries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nentries_)));
          set_has_nentries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_underflow;
        break;
      }

      // optional double underflow = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underflow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underflow_)));
          set_has_underflow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_overflow;
        break;
      }

      // optional double overflow = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_overflow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &overflow_)));
          set_has_overflow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_rms;
        break;
      }

      // optional double rms = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rms_)));
          set_has_rms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_mean;
        break;
      }

      // optional double mean = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_isFixedBins;
        break;
      }

      // required bool isFixedBins = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFixedBins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfixedbins_)));
          set_has_isfixedbins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_H1D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double heights = 2 [packed = true];
  if (this->heights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heights_cached_byte_size_);
  }
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->heights(i), output);
  }

  // repeated double errors = 3 [packed = true];
  if (this->errors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_errors_cached_byte_size_);
  }
  for (int i = 0; i < this->errors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->errors(i), output);
  }

  // repeated double means = 4 [packed = true];
  if (this->means_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_means_cached_byte_size_);
  }
  for (int i = 0; i < this->means_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->means(i), output);
  }

  // repeated double rmses = 5 [packed = true];
  if (this->rmses_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rmses_cached_byte_size_);
  }
  for (int i = 0; i < this->rmses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->rmses(i), output);
  }

  // repeated int32 entries = 6 [packed = true];
  if (this->entries_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_entries_cached_byte_size_);
  }
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->entries(i), output);
  }

  // repeated double edges = 7 [packed = true];
  if (this->edges_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_edges_cached_byte_size_);
  }
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->edges(i), output);
  }

  // required int32 bins = 8;
  if (has_bins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bins(), output);
  }

  // required double min = 9;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->min(), output);
  }

  // required double max = 10;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max(), output);
  }

  // optional int32 allentries = 11;
  if (has_allentries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->allentries(), output);
  }

  // optional int32 nentries = 12;
  if (has_nentries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nentries(), output);
  }

  // optional double underflow = 13;
  if (has_underflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->underflow(), output);
  }

  // optional double overflow = 14;
  if (has_overflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->overflow(), output);
  }

  // optional double rms = 15;
  if (has_rms()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->rms(), output);
  }

  // optional double mean = 16;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->mean(), output);
  }

  // required bool isFixedBins = 17;
  if (has_isfixedbins()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isfixedbins(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_H1D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double heights = 2 [packed = true];
  if (this->heights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heights_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->heights(i), target);
  }

  // repeated double errors = 3 [packed = true];
  if (this->errors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _errors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->errors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->errors(i), target);
  }

  // repeated double means = 4 [packed = true];
  if (this->means_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _means_cached_byte_size_, target);
  }
  for (int i = 0; i < this->means_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->means(i), target);
  }

  // repeated double rmses = 5 [packed = true];
  if (this->rmses_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rmses_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rmses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rmses(i), target);
  }

  // repeated int32 entries = 6 [packed = true];
  if (this->entries_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _entries_cached_byte_size_, target);
  }
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->entries(i), target);
  }

  // repeated double edges = 7 [packed = true];
  if (this->edges_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _edges_cached_byte_size_, target);
  }
  for (int i = 0; i < this->edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->edges(i), target);
  }

  // required int32 bins = 8;
  if (has_bins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bins(), target);
  }

  // required double min = 9;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->min(), target);
  }

  // required double max = 10;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max(), target);
  }

  // optional int32 allentries = 11;
  if (has_allentries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->allentries(), target);
  }

  // optional int32 nentries = 12;
  if (has_nentries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->nentries(), target);
  }

  // optional double underflow = 13;
  if (has_underflow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->underflow(), target);
  }

  // optional double overflow = 14;
  if (has_overflow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->overflow(), target);
  }

  // optional double rms = 15;
  if (has_rms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->rms(), target);
  }

  // optional double mean = 16;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->mean(), target);
  }

  // required bool isFixedBins = 17;
  if (has_isfixedbins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isfixedbins(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_H1D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 bins = 8;
    if (has_bins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bins());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double min = 9;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // required double max = 10;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // optional int32 allentries = 11;
    if (has_allentries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allentries());
    }

    // optional int32 nentries = 12;
    if (has_nentries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nentries());
    }

    // optional double underflow = 13;
    if (has_underflow()) {
      total_size += 1 + 8;
    }

    // optional double overflow = 14;
    if (has_overflow()) {
      total_size += 1 + 8;
    }

    // optional double rms = 15;
    if (has_rms()) {
      total_size += 1 + 8;
    }

    // optional double mean = 16;
    if (has_mean()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool isFixedBins = 17;
    if (has_isfixedbins()) {
      total_size += 2 + 1;
    }

  }
  // repeated double heights = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->heights_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heights_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double errors = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->errors_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _errors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double means = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->means_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _means_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rmses = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->rmses_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rmses_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 entries = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->entries_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->entries(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _entries_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double edges = 7 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->edges_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _edges_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_H1D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_H1D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_H1D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_H1D::MergeFrom(const Record_H1D& from) {
  GOOGLE_CHECK_NE(&from, this);
  heights_.MergeFrom(from.heights_);
  errors_.MergeFrom(from.errors_);
  means_.MergeFrom(from.means_);
  rmses_.MergeFrom(from.rmses_);
  entries_.MergeFrom(from.entries_);
  edges_.MergeFrom(from.edges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bins()) {
      set_bins(from.bins());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_allentries()) {
      set_allentries(from.allentries());
    }
    if (from.has_nentries()) {
      set_nentries(from.nentries());
    }
    if (from.has_underflow()) {
      set_underflow(from.underflow());
    }
    if (from.has_overflow()) {
      set_overflow(from.overflow());
    }
    if (from.has_rms()) {
      set_rms(from.rms());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isfixedbins()) {
      set_isfixedbins(from.isfixedbins());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_H1D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_H1D::CopyFrom(const Record_H1D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_H1D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00010381) != 0x00010381) return false;

  return true;
}

void Record_H1D::Swap(Record_H1D* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    heights_.Swap(&other->heights_);
    errors_.Swap(&other->errors_);
    means_.Swap(&other->means_);
    rmses_.Swap(&other->rmses_);
    entries_.Swap(&other->entries_);
    edges_.Swap(&other->edges_);
    std::swap(bins_, other->bins_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(allentries_, other->allentries_);
    std::swap(nentries_, other->nentries_);
    std::swap(underflow_, other->underflow_);
    std::swap(overflow_, other->overflow_);
    std::swap(rms_, other->rms_);
    std::swap(mean_, other->mean_);
    std::swap(isfixedbins_, other->isfixedbins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_H1D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_H1D_descriptor_;
  metadata.reflection = Record_H1D_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_H2D::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_H2D::kNameFieldNumber;
const int Record_H2D::kHeightsFieldNumber;
const int Record_H2D::kErrorsFieldNumber;
const int Record_H2D::kMeansXFieldNumber;
const int Record_H2D::kRmsesXFieldNumber;
const int Record_H2D::kEntriesFieldNumber;
const int Record_H2D::kMeansYFieldNumber;
const int Record_H2D::kRmsesYFieldNumber;
const int Record_H2D::kSummaryFieldNumber;
const int Record_H2D::kOutofrangeFieldNumber;
const int Record_H2D::kAllentriesFieldNumber;
const int Record_H2D::kNentriesFieldNumber;
const int Record_H2D::kIsFixedBinsFieldNumber;
#endif  // !_MSC_VER

Record_H2D::Record_H2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_H2D::InitAsDefaultInstance() {
}

Record_H2D::Record_H2D(const Record_H2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_H2D::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  allentries_ = 0;
  nentries_ = 0;
  isfixedbins_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_H2D::~Record_H2D() {
  SharedDtor();
}

void Record_H2D::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Record_H2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_H2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_H2D_descriptor_;
}

const Record_H2D& Record_H2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_H2D* Record_H2D::default_instance_ = NULL;

Record_H2D* Record_H2D::New() const {
  return new Record_H2D;
}

void Record_H2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    allentries_ = 0;
    nentries_ = 0;
    isfixedbins_ = false;
  }
  heights_.Clear();
  errors_.Clear();
  meansx_.Clear();
  rmsesx_.Clear();
  entries_.Clear();
  meansy_.Clear();
  rmsesy_.Clear();
  summary_.Clear();
  outofrange_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_H2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heights;
        break;
      }

      // repeated double heights = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_heights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_heights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_errors;
        break;
      }

      // repeated double errors = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_errors())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_errors())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_meansX;
        break;
      }

      // repeated double meansX = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meansX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_meansx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_meansx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rmsesX;
        break;
      }

      // repeated double rmsesX = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rmsesX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rmsesx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42, input, this->mutable_rmsesx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_entries;
        break;
      }

      // repeated int32 entries = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_entries())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_entries())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_meansY;
        break;
      }

      // repeated double meansY = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meansY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_meansy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58, input, this->mutable_meansy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rmsesY;
        break;
      }

      // repeated double rmsesY = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rmsesY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rmsesy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 66, input, this->mutable_rmsesy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_summary;
        break;
      }

      // repeated double summary = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_summary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_summary())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74, input, this->mutable_summary())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_outofrange;
        break;
      }

      // repeated double outofrange = 10 [packed = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outofrange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_outofrange())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 82, input, this->mutable_outofrange())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_allentries;
        break;
      }

      // optional int32 allentries = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allentries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allentries_)));
          set_has_allentries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nentries;
        break;
      }

      // optional int32 nentries = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nentries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nentries_)));
          set_has_nentries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isFixedBins;
        break;
      }

      // required bool isFixedBins = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFixedBins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfixedbins_)));
          set_has_isfixedbins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_H2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double heights = 2 [packed = true];
  if (this->heights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_heights_cached_byte_size_);
  }
  for (int i = 0; i < this->heights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->heights(i), output);
  }

  // repeated double errors = 3 [packed = true];
  if (this->errors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_errors_cached_byte_size_);
  }
  for (int i = 0; i < this->errors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->errors(i), output);
  }

  // repeated double meansX = 4 [packed = true];
  if (this->meansx_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_meansx_cached_byte_size_);
  }
  for (int i = 0; i < this->meansx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->meansx(i), output);
  }

  // repeated double rmsesX = 5 [packed = true];
  if (this->rmsesx_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rmsesx_cached_byte_size_);
  }
  for (int i = 0; i < this->rmsesx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->rmsesx(i), output);
  }

  // repeated int32 entries = 6 [packed = true];
  if (this->entries_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_entries_cached_byte_size_);
  }
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->entries(i), output);
  }

  // repeated double meansY = 7 [packed = true];
  if (this->meansy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_meansy_cached_byte_size_);
  }
  for (int i = 0; i < this->meansy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->meansy(i), output);
  }

  // repeated double rmsesY = 8 [packed = true];
  if (this->rmsesy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rmsesy_cached_byte_size_);
  }
  for (int i = 0; i < this->rmsesy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->rmsesy(i), output);
  }

  // repeated double summary = 9 [packed = true];
  if (this->summary_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_summary_cached_byte_size_);
  }
  for (int i = 0; i < this->summary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->summary(i), output);
  }

  // repeated double outofrange = 10 [packed = true];
  if (this->outofrange_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_outofrange_cached_byte_size_);
  }
  for (int i = 0; i < this->outofrange_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->outofrange(i), output);
  }

  // optional int32 allentries = 11;
  if (has_allentries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->allentries(), output);
  }

  // optional int32 nentries = 12;
  if (has_nentries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nentries(), output);
  }

  // required bool isFixedBins = 13;
  if (has_isfixedbins()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isfixedbins(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_H2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double heights = 2 [packed = true];
  if (this->heights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _heights_cached_byte_size_, target);
  }
  for (int i = 0; i < this->heights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->heights(i), target);
  }

  // repeated double errors = 3 [packed = true];
  if (this->errors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _errors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->errors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->errors(i), target);
  }

  // repeated double meansX = 4 [packed = true];
  if (this->meansx_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _meansx_cached_byte_size_, target);
  }
  for (int i = 0; i < this->meansx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->meansx(i), target);
  }

  // repeated double rmsesX = 5 [packed = true];
  if (this->rmsesx_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rmsesx_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rmsesx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rmsesx(i), target);
  }

  // repeated int32 entries = 6 [packed = true];
  if (this->entries_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _entries_cached_byte_size_, target);
  }
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->entries(i), target);
  }

  // repeated double meansY = 7 [packed = true];
  if (this->meansy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _meansy_cached_byte_size_, target);
  }
  for (int i = 0; i < this->meansy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->meansy(i), target);
  }

  // repeated double rmsesY = 8 [packed = true];
  if (this->rmsesy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rmsesy_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rmsesy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rmsesy(i), target);
  }

  // repeated double summary = 9 [packed = true];
  if (this->summary_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _summary_cached_byte_size_, target);
  }
  for (int i = 0; i < this->summary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->summary(i), target);
  }

  // repeated double outofrange = 10 [packed = true];
  if (this->outofrange_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _outofrange_cached_byte_size_, target);
  }
  for (int i = 0; i < this->outofrange_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->outofrange(i), target);
  }

  // optional int32 allentries = 11;
  if (has_allentries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->allentries(), target);
  }

  // optional int32 nentries = 12;
  if (has_nentries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->nentries(), target);
  }

  // required bool isFixedBins = 13;
  if (has_isfixedbins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isfixedbins(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_H2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 allentries = 11;
    if (has_allentries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allentries());
    }

    // optional int32 nentries = 12;
    if (has_nentries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nentries());
    }

    // required bool isFixedBins = 13;
    if (has_isfixedbins()) {
      total_size += 1 + 1;
    }

  }
  // repeated double heights = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->heights_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _heights_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double errors = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->errors_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _errors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double meansX = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->meansx_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _meansx_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rmsesX = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->rmsesx_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rmsesx_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 entries = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->entries_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->entries(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _entries_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double meansY = 7 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->meansy_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _meansy_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double rmsesY = 8 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->rmsesy_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rmsesy_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double summary = 9 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->summary_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _summary_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double outofrange = 10 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->outofrange_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _outofrange_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_H2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_H2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_H2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_H2D::MergeFrom(const Record_H2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  heights_.MergeFrom(from.heights_);
  errors_.MergeFrom(from.errors_);
  meansx_.MergeFrom(from.meansx_);
  rmsesx_.MergeFrom(from.rmsesx_);
  entries_.MergeFrom(from.entries_);
  meansy_.MergeFrom(from.meansy_);
  rmsesy_.MergeFrom(from.rmsesy_);
  summary_.MergeFrom(from.summary_);
  outofrange_.MergeFrom(from.outofrange_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_allentries()) {
      set_allentries(from.allentries());
    }
    if (from.has_nentries()) {
      set_nentries(from.nentries());
    }
    if (from.has_isfixedbins()) {
      set_isfixedbins(from.isfixedbins());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_H2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_H2D::CopyFrom(const Record_H2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_H2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001001) != 0x00001001) return false;

  return true;
}

void Record_H2D::Swap(Record_H2D* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    heights_.Swap(&other->heights_);
    errors_.Swap(&other->errors_);
    meansx_.Swap(&other->meansx_);
    rmsesx_.Swap(&other->rmsesx_);
    entries_.Swap(&other->entries_);
    meansy_.Swap(&other->meansy_);
    rmsesy_.Swap(&other->rmsesy_);
    summary_.Swap(&other->summary_);
    outofrange_.Swap(&other->outofrange_);
    std::swap(allentries_, other->allentries_);
    std::swap(nentries_, other->nentries_);
    std::swap(isfixedbins_, other->isfixedbins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_H2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_H2D_descriptor_;
  metadata.reflection = Record_H2D_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_F1D::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_F1D::kNameFieldNumber;
const int Record_F1D::kDefinitionFieldNumber;
const int Record_F1D::kMinFieldNumber;
const int Record_F1D::kMaxFieldNumber;
#endif  // !_MSC_VER

Record_F1D::Record_F1D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_F1D::InitAsDefaultInstance() {
}

Record_F1D::Record_F1D(const Record_F1D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_F1D::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  definition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_F1D::~Record_F1D() {
  SharedDtor();
}

void Record_F1D::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (definition_ != &::google::protobuf::internal::kEmptyString) {
    delete definition_;
  }
  if (this != default_instance_) {
  }
}

void Record_F1D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_F1D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_F1D_descriptor_;
}

const Record_F1D& Record_F1D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_F1D* Record_F1D::default_instance_ = NULL;

Record_F1D* Record_F1D::New() const {
  return new Record_F1D;
}

void Record_F1D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_definition()) {
      if (definition_ != &::google::protobuf::internal::kEmptyString) {
        definition_->clear();
      }
    }
    min_ = 0;
    max_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_F1D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_definition;
        break;
      }

      // required string definition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->definition().data(), this->definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_min;
        break;
      }

      // optional double min = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_max;
        break;
      }

      // optional double max = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_F1D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string definition = 2;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->definition(), output);
  }

  // optional double min = 3;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min(), output);
  }

  // optional double max = 4;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_F1D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string definition = 2;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->definition(), target);
  }

  // optional double min = 3;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min(), target);
  }

  // optional double max = 4;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_F1D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string definition = 2;
    if (has_definition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->definition());
    }

    // optional double min = 3;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // optional double max = 4;
    if (has_max()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_F1D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_F1D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_F1D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_F1D::MergeFrom(const Record_F1D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_definition()) {
      set_definition(from.definition());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_F1D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_F1D::CopyFrom(const Record_F1D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_F1D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Record_F1D::Swap(Record_F1D* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(definition_, other->definition_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_F1D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_F1D_descriptor_;
  metadata.reflection = Record_F1D_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_F2D::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_F2D::kNameFieldNumber;
const int Record_F2D::kDefinitionFieldNumber;
const int Record_F2D::kMinXFieldNumber;
const int Record_F2D::kMaxXFieldNumber;
const int Record_F2D::kMinYFieldNumber;
const int Record_F2D::kMaxYFieldNumber;
#endif  // !_MSC_VER

Record_F2D::Record_F2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_F2D::InitAsDefaultInstance() {
}

Record_F2D::Record_F2D(const Record_F2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_F2D::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  definition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minx_ = 0;
  maxx_ = 0;
  miny_ = 0;
  maxy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_F2D::~Record_F2D() {
  SharedDtor();
}

void Record_F2D::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (definition_ != &::google::protobuf::internal::kEmptyString) {
    delete definition_;
  }
  if (this != default_instance_) {
  }
}

void Record_F2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_F2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_F2D_descriptor_;
}

const Record_F2D& Record_F2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_F2D* Record_F2D::default_instance_ = NULL;

Record_F2D* Record_F2D::New() const {
  return new Record_F2D;
}

void Record_F2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_definition()) {
      if (definition_ != &::google::protobuf::internal::kEmptyString) {
        definition_->clear();
      }
    }
    minx_ = 0;
    maxx_ = 0;
    miny_ = 0;
    maxy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_F2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_definition;
        break;
      }

      // required string definition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->definition().data(), this->definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_minX;
        break;
      }

      // optional double minX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minx_)));
          set_has_minx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_maxX;
        break;
      }

      // optional double maxX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxx_)));
          set_has_maxx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_minY;
        break;
      }

      // optional double minY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &miny_)));
          set_has_miny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_maxY;
        break;
      }

      // optional double maxY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxy_)));
          set_has_maxy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_F2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string definition = 2;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->definition(), output);
  }

  // optional double minX = 3;
  if (has_minx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minx(), output);
  }

  // optional double maxX = 4;
  if (has_maxx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->maxx(), output);
  }

  // optional double minY = 5;
  if (has_miny()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->miny(), output);
  }

  // optional double maxY = 6;
  if (has_maxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->maxy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_F2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string definition = 2;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->definition(), target);
  }

  // optional double minX = 3;
  if (has_minx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minx(), target);
  }

  // optional double maxX = 4;
  if (has_maxx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->maxx(), target);
  }

  // optional double minY = 5;
  if (has_miny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->miny(), target);
  }

  // optional double maxY = 6;
  if (has_maxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->maxy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_F2D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string definition = 2;
    if (has_definition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->definition());
    }

    // optional double minX = 3;
    if (has_minx()) {
      total_size += 1 + 8;
    }

    // optional double maxX = 4;
    if (has_maxx()) {
      total_size += 1 + 8;
    }

    // optional double minY = 5;
    if (has_miny()) {
      total_size += 1 + 8;
    }

    // optional double maxY = 6;
    if (has_maxy()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_F2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_F2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_F2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_F2D::MergeFrom(const Record_F2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_definition()) {
      set_definition(from.definition());
    }
    if (from.has_minx()) {
      set_minx(from.minx());
    }
    if (from.has_maxx()) {
      set_maxx(from.maxx());
    }
    if (from.has_miny()) {
      set_miny(from.miny());
    }
    if (from.has_maxy()) {
      set_maxy(from.maxy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_F2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_F2D::CopyFrom(const Record_F2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_F2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Record_F2D::Swap(Record_F2D* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(definition_, other->definition_);
    std::swap(minx_, other->minx_);
    std::swap(maxx_, other->maxx_);
    std::swap(miny_, other->miny_);
    std::swap(maxy_, other->maxy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_F2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_F2D_descriptor_;
  metadata.reflection = Record_F2D_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_FND::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_FND::kNameFieldNumber;
const int Record_FND::kDefinitionFieldNumber;
const int Record_FND::kVarsFieldNumber;
#endif  // !_MSC_VER

Record_FND::Record_FND()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_FND::InitAsDefaultInstance() {
}

Record_FND::Record_FND(const Record_FND& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_FND::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  definition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vars_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_FND::~Record_FND() {
  SharedDtor();
}

void Record_FND::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (definition_ != &::google::protobuf::internal::kEmptyString) {
    delete definition_;
  }
  if (vars_ != &::google::protobuf::internal::kEmptyString) {
    delete vars_;
  }
  if (this != default_instance_) {
  }
}

void Record_FND::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_FND::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_FND_descriptor_;
}

const Record_FND& Record_FND::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_FND* Record_FND::default_instance_ = NULL;

Record_FND* Record_FND::New() const {
  return new Record_FND;
}

void Record_FND::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_definition()) {
      if (definition_ != &::google::protobuf::internal::kEmptyString) {
        definition_->clear();
      }
    }
    if (has_vars()) {
      if (vars_ != &::google::protobuf::internal::kEmptyString) {
        vars_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_FND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_definition;
        break;
      }

      // required string definition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->definition().data(), this->definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vars;
        break;
      }

      // required string vars = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vars()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vars().data(), this->vars().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_FND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string definition = 2;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->definition(), output);
  }

  // required string vars = 3;
  if (has_vars()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vars().data(), this->vars().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vars(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_FND::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string definition = 2;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->definition(), target);
  }

  // required string vars = 3;
  if (has_vars()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vars().data(), this->vars().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vars(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_FND::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string definition = 2;
    if (has_definition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->definition());
    }

    // required string vars = 3;
    if (has_vars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vars());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_FND::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_FND* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_FND*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_FND::MergeFrom(const Record_FND& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_definition()) {
      set_definition(from.definition());
    }
    if (from.has_vars()) {
      set_vars(from.vars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_FND::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_FND::CopyFrom(const Record_FND& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_FND::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Record_FND::Swap(Record_FND* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(definition_, other->definition_);
    std::swap(vars_, other->vars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_FND::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_FND_descriptor_;
  metadata.reflection = Record_FND_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_FPR::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_FPR::kNameFieldNumber;
const int Record_FPR::kDefinitionFieldNumber;
const int Record_FPR::kDivUFieldNumber;
const int Record_FPR::kDivVFieldNumber;
#endif  // !_MSC_VER

Record_FPR::Record_FPR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_FPR::InitAsDefaultInstance() {
}

Record_FPR::Record_FPR(const Record_FPR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_FPR::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  definition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  divu_ = 0;
  divv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_FPR::~Record_FPR() {
  SharedDtor();
}

void Record_FPR::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (definition_ != &::google::protobuf::internal::kEmptyString) {
    delete definition_;
  }
  if (this != default_instance_) {
  }
}

void Record_FPR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_FPR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_FPR_descriptor_;
}

const Record_FPR& Record_FPR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_FPR* Record_FPR::default_instance_ = NULL;

Record_FPR* Record_FPR::New() const {
  return new Record_FPR;
}

void Record_FPR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_definition()) {
      if (definition_ != &::google::protobuf::internal::kEmptyString) {
        definition_->clear();
      }
    }
    divu_ = 0;
    divv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_FPR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_definition;
        break;
      }

      // required string definition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_definition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_definition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->definition().data(), this->definition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_divU;
        break;
      }

      // required int32 divU = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_divU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &divu_)));
          set_has_divu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_divV;
        break;
      }

      // required int32 divV = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_divV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &divv_)));
          set_has_divv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_FPR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string definition = 2;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->definition(), output);
  }

  // required int32 divU = 3;
  if (has_divu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->divu(), output);
  }

  // required int32 divV = 4;
  if (has_divv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->divv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_FPR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string definition = 2;
  if (has_definition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->definition().data(), this->definition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->definition(), target);
  }

  // required int32 divU = 3;
  if (has_divu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->divu(), target);
  }

  // required int32 divV = 4;
  if (has_divv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->divv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_FPR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string definition = 2;
    if (has_definition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->definition());
    }

    // required int32 divU = 3;
    if (has_divu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->divu());
    }

    // required int32 divV = 4;
    if (has_divv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->divv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_FPR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_FPR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_FPR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_FPR::MergeFrom(const Record_FPR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_definition()) {
      set_definition(from.definition());
    }
    if (from.has_divu()) {
      set_divu(from.divu());
    }
    if (from.has_divv()) {
      set_divv(from.divv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_FPR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_FPR::CopyFrom(const Record_FPR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_FPR::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Record_FPR::Swap(Record_FPR* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(definition_, other->definition_);
    std::swap(divu_, other->divu_);
    std::swap(divv_, other->divv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_FPR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_FPR_descriptor_;
  metadata.reflection = Record_FPR_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_PND::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_PND::kNameFieldNumber;
const int Record_PND::kValueFieldNumber;
const int Record_PND::kDimensionFieldNumber;
#endif  // !_MSC_VER

Record_PND::Record_PND()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_PND::InitAsDefaultInstance() {
}

Record_PND::Record_PND(const Record_PND& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_PND::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  dimension_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_PND::~Record_PND() {
  SharedDtor();
}

void Record_PND::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Record_PND::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_PND::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_PND_descriptor_;
}

const Record_PND& Record_PND::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_PND* Record_PND::default_instance_ = NULL;

Record_PND* Record_PND::New() const {
  return new Record_PND;
}

void Record_PND::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    dimension_ = 0;
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_PND::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated double value = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dimension;
        break;
      }

      // required int32 dimension = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_)));
          set_has_dimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_PND::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated double value = 2 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->value(i), output);
  }

  // required int32 dimension = 3;
  if (has_dimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dimension(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_PND::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated double value = 2 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->value(i), target);
  }

  // required int32 dimension = 3;
  if (has_dimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dimension(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_PND::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 dimension = 3;
    if (has_dimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension());
    }

  }
  // repeated double value = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_PND::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_PND* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_PND*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_PND::MergeFrom(const Record_PND& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_dimension()) {
      set_dimension(from.dimension());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_PND::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_PND::CopyFrom(const Record_PND& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_PND::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Record_PND::Swap(Record_PND* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.Swap(&other->value_);
    std::swap(dimension_, other->dimension_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_PND::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_PND_descriptor_;
  metadata.reflection = Record_PND_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Record_PNI::_default_name_ = NULL;
#ifndef _MSC_VER
const int Record_PNI::kNameFieldNumber;
const int Record_PNI::kValueFieldNumber;
const int Record_PNI::kDimensionFieldNumber;
#endif  // !_MSC_VER

Record_PNI::Record_PNI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record_PNI::InitAsDefaultInstance() {
}

Record_PNI::Record_PNI(const Record_PNI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record_PNI::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  dimension_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record_PNI::~Record_PNI() {
  SharedDtor();
}

void Record_PNI::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Record_PNI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record_PNI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_PNI_descriptor_;
}

const Record_PNI& Record_PNI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record_PNI* Record_PNI::default_instance_ = NULL;

Record_PNI* Record_PNI::New() const {
  return new Record_PNI;
}

void Record_PNI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    dimension_ = 0;
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record_PNI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "none"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated int32 value = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dimension;
        break;
      }

      // required int32 dimension = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_)));
          set_has_dimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record_PNI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated int32 value = 2 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->value(i), output);
  }

  // required int32 dimension = 3;
  if (has_dimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dimension(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record_PNI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "none"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 value = 2 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->value(i), target);
  }

  // required int32 dimension = 3;
  if (has_dimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dimension(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record_PNI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "none"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 dimension = 3;
    if (has_dimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension());
    }

  }
  // repeated int32 value = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record_PNI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record_PNI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record_PNI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record_PNI::MergeFrom(const Record_PNI& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_dimension()) {
      set_dimension(from.dimension());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record_PNI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record_PNI::CopyFrom(const Record_PNI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_PNI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Record_PNI::Swap(Record_PNI* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.Swap(&other->value_);
    std::swap(dimension_, other->dimension_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record_PNI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_PNI_descriptor_;
  metadata.reflection = Record_PNI_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Record::kNameFieldNumber;
const int Record::kP0IFieldNumber;
const int Record::kP0DFieldNumber;
const int Record::kPXYFieldNumber;
const int Record::kPXYZFieldNumber;
const int Record::kP1DFieldNumber;
const int Record::kH1DFieldNumber;
const int Record::kH2DFieldNumber;
const int Record::kF1DFieldNumber;
const int Record::kF2DFieldNumber;
const int Record::kFNDFieldNumber;
const int Record::kFPRFieldNumber;
const int Record::kPNDFieldNumber;
const int Record::kPNIFieldNumber;
#endif  // !_MSC_VER

Record::Record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record::InitAsDefaultInstance() {
  p0i_ = const_cast< ::promc::Record_P0I*>(&::promc::Record_P0I::default_instance());
  p0d_ = const_cast< ::promc::Record_P0D*>(&::promc::Record_P0D::default_instance());
  pxy_ = const_cast< ::promc::Record_PXY*>(&::promc::Record_PXY::default_instance());
  pxyz_ = const_cast< ::promc::Record_PXYZ*>(&::promc::Record_PXYZ::default_instance());
  p1d_ = const_cast< ::promc::Record_P1D*>(&::promc::Record_P1D::default_instance());
  h1d_ = const_cast< ::promc::Record_H1D*>(&::promc::Record_H1D::default_instance());
  h2d_ = const_cast< ::promc::Record_H2D*>(&::promc::Record_H2D::default_instance());
  f1d_ = const_cast< ::promc::Record_F1D*>(&::promc::Record_F1D::default_instance());
  f2d_ = const_cast< ::promc::Record_F2D*>(&::promc::Record_F2D::default_instance());
  fnd_ = const_cast< ::promc::Record_FND*>(&::promc::Record_FND::default_instance());
  fpr_ = const_cast< ::promc::Record_FPR*>(&::promc::Record_FPR::default_instance());
  pnd_ = const_cast< ::promc::Record_PND*>(&::promc::Record_PND::default_instance());
  pni_ = const_cast< ::promc::Record_PNI*>(&::promc::Record_PNI::default_instance());
}

Record::Record(const Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  p0i_ = NULL;
  p0d_ = NULL;
  pxy_ = NULL;
  pxyz_ = NULL;
  p1d_ = NULL;
  h1d_ = NULL;
  h2d_ = NULL;
  f1d_ = NULL;
  f2d_ = NULL;
  fnd_ = NULL;
  fpr_ = NULL;
  pnd_ = NULL;
  pni_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  SharedDtor();
}

void Record::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete p0i_;
    delete p0d_;
    delete pxy_;
    delete pxyz_;
    delete p1d_;
    delete h1d_;
    delete h2d_;
    delete f1d_;
    delete f2d_;
    delete fnd_;
    delete fpr_;
    delete pnd_;
    delete pni_;
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HRecord_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New() const {
  return new Record;
}

void Record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_p0i()) {
      if (p0i_ != NULL) p0i_->::promc::Record_P0I::Clear();
    }
    if (has_p0d()) {
      if (p0d_ != NULL) p0d_->::promc::Record_P0D::Clear();
    }
    if (has_pxy()) {
      if (pxy_ != NULL) pxy_->::promc::Record_PXY::Clear();
    }
    if (has_pxyz()) {
      if (pxyz_ != NULL) pxyz_->::promc::Record_PXYZ::Clear();
    }
    if (has_p1d()) {
      if (p1d_ != NULL) p1d_->::promc::Record_P1D::Clear();
    }
    if (has_h1d()) {
      if (h1d_ != NULL) h1d_->::promc::Record_H1D::Clear();
    }
    if (has_h2d()) {
      if (h2d_ != NULL) h2d_->::promc::Record_H2D::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_f1d()) {
      if (f1d_ != NULL) f1d_->::promc::Record_F1D::Clear();
    }
    if (has_f2d()) {
      if (f2d_ != NULL) f2d_->::promc::Record_F2D::Clear();
    }
    if (has_fnd()) {
      if (fnd_ != NULL) fnd_->::promc::Record_FND::Clear();
    }
    if (has_fpr()) {
      if (fpr_ != NULL) fpr_->::promc::Record_FPR::Clear();
    }
    if (has_pnd()) {
      if (pnd_ != NULL) pnd_->::promc::Record_PND::Clear();
    }
    if (has_pni()) {
      if (pni_ != NULL) pni_->::promc::Record_PNI::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_p0I;
        break;
      }

      // optional .promc.Record.P0I p0I = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p0I:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p0i()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_p0D;
        break;
      }

      // optional .promc.Record.P0D p0D = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p0D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p0d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pXY;
        break;
      }

      // optional .promc.Record.PXY pXY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pXY:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pxy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pXYZ;
        break;
      }

      // optional .promc.Record.PXYZ pXYZ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pXYZ:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pxyz()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_p1D;
        break;
      }

      // optional .promc.Record.P1D p1D = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p1D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p1d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_h1D;
        break;
      }

      // optional .promc.Record.H1D h1D = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_h1D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_h1d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_h2D;
        break;
      }

      // optional .promc.Record.H2D h2D = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_h2D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_h2d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_f1D;
        break;
      }

      // optional .promc.Record.F1D f1D = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_f1D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f1d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_f2D;
        break;
      }

      // optional .promc.Record.F2D f2D = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_f2D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f2d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_fND;
        break;
      }

      // optional .promc.Record.FND fND = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fND:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fnd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fPR;
        break;
      }

      // optional .promc.Record.FPR fPR = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fPR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fpr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_pND;
        break;
      }

      // optional .promc.Record.PND pND = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pND:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pnd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pNI;
        break;
      }

      // optional .promc.Record.PNI pNI = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pNI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pni()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .promc.Record.P0I p0I = 2;
  if (has_p0i()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->p0i(), output);
  }

  // optional .promc.Record.P0D p0D = 3;
  if (has_p0d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->p0d(), output);
  }

  // optional .promc.Record.PXY pXY = 4;
  if (has_pxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pxy(), output);
  }

  // optional .promc.Record.PXYZ pXYZ = 5;
  if (has_pxyz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pxyz(), output);
  }

  // optional .promc.Record.P1D p1D = 6;
  if (has_p1d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->p1d(), output);
  }

  // optional .promc.Record.H1D h1D = 7;
  if (has_h1d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->h1d(), output);
  }

  // optional .promc.Record.H2D h2D = 8;
  if (has_h2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->h2d(), output);
  }

  // optional .promc.Record.F1D f1D = 9;
  if (has_f1d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->f1d(), output);
  }

  // optional .promc.Record.F2D f2D = 10;
  if (has_f2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->f2d(), output);
  }

  // optional .promc.Record.FND fND = 11;
  if (has_fnd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->fnd(), output);
  }

  // optional .promc.Record.FPR fPR = 12;
  if (has_fpr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->fpr(), output);
  }

  // optional .promc.Record.PND pND = 13;
  if (has_pnd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->pnd(), output);
  }

  // optional .promc.Record.PNI pNI = 14;
  if (has_pni()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->pni(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .promc.Record.P0I p0I = 2;
  if (has_p0i()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->p0i(), target);
  }

  // optional .promc.Record.P0D p0D = 3;
  if (has_p0d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->p0d(), target);
  }

  // optional .promc.Record.PXY pXY = 4;
  if (has_pxy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pxy(), target);
  }

  // optional .promc.Record.PXYZ pXYZ = 5;
  if (has_pxyz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pxyz(), target);
  }

  // optional .promc.Record.P1D p1D = 6;
  if (has_p1d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->p1d(), target);
  }

  // optional .promc.Record.H1D h1D = 7;
  if (has_h1d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->h1d(), target);
  }

  // optional .promc.Record.H2D h2D = 8;
  if (has_h2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->h2d(), target);
  }

  // optional .promc.Record.F1D f1D = 9;
  if (has_f1d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->f1d(), target);
  }

  // optional .promc.Record.F2D f2D = 10;
  if (has_f2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->f2d(), target);
  }

  // optional .promc.Record.FND fND = 11;
  if (has_fnd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->fnd(), target);
  }

  // optional .promc.Record.FPR fPR = 12;
  if (has_fpr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->fpr(), target);
  }

  // optional .promc.Record.PND pND = 13;
  if (has_pnd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->pnd(), target);
  }

  // optional .promc.Record.PNI pNI = 14;
  if (has_pni()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->pni(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .promc.Record.P0I p0I = 2;
    if (has_p0i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p0i());
    }

    // optional .promc.Record.P0D p0D = 3;
    if (has_p0d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p0d());
    }

    // optional .promc.Record.PXY pXY = 4;
    if (has_pxy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pxy());
    }

    // optional .promc.Record.PXYZ pXYZ = 5;
    if (has_pxyz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pxyz());
    }

    // optional .promc.Record.P1D p1D = 6;
    if (has_p1d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p1d());
    }

    // optional .promc.Record.H1D h1D = 7;
    if (has_h1d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->h1d());
    }

    // optional .promc.Record.H2D h2D = 8;
    if (has_h2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->h2d());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .promc.Record.F1D f1D = 9;
    if (has_f1d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f1d());
    }

    // optional .promc.Record.F2D f2D = 10;
    if (has_f2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f2d());
    }

    // optional .promc.Record.FND fND = 11;
    if (has_fnd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fnd());
    }

    // optional .promc.Record.FPR fPR = 12;
    if (has_fpr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fpr());
    }

    // optional .promc.Record.PND pND = 13;
    if (has_pnd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pnd());
    }

    // optional .promc.Record.PNI pNI = 14;
    if (has_pni()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pni());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_p0i()) {
      mutable_p0i()->::promc::Record_P0I::MergeFrom(from.p0i());
    }
    if (from.has_p0d()) {
      mutable_p0d()->::promc::Record_P0D::MergeFrom(from.p0d());
    }
    if (from.has_pxy()) {
      mutable_pxy()->::promc::Record_PXY::MergeFrom(from.pxy());
    }
    if (from.has_pxyz()) {
      mutable_pxyz()->::promc::Record_PXYZ::MergeFrom(from.pxyz());
    }
    if (from.has_p1d()) {
      mutable_p1d()->::promc::Record_P1D::MergeFrom(from.p1d());
    }
    if (from.has_h1d()) {
      mutable_h1d()->::promc::Record_H1D::MergeFrom(from.h1d());
    }
    if (from.has_h2d()) {
      mutable_h2d()->::promc::Record_H2D::MergeFrom(from.h2d());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_f1d()) {
      mutable_f1d()->::promc::Record_F1D::MergeFrom(from.f1d());
    }
    if (from.has_f2d()) {
      mutable_f2d()->::promc::Record_F2D::MergeFrom(from.f2d());
    }
    if (from.has_fnd()) {
      mutable_fnd()->::promc::Record_FND::MergeFrom(from.fnd());
    }
    if (from.has_fpr()) {
      mutable_fpr()->::promc::Record_FPR::MergeFrom(from.fpr());
    }
    if (from.has_pnd()) {
      mutable_pnd()->::promc::Record_PND::MergeFrom(from.pnd());
    }
    if (from.has_pni()) {
      mutable_pni()->::promc::Record_PNI::MergeFrom(from.pni());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {

  if (has_p0i()) {
    if (!this->p0i().IsInitialized()) return false;
  }
  if (has_p0d()) {
    if (!this->p0d().IsInitialized()) return false;
  }
  if (has_pxy()) {
    if (!this->pxy().IsInitialized()) return false;
  }
  if (has_pxyz()) {
    if (!this->pxyz().IsInitialized()) return false;
  }
  if (has_p1d()) {
    if (!this->p1d().IsInitialized()) return false;
  }
  if (has_h1d()) {
    if (!this->h1d().IsInitialized()) return false;
  }
  if (has_h2d()) {
    if (!this->h2d().IsInitialized()) return false;
  }
  if (has_f1d()) {
    if (!this->f1d().IsInitialized()) return false;
  }
  if (has_f2d()) {
    if (!this->f2d().IsInitialized()) return false;
  }
  if (has_fnd()) {
    if (!this->fnd().IsInitialized()) return false;
  }
  if (has_fpr()) {
    if (!this->fpr().IsInitialized()) return false;
  }
  if (has_pnd()) {
    if (!this->pnd().IsInitialized()) return false;
  }
  if (has_pni()) {
    if (!this->pni().IsInitialized()) return false;
  }
  return true;
}

void Record::Swap(Record* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(p0i_, other->p0i_);
    std::swap(p0d_, other->p0d_);
    std::swap(pxy_, other->pxy_);
    std::swap(pxyz_, other->pxyz_);
    std::swap(p1d_, other->p1d_);
    std::swap(h1d_, other->h1d_);
    std::swap(h2d_, other->h2d_);
    std::swap(f1d_, other->f1d_);
    std::swap(f2d_, other->f2d_);
    std::swap(fnd_, other->fnd_);
    std::swap(fpr_, other->fpr_);
    std::swap(pnd_, other->pnd_);
    std::swap(pni_, other->pni_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace promc

// @@protoc_insertion_point(global_scope)
