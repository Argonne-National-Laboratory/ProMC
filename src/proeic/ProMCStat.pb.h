// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProMCStat.proto

#ifndef PROTOBUF_ProMCStat_2eproto__INCLUDED
#define PROTOBUF_ProMCStat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace promc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProMCStat_2eproto();
void protobuf_AssignDesc_ProMCStat_2eproto();
void protobuf_ShutdownFile_ProMCStat_2eproto();

class ProMCStat;
class ProMCStat_ProcessData;
class ProMCStat_MetaInt;
class ProMCStat_MetaFloat;

// ===================================================================

class ProMCStat_ProcessData : public ::google::protobuf::Message {
 public:
  ProMCStat_ProcessData();
  virtual ~ProMCStat_ProcessData();

  ProMCStat_ProcessData(const ProMCStat_ProcessData& from);

  inline ProMCStat_ProcessData& operator=(const ProMCStat_ProcessData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProMCStat_ProcessData& default_instance();

  void Swap(ProMCStat_ProcessData* other);

  // implements Message ----------------------------------------------

  ProMCStat_ProcessData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProMCStat_ProcessData& from);
  void MergeFrom(const ProMCStat_ProcessData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required double cross_section = 2;
  inline bool has_cross_section() const;
  inline void clear_cross_section();
  static const int kCrossSectionFieldNumber = 2;
  inline double cross_section() const;
  inline void set_cross_section(double value);

  // required double cross_section_error = 3;
  inline bool has_cross_section_error() const;
  inline void clear_cross_section_error();
  static const int kCrossSectionErrorFieldNumber = 3;
  inline double cross_section_error() const;
  inline void set_cross_section_error(double value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:promc.ProMCStat.ProcessData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cross_section();
  inline void clear_has_cross_section();
  inline void set_has_cross_section_error();
  inline void clear_has_cross_section_error();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double cross_section_;
  double cross_section_error_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProMCStat_2eproto();
  friend void protobuf_AssignDesc_ProMCStat_2eproto();
  friend void protobuf_ShutdownFile_ProMCStat_2eproto();

  void InitAsDefaultInstance();
  static ProMCStat_ProcessData* default_instance_;
};
// -------------------------------------------------------------------

class ProMCStat_MetaInt : public ::google::protobuf::Message {
 public:
  ProMCStat_MetaInt();
  virtual ~ProMCStat_MetaInt();

  ProMCStat_MetaInt(const ProMCStat_MetaInt& from);

  inline ProMCStat_MetaInt& operator=(const ProMCStat_MetaInt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProMCStat_MetaInt& default_instance();

  void Swap(ProMCStat_MetaInt* other);

  // implements Message ----------------------------------------------

  ProMCStat_MetaInt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProMCStat_MetaInt& from);
  void MergeFrom(const ProMCStat_MetaInt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required sint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:promc.ProMCStat.MetaInt)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::int64 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProMCStat_2eproto();
  friend void protobuf_AssignDesc_ProMCStat_2eproto();
  friend void protobuf_ShutdownFile_ProMCStat_2eproto();

  void InitAsDefaultInstance();
  static ProMCStat_MetaInt* default_instance_;
};
// -------------------------------------------------------------------

class ProMCStat_MetaFloat : public ::google::protobuf::Message {
 public:
  ProMCStat_MetaFloat();
  virtual ~ProMCStat_MetaFloat();

  ProMCStat_MetaFloat(const ProMCStat_MetaFloat& from);

  inline ProMCStat_MetaFloat& operator=(const ProMCStat_MetaFloat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProMCStat_MetaFloat& default_instance();

  void Swap(ProMCStat_MetaFloat* other);

  // implements Message ----------------------------------------------

  ProMCStat_MetaFloat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProMCStat_MetaFloat& from);
  void MergeFrom(const ProMCStat_MetaFloat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required double value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline double value() const;
  inline void set_value(double value);

  // @@protoc_insertion_point(class_scope:promc.ProMCStat.MetaFloat)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  double value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProMCStat_2eproto();
  friend void protobuf_AssignDesc_ProMCStat_2eproto();
  friend void protobuf_ShutdownFile_ProMCStat_2eproto();

  void InitAsDefaultInstance();
  static ProMCStat_MetaFloat* default_instance_;
};
// -------------------------------------------------------------------

class ProMCStat : public ::google::protobuf::Message {
 public:
  ProMCStat();
  virtual ~ProMCStat();

  ProMCStat(const ProMCStat& from);

  inline ProMCStat& operator=(const ProMCStat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProMCStat& default_instance();

  void Swap(ProMCStat* other);

  // implements Message ----------------------------------------------

  ProMCStat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProMCStat& from);
  void MergeFrom(const ProMCStat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProMCStat_ProcessData ProcessData;
  typedef ProMCStat_MetaInt MetaInt;
  typedef ProMCStat_MetaFloat MetaFloat;

  // accessors -------------------------------------------------------

  // optional int32 nevents_requested = 1;
  inline bool has_nevents_requested() const;
  inline void clear_nevents_requested();
  static const int kNeventsRequestedFieldNumber = 1;
  inline ::google::protobuf::int32 nevents_requested() const;
  inline void set_nevents_requested(::google::protobuf::int32 value);

  // optional int32 nevents_failed = 2;
  inline bool has_nevents_failed() const;
  inline void clear_nevents_failed();
  static const int kNeventsFailedFieldNumber = 2;
  inline ::google::protobuf::int32 nevents_failed() const;
  inline void set_nevents_failed(::google::protobuf::int32 value);

  // optional double cross_section_accumulated = 3;
  inline bool has_cross_section_accumulated() const;
  inline void clear_cross_section_accumulated();
  static const int kCrossSectionAccumulatedFieldNumber = 3;
  inline double cross_section_accumulated() const;
  inline void set_cross_section_accumulated(double value);

  // optional double cross_section_error_accumulated = 4;
  inline bool has_cross_section_error_accumulated() const;
  inline void clear_cross_section_error_accumulated();
  static const int kCrossSectionErrorAccumulatedFieldNumber = 4;
  inline double cross_section_error_accumulated() const;
  inline void set_cross_section_error_accumulated(double value);

  // optional double luminosity_accumulated = 5;
  inline bool has_luminosity_accumulated() const;
  inline void clear_luminosity_accumulated();
  static const int kLuminosityAccumulatedFieldNumber = 5;
  inline double luminosity_accumulated() const;
  inline void set_luminosity_accumulated(double value);

  // optional int32 nTried = 6;
  inline bool has_ntried() const;
  inline void clear_ntried();
  static const int kNTriedFieldNumber = 6;
  inline ::google::protobuf::int32 ntried() const;
  inline void set_ntried(::google::protobuf::int32 value);

  // optional int32 nSelected = 7;
  inline bool has_nselected() const;
  inline void clear_nselected();
  static const int kNSelectedFieldNumber = 7;
  inline ::google::protobuf::int32 nselected() const;
  inline void set_nselected(::google::protobuf::int32 value);

  // optional int32 nAccepted = 8;
  inline bool has_naccepted() const;
  inline void clear_naccepted();
  static const int kNAcceptedFieldNumber = 8;
  inline ::google::protobuf::int32 naccepted() const;
  inline void set_naccepted(::google::protobuf::int32 value);

  // repeated .promc.ProMCStat.ProcessData processData = 10;
  inline int processdata_size() const;
  inline void clear_processdata();
  static const int kProcessDataFieldNumber = 10;
  inline const ::promc::ProMCStat_ProcessData& processdata(int index) const;
  inline ::promc::ProMCStat_ProcessData* mutable_processdata(int index);
  inline ::promc::ProMCStat_ProcessData* add_processdata();
  inline const ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_ProcessData >&
      processdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_ProcessData >*
      mutable_processdata();

  // repeated .promc.ProMCStat.MetaInt metaInt = 11;
  inline int metaint_size() const;
  inline void clear_metaint();
  static const int kMetaIntFieldNumber = 11;
  inline const ::promc::ProMCStat_MetaInt& metaint(int index) const;
  inline ::promc::ProMCStat_MetaInt* mutable_metaint(int index);
  inline ::promc::ProMCStat_MetaInt* add_metaint();
  inline const ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_MetaInt >&
      metaint() const;
  inline ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_MetaInt >*
      mutable_metaint();

  // repeated .promc.ProMCStat.MetaFloat metaFloat = 12;
  inline int metafloat_size() const;
  inline void clear_metafloat();
  static const int kMetaFloatFieldNumber = 12;
  inline const ::promc::ProMCStat_MetaFloat& metafloat(int index) const;
  inline ::promc::ProMCStat_MetaFloat* mutable_metafloat(int index);
  inline ::promc::ProMCStat_MetaFloat* add_metafloat();
  inline const ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_MetaFloat >&
      metafloat() const;
  inline ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_MetaFloat >*
      mutable_metafloat();

  // @@protoc_insertion_point(class_scope:promc.ProMCStat)
 private:
  inline void set_has_nevents_requested();
  inline void clear_has_nevents_requested();
  inline void set_has_nevents_failed();
  inline void clear_has_nevents_failed();
  inline void set_has_cross_section_accumulated();
  inline void clear_has_cross_section_accumulated();
  inline void set_has_cross_section_error_accumulated();
  inline void clear_has_cross_section_error_accumulated();
  inline void set_has_luminosity_accumulated();
  inline void clear_has_luminosity_accumulated();
  inline void set_has_ntried();
  inline void clear_has_ntried();
  inline void set_has_nselected();
  inline void clear_has_nselected();
  inline void set_has_naccepted();
  inline void clear_has_naccepted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nevents_requested_;
  ::google::protobuf::int32 nevents_failed_;
  double cross_section_accumulated_;
  double cross_section_error_accumulated_;
  double luminosity_accumulated_;
  ::google::protobuf::int32 ntried_;
  ::google::protobuf::int32 nselected_;
  ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_ProcessData > processdata_;
  ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_MetaInt > metaint_;
  ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_MetaFloat > metafloat_;
  ::google::protobuf::int32 naccepted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ProMCStat_2eproto();
  friend void protobuf_AssignDesc_ProMCStat_2eproto();
  friend void protobuf_ShutdownFile_ProMCStat_2eproto();

  void InitAsDefaultInstance();
  static ProMCStat* default_instance_;
};
// ===================================================================


// ===================================================================

// ProMCStat_ProcessData

// required sint32 id = 1;
inline bool ProMCStat_ProcessData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProMCStat_ProcessData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProMCStat_ProcessData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProMCStat_ProcessData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ProMCStat_ProcessData::id() const {
  return id_;
}
inline void ProMCStat_ProcessData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required double cross_section = 2;
inline bool ProMCStat_ProcessData::has_cross_section() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProMCStat_ProcessData::set_has_cross_section() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProMCStat_ProcessData::clear_has_cross_section() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProMCStat_ProcessData::clear_cross_section() {
  cross_section_ = 0;
  clear_has_cross_section();
}
inline double ProMCStat_ProcessData::cross_section() const {
  return cross_section_;
}
inline void ProMCStat_ProcessData::set_cross_section(double value) {
  set_has_cross_section();
  cross_section_ = value;
}

// required double cross_section_error = 3;
inline bool ProMCStat_ProcessData::has_cross_section_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProMCStat_ProcessData::set_has_cross_section_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProMCStat_ProcessData::clear_has_cross_section_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProMCStat_ProcessData::clear_cross_section_error() {
  cross_section_error_ = 0;
  clear_has_cross_section_error();
}
inline double ProMCStat_ProcessData::cross_section_error() const {
  return cross_section_error_;
}
inline void ProMCStat_ProcessData::set_cross_section_error(double value) {
  set_has_cross_section_error();
  cross_section_error_ = value;
}

// required string name = 4;
inline bool ProMCStat_ProcessData::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProMCStat_ProcessData::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProMCStat_ProcessData::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProMCStat_ProcessData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProMCStat_ProcessData::name() const {
  return *name_;
}
inline void ProMCStat_ProcessData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProMCStat_ProcessData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProMCStat_ProcessData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProMCStat_ProcessData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProMCStat_ProcessData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProMCStat_ProcessData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProMCStat_MetaInt

// required string key = 1;
inline bool ProMCStat_MetaInt::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProMCStat_MetaInt::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProMCStat_MetaInt::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProMCStat_MetaInt::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ProMCStat_MetaInt::key() const {
  return *key_;
}
inline void ProMCStat_MetaInt::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ProMCStat_MetaInt::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ProMCStat_MetaInt::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProMCStat_MetaInt::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* ProMCStat_MetaInt::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProMCStat_MetaInt::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sint64 value = 2;
inline bool ProMCStat_MetaInt::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProMCStat_MetaInt::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProMCStat_MetaInt::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProMCStat_MetaInt::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 ProMCStat_MetaInt::value() const {
  return value_;
}
inline void ProMCStat_MetaInt::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// ProMCStat_MetaFloat

// required string key = 1;
inline bool ProMCStat_MetaFloat::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProMCStat_MetaFloat::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProMCStat_MetaFloat::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProMCStat_MetaFloat::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ProMCStat_MetaFloat::key() const {
  return *key_;
}
inline void ProMCStat_MetaFloat::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ProMCStat_MetaFloat::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ProMCStat_MetaFloat::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProMCStat_MetaFloat::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* ProMCStat_MetaFloat::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProMCStat_MetaFloat::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double value = 2;
inline bool ProMCStat_MetaFloat::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProMCStat_MetaFloat::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProMCStat_MetaFloat::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProMCStat_MetaFloat::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double ProMCStat_MetaFloat::value() const {
  return value_;
}
inline void ProMCStat_MetaFloat::set_value(double value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// ProMCStat

// optional int32 nevents_requested = 1;
inline bool ProMCStat::has_nevents_requested() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProMCStat::set_has_nevents_requested() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProMCStat::clear_has_nevents_requested() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProMCStat::clear_nevents_requested() {
  nevents_requested_ = 0;
  clear_has_nevents_requested();
}
inline ::google::protobuf::int32 ProMCStat::nevents_requested() const {
  return nevents_requested_;
}
inline void ProMCStat::set_nevents_requested(::google::protobuf::int32 value) {
  set_has_nevents_requested();
  nevents_requested_ = value;
}

// optional int32 nevents_failed = 2;
inline bool ProMCStat::has_nevents_failed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProMCStat::set_has_nevents_failed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProMCStat::clear_has_nevents_failed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProMCStat::clear_nevents_failed() {
  nevents_failed_ = 0;
  clear_has_nevents_failed();
}
inline ::google::protobuf::int32 ProMCStat::nevents_failed() const {
  return nevents_failed_;
}
inline void ProMCStat::set_nevents_failed(::google::protobuf::int32 value) {
  set_has_nevents_failed();
  nevents_failed_ = value;
}

// optional double cross_section_accumulated = 3;
inline bool ProMCStat::has_cross_section_accumulated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProMCStat::set_has_cross_section_accumulated() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProMCStat::clear_has_cross_section_accumulated() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProMCStat::clear_cross_section_accumulated() {
  cross_section_accumulated_ = 0;
  clear_has_cross_section_accumulated();
}
inline double ProMCStat::cross_section_accumulated() const {
  return cross_section_accumulated_;
}
inline void ProMCStat::set_cross_section_accumulated(double value) {
  set_has_cross_section_accumulated();
  cross_section_accumulated_ = value;
}

// optional double cross_section_error_accumulated = 4;
inline bool ProMCStat::has_cross_section_error_accumulated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProMCStat::set_has_cross_section_error_accumulated() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProMCStat::clear_has_cross_section_error_accumulated() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProMCStat::clear_cross_section_error_accumulated() {
  cross_section_error_accumulated_ = 0;
  clear_has_cross_section_error_accumulated();
}
inline double ProMCStat::cross_section_error_accumulated() const {
  return cross_section_error_accumulated_;
}
inline void ProMCStat::set_cross_section_error_accumulated(double value) {
  set_has_cross_section_error_accumulated();
  cross_section_error_accumulated_ = value;
}

// optional double luminosity_accumulated = 5;
inline bool ProMCStat::has_luminosity_accumulated() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProMCStat::set_has_luminosity_accumulated() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProMCStat::clear_has_luminosity_accumulated() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProMCStat::clear_luminosity_accumulated() {
  luminosity_accumulated_ = 0;
  clear_has_luminosity_accumulated();
}
inline double ProMCStat::luminosity_accumulated() const {
  return luminosity_accumulated_;
}
inline void ProMCStat::set_luminosity_accumulated(double value) {
  set_has_luminosity_accumulated();
  luminosity_accumulated_ = value;
}

// optional int32 nTried = 6;
inline bool ProMCStat::has_ntried() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProMCStat::set_has_ntried() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProMCStat::clear_has_ntried() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProMCStat::clear_ntried() {
  ntried_ = 0;
  clear_has_ntried();
}
inline ::google::protobuf::int32 ProMCStat::ntried() const {
  return ntried_;
}
inline void ProMCStat::set_ntried(::google::protobuf::int32 value) {
  set_has_ntried();
  ntried_ = value;
}

// optional int32 nSelected = 7;
inline bool ProMCStat::has_nselected() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProMCStat::set_has_nselected() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProMCStat::clear_has_nselected() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProMCStat::clear_nselected() {
  nselected_ = 0;
  clear_has_nselected();
}
inline ::google::protobuf::int32 ProMCStat::nselected() const {
  return nselected_;
}
inline void ProMCStat::set_nselected(::google::protobuf::int32 value) {
  set_has_nselected();
  nselected_ = value;
}

// optional int32 nAccepted = 8;
inline bool ProMCStat::has_naccepted() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProMCStat::set_has_naccepted() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProMCStat::clear_has_naccepted() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProMCStat::clear_naccepted() {
  naccepted_ = 0;
  clear_has_naccepted();
}
inline ::google::protobuf::int32 ProMCStat::naccepted() const {
  return naccepted_;
}
inline void ProMCStat::set_naccepted(::google::protobuf::int32 value) {
  set_has_naccepted();
  naccepted_ = value;
}

// repeated .promc.ProMCStat.ProcessData processData = 10;
inline int ProMCStat::processdata_size() const {
  return processdata_.size();
}
inline void ProMCStat::clear_processdata() {
  processdata_.Clear();
}
inline const ::promc::ProMCStat_ProcessData& ProMCStat::processdata(int index) const {
  return processdata_.Get(index);
}
inline ::promc::ProMCStat_ProcessData* ProMCStat::mutable_processdata(int index) {
  return processdata_.Mutable(index);
}
inline ::promc::ProMCStat_ProcessData* ProMCStat::add_processdata() {
  return processdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_ProcessData >&
ProMCStat::processdata() const {
  return processdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_ProcessData >*
ProMCStat::mutable_processdata() {
  return &processdata_;
}

// repeated .promc.ProMCStat.MetaInt metaInt = 11;
inline int ProMCStat::metaint_size() const {
  return metaint_.size();
}
inline void ProMCStat::clear_metaint() {
  metaint_.Clear();
}
inline const ::promc::ProMCStat_MetaInt& ProMCStat::metaint(int index) const {
  return metaint_.Get(index);
}
inline ::promc::ProMCStat_MetaInt* ProMCStat::mutable_metaint(int index) {
  return metaint_.Mutable(index);
}
inline ::promc::ProMCStat_MetaInt* ProMCStat::add_metaint() {
  return metaint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_MetaInt >&
ProMCStat::metaint() const {
  return metaint_;
}
inline ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_MetaInt >*
ProMCStat::mutable_metaint() {
  return &metaint_;
}

// repeated .promc.ProMCStat.MetaFloat metaFloat = 12;
inline int ProMCStat::metafloat_size() const {
  return metafloat_.size();
}
inline void ProMCStat::clear_metafloat() {
  metafloat_.Clear();
}
inline const ::promc::ProMCStat_MetaFloat& ProMCStat::metafloat(int index) const {
  return metafloat_.Get(index);
}
inline ::promc::ProMCStat_MetaFloat* ProMCStat::mutable_metafloat(int index) {
  return metafloat_.Mutable(index);
}
inline ::promc::ProMCStat_MetaFloat* ProMCStat::add_metafloat() {
  return metafloat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_MetaFloat >&
ProMCStat::metafloat() const {
  return metafloat_;
}
inline ::google::protobuf::RepeatedPtrField< ::promc::ProMCStat_MetaFloat >*
ProMCStat::mutable_metafloat() {
  return &metafloat_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace promc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProMCStat_2eproto__INCLUDED
